!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
ABS_SYMBOL	output/outcoff.c	/^        ABS_SYMBOL,$/;"	e	enum:Reloc::<anonymous>	file:
ALIGN_DEFINED	output/outbin.c	67;"	d	file:
ARG_BUF_DELTA	nasm.c	620;"	d	file:
ARRAYBOT	output/outobj.c	499;"	d	file:
ARRAY_BOT	output/outieee.c	52;"	d	file:
ATTRIB_ALIGN	output/outbin.c	/^enum { ATTRIB_START, ATTRIB_ALIGN, ATTRIB_FOLLOWS,$/;"	e	file:
ATTRIB_FOLLOWS	output/outbin.c	/^enum { ATTRIB_START, ATTRIB_ALIGN, ATTRIB_FOLLOWS,$/;"	e	file:
ATTRIB_NOBITS	output/outbin.c	/^    ATTRIB_NOBITS, ATTRIB_PROGBITS$/;"	e	file:
ATTRIB_PROGBITS	output/outbin.c	/^    ATTRIB_NOBITS, ATTRIB_PROGBITS$/;"	e	file:
ATTRIB_START	output/outbin.c	/^enum { ATTRIB_START, ATTRIB_ALIGN, ATTRIB_FOLLOWS,$/;"	e	file:
ATTRIB_VALIGN	output/outbin.c	/^    ATTRIB_VSTART, ATTRIB_VALIGN, ATTRIB_VFOLLOWS,$/;"	e	file:
ATTRIB_VFOLLOWS	output/outbin.c	/^    ATTRIB_VSTART, ATTRIB_VALIGN, ATTRIB_VFOLLOWS,$/;"	e	file:
ATTRIB_VSTART	output/outbin.c	/^    ATTRIB_VSTART, ATTRIB_VALIGN, ATTRIB_VFOLLOWS,$/;"	e	file:
AUXFILES	rdoff/doc/Makefile	/^AUXFILES = *.aux *.cp *.fn *.ky *.log *.pg *.toc *.tp *.vr *.dvi$/;"	m
AddExport	output/outcoff.c	/^void AddExport(char *name)$/;"	f
ArgOffset	preproc.c	/^static int ArgOffset = 8;$/;"	v	file:
Array	output/outieee.c	/^static struct Array {$/;"	s	file:
Array	output/outobj.c	/^static struct Array {$/;"	s	file:
BITS16	nasm.h	372;"	d
BITS32	nasm.h	373;"	d
BITS64	nasm.h	374;"	d
BITS8	nasm.h	371;"	d
BITS80	nasm.h	375;"	d
BOGUS_VALUE	labels.c	38;"	d	file:
BPL	ndisasm.c	21;"	d	file:
BRANCHSIZ	nasmlib.c	327;"	d	file:
BSSRec	output/outrdf.c	/^struct BSSRec {$/;"	s	file:
BSSRec	rdoff/rdoff.h	/^struct BSSRec {$/;"	s
BSS_FLAGS	output/outcoff.c	103;"	d	file:
BUF_BLOCK_LEN	output/outrdf.c	85;"	d	file:
BUF_BLOCK_LEN	output/outrdf2.c	57;"	d	file:
BUF_BLOCK_LEN	rdoff/rdoff.h	203;"	d
BUF_DELTA	nasm.c	1575;"	d	file:
BUF_DELTA	preproc.c	604;"	d	file:
BUILD_DRIVERS_ARRAY	outform.c	15;"	d	file:
BYTENESS	nasm.h	432;"	d
Blocks	preproc.c	/^struct Blocks {$/;"	s	file:
Blocks	preproc.c	/^typedef struct Blocks Blocks;$/;"	t	file:
BuildExportTable	output/outcoff.c	/^void BuildExportTable(void)$/;"	f
CC	Makefile	/^CC		= gcc$/;"	m
CC	rdoff/Makefile	/^CC		= gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS		= -g -O2 -Wall -std=c99 -pedantic -DHAVE_CONFIG_H -I$(srcdir) -I.  -Wall -O2 -nostdlib -nodefaultlibs -ffreestanding -nostdinc -nostartfiles -D__GCC__ -I${MOSAPP_LIBC_HOME}\/include\/ -I${MOSAPP_LIBC_HOME}\/sysdeps\/mos\/common\/ -L${MOSAPP_LIBC_HOME}\/ -lc$/;"	m
CFLAGS	rdoff/Makefile	/^CFLAGS		= -g -O2 -Wall -std=c99 -pedantic -I$(srcdir) -I$(top_srcdir)$/;"	m
CMB_COMMON	output/outieee.c	/^        CMB_COMMON = 6$/;"	e	enum:ieeeSection::<anonymous>	file:
CMB_COMMON	output/outobj.c	/^        CMB_COMMON = 6$/;"	e	enum:Segment::<anonymous>	file:
CMB_PRIVATE	output/outieee.c	/^        CMB_PRIVATE = 0,$/;"	e	enum:ieeeSection::<anonymous>	file:
CMB_PRIVATE	output/outobj.c	/^        CMB_PRIVATE = 0,$/;"	e	enum:Segment::<anonymous>	file:
CMB_PUBLIC	output/outieee.c	/^        CMB_PUBLIC = 2,$/;"	e	enum:ieeeSection::<anonymous>	file:
CMB_PUBLIC	output/outobj.c	/^        CMB_PUBLIC = 2,$/;"	e	enum:Segment::<anonymous>	file:
CMB_STACK	output/outobj.c	/^        CMB_STACK = 5,$/;"	e	enum:Segment::<anonymous>	file:
COLON	nasm.h	385;"	d
COMDEF	output/outobj.c	/^    COMDEF = 0xB0,              \/* common definition *\/$/;"	e	enum:RecordID	file:
COMENT	output/outobj.c	/^    COMENT = 0x88,              \/* comment record *\/$/;"	e	enum:RecordID	file:
COND_ELSE_FALSE	preproc.c	/^    COND_ELSE_TRUE, COND_ELSE_FALSE,$/;"	e	file:
COND_ELSE_TRUE	preproc.c	/^    COND_ELSE_TRUE, COND_ELSE_FALSE,$/;"	e	file:
COND_IF_FALSE	preproc.c	/^    COND_IF_TRUE, COND_IF_FALSE,$/;"	e	file:
COND_IF_TRUE	preproc.c	/^    COND_IF_TRUE, COND_IF_FALSE,$/;"	e	file:
COND_NEVER	preproc.c	/^    COND_NEVER$/;"	e	file:
COUNT_SEGTYPES	output/outrdf2.c	41;"	d	file:
CRITICAL	nasm.h	276;"	d
C_A	nasm.h	/^    C_A, C_AE, C_B, C_BE, C_C, C_E, C_G, C_GE, C_L, C_LE, C_NA, C_NAE,$/;"	e
C_AE	nasm.h	/^    C_A, C_AE, C_B, C_BE, C_C, C_E, C_G, C_GE, C_L, C_LE, C_NA, C_NAE,$/;"	e
C_B	nasm.h	/^    C_A, C_AE, C_B, C_BE, C_C, C_E, C_G, C_GE, C_L, C_LE, C_NA, C_NAE,$/;"	e
C_BE	nasm.h	/^    C_A, C_AE, C_B, C_BE, C_C, C_E, C_G, C_GE, C_L, C_LE, C_NA, C_NAE,$/;"	e
C_C	nasm.h	/^    C_A, C_AE, C_B, C_BE, C_C, C_E, C_G, C_GE, C_L, C_LE, C_NA, C_NAE,$/;"	e
C_E	nasm.h	/^    C_A, C_AE, C_B, C_BE, C_C, C_E, C_G, C_GE, C_L, C_LE, C_NA, C_NAE,$/;"	e
C_G	nasm.h	/^    C_A, C_AE, C_B, C_BE, C_C, C_E, C_G, C_GE, C_L, C_LE, C_NA, C_NAE,$/;"	e
C_GE	nasm.h	/^    C_A, C_AE, C_B, C_BE, C_C, C_E, C_G, C_GE, C_L, C_LE, C_NA, C_NAE,$/;"	e
C_L	nasm.h	/^    C_A, C_AE, C_B, C_BE, C_C, C_E, C_G, C_GE, C_L, C_LE, C_NA, C_NAE,$/;"	e
C_LE	nasm.h	/^    C_A, C_AE, C_B, C_BE, C_C, C_E, C_G, C_GE, C_L, C_LE, C_NA, C_NAE,$/;"	e
C_NA	nasm.h	/^    C_A, C_AE, C_B, C_BE, C_C, C_E, C_G, C_GE, C_L, C_LE, C_NA, C_NAE,$/;"	e
C_NAE	nasm.h	/^    C_A, C_AE, C_B, C_BE, C_C, C_E, C_G, C_GE, C_L, C_LE, C_NA, C_NAE,$/;"	e
C_NB	nasm.h	/^    C_NB, C_NBE, C_NC, C_NE, C_NG, C_NGE, C_NL, C_NLE, C_NO, C_NP,$/;"	e
C_NBE	nasm.h	/^    C_NB, C_NBE, C_NC, C_NE, C_NG, C_NGE, C_NL, C_NLE, C_NO, C_NP,$/;"	e
C_NC	nasm.h	/^    C_NB, C_NBE, C_NC, C_NE, C_NG, C_NGE, C_NL, C_NLE, C_NO, C_NP,$/;"	e
C_NE	nasm.h	/^    C_NB, C_NBE, C_NC, C_NE, C_NG, C_NGE, C_NL, C_NLE, C_NO, C_NP,$/;"	e
C_NG	nasm.h	/^    C_NB, C_NBE, C_NC, C_NE, C_NG, C_NGE, C_NL, C_NLE, C_NO, C_NP,$/;"	e
C_NGE	nasm.h	/^    C_NB, C_NBE, C_NC, C_NE, C_NG, C_NGE, C_NL, C_NLE, C_NO, C_NP,$/;"	e
C_NL	nasm.h	/^    C_NB, C_NBE, C_NC, C_NE, C_NG, C_NGE, C_NL, C_NLE, C_NO, C_NP,$/;"	e
C_NLE	nasm.h	/^    C_NB, C_NBE, C_NC, C_NE, C_NG, C_NGE, C_NL, C_NLE, C_NO, C_NP,$/;"	e
C_NO	nasm.h	/^    C_NB, C_NBE, C_NC, C_NE, C_NG, C_NGE, C_NL, C_NLE, C_NO, C_NP,$/;"	e
C_NP	nasm.h	/^    C_NB, C_NBE, C_NC, C_NE, C_NG, C_NGE, C_NL, C_NLE, C_NO, C_NP,$/;"	e
C_NS	nasm.h	/^    C_NS, C_NZ, C_O, C_P, C_PE, C_PO, C_S, C_Z$/;"	e
C_NZ	nasm.h	/^    C_NS, C_NZ, C_O, C_P, C_PE, C_PO, C_S, C_Z$/;"	e
C_O	nasm.h	/^    C_NS, C_NZ, C_O, C_P, C_PE, C_PO, C_S, C_Z$/;"	e
C_P	nasm.h	/^    C_NS, C_NZ, C_O, C_P, C_PE, C_PO, C_S, C_Z$/;"	e
C_PE	nasm.h	/^    C_NS, C_NZ, C_O, C_P, C_PE, C_PO, C_S, C_Z$/;"	e
C_PO	nasm.h	/^    C_NS, C_NZ, C_O, C_P, C_PE, C_PO, C_S, C_Z$/;"	e
C_S	nasm.h	/^    C_NS, C_NZ, C_O, C_P, C_PE, C_PO, C_S, C_Z$/;"	e
C_Z	nasm.h	/^    C_NS, C_NZ, C_O, C_P, C_PE, C_PO, C_S, C_Z$/;"	e
Collection	rdoff/collectn.h	/^} Collection;$/;"	t
ComentID	output/outobj.c	/^enum ComentID {                 \/* ID codes for comment records *\/$/;"	g	file:
CommonRec	rdoff/rdoff.h	/^struct CommonRec {$/;"	s
Cond	preproc.c	/^struct Cond {$/;"	s	file:
Cond	preproc.c	/^typedef struct Cond Cond;$/;"	t	file:
Context	preproc.c	/^struct Context {$/;"	s	file:
Context	preproc.c	/^typedef struct Context Context;$/;"	t	file:
DATA_FLAGS	output/outcoff.c	102;"	d	file:
DEFINED_BIT	labels.c	46;"	d	file:
DEFWRT_GROUP	output/outobj.c	/^        DEFWRT_GROUP            \/* a group *\/$/;"	e	enum:External::<anonymous>	file:
DEFWRT_NONE	output/outobj.c	/^        DEFWRT_NONE,            \/* no unusual default-WRT *\/$/;"	e	enum:External::<anonymous>	file:
DEFWRT_SEGMENT	output/outobj.c	/^        DEFWRT_SEGMENT,         \/* a segment *\/$/;"	e	enum:External::<anonymous>	file:
DEFWRT_STRING	output/outobj.c	/^        DEFWRT_STRING,          \/* a string we don't yet understand *\/$/;"	e	enum:External::<anonymous>	file:
DIRECTIVE_FOUND	preproc.c	245;"	d	file:
DLLRec	output/outrdf.c	/^struct DLLRec {$/;"	s	file:
DLLRec	rdoff/rdoff.h	/^struct DLLRec {$/;"	s
EAF_BYTEOFFS	nasm.h	/^    EAF_BYTEOFFS = 1,           \/* force offset part to byte size *\/$/;"	e
EAF_TIMESTWO	nasm.h	/^    EAF_TIMESTWO = 4            \/* really do EAX*2 not EAX+EAX *\/$/;"	e
EAF_WORDOFFS	nasm.h	/^    EAF_WORDOFFS = 2,           \/* force offset part to [d]word size *\/$/;"	e
EAH_MAKEBASE	nasm.h	/^    EAH_MAKEBASE = 1,           \/* try to make given reg the base *\/$/;"	e
EAH_NOHINT	nasm.h	/^    EAH_NOHINT = 0,             \/* no hint at all - our discretion *\/$/;"	e
EAH_NOTBASE	nasm.h	/^    EAH_NOTBASE = 2             \/* try _not_ to make reg the base *\/$/;"	e
ELF_MAX_SECTIONS	output/outelf.c	126;"	d	file:
ELF_SECTDATA	output/outelf.c	/^static struct ELF_SECTDATA {$/;"	s	file:
END_BLOCK	labels.c	37;"	d	file:
END_LIST	labels.c	36;"	d	file:
EOT_DB_NUMBER	nasm.h	/^    EOT_NOTHING, EOT_DB_STRING, EOT_DB_NUMBER$/;"	e
EOT_DB_STRING	nasm.h	/^    EOT_NOTHING, EOT_DB_STRING, EOT_DB_NUMBER$/;"	e
EOT_NOTHING	nasm.h	/^    EOT_NOTHING, EOT_DB_STRING, EOT_DB_NUMBER$/;"	e
ERR_DEBUG	nasm.h	76;"	d
ERR_FATAL	nasm.h	79;"	d
ERR_MASK	nasm.h	82;"	d
ERR_NOFILE	nasm.h	83;"	d
ERR_NONFATAL	nasm.h	78;"	d
ERR_PANIC	nasm.h	80;"	d
ERR_PASS1	nasm.h	85;"	d
ERR_USAGE	nasm.h	84;"	d
ERR_WARNING	nasm.h	77;"	d
ERR_WARN_GNUELF	nasm.h	99;"	d
ERR_WARN_MASK	nasm.h	91;"	d
ERR_WARN_MAX	nasm.h	100;"	d
ERR_WARN_MNP	nasm.h	94;"	d
ERR_WARN_MSR	nasm.h	95;"	d
ERR_WARN_NOV	nasm.h	98;"	d
ERR_WARN_OL	nasm.h	96;"	d
ERR_WARN_SHR	nasm.h	92;"	d
EXIM_LABEL_MAX	rdoff/rdoff.h	35;"	d
EXPDEF_FLAG_NODATA	output/outobj.c	587;"	d	file:
EXPDEF_FLAG_ORDINAL	output/outobj.c	585;"	d	file:
EXPDEF_FLAG_RESIDENT	output/outobj.c	586;"	d	file:
EXPDEF_MASK_PARMCNT	output/outobj.c	588;"	d	file:
EXPORT_SECTION_FLAGS	output/outcoff.c	555;"	d	file:
EXPORT_SECTION_NAME	output/outcoff.c	554;"	d	file:
EXPR_REG_END	nasm.h	288;"	d
EXPR_REG_START	nasm.h	287;"	d
EXPR_SEGBASE	nasm.h	292;"	d
EXPR_SIMPLE	nasm.h	290;"	d
EXPR_UNKNOWN	nasm.h	289;"	d
EXPR_WRT	nasm.h	291;"	d
EXTDEF	output/outobj.c	/^    EXTDEF = 0x8C,              \/* external definition *\/$/;"	e	enum:RecordID	file:
EXTERN_BIT	labels.c	48;"	d	file:
EXT_BLKSIZ	output/outieee.c	64;"	d	file:
EXT_BLKSIZ	output/outobj.c	474;"	d	file:
ExpDef	output/outobj.c	/^static struct ExpDef {$/;"	s	file:
ExportRec	output/outrdf.c	/^struct ExportRec {$/;"	s	file:
ExportRec	rdoff/rdoff.h	/^struct ExportRec {$/;"	s
Exports	output/outcoff.c	/^static STRING *Exports = NULL;$/;"	v	file:
ExtBack	output/outieee.c	/^static struct ExtBack {$/;"	s	file:
ExtBack	output/outobj.c	/^static struct ExtBack {$/;"	s	file:
External	output/outobj.c	/^static struct External {$/;"	s	file:
FALSE	float.c	18;"	d	file:
FALSE	nasm.h	22;"	d
FALSE	rdoff/rdlar.c	/^typedef enum { FALSE, TRUE } bool;$/;"	e	file:
FAR	nasm.h	376;"	d
FILENAME_MAX	nasm.h	32;"	d
FIXU32	output/outobj.c	/^    FIXU32 = 0x9D,              \/* 32-bit fixups (relocations) *\/$/;"	e	enum:RecordID	file:
FIXUPP	output/outobj.c	/^    FIXUPP = 0x9C,              \/* fixups (relocations) *\/$/;"	e	enum:RecordID	file:
FIX_08_HIGH	output/outobj.c	86;"	d	file:
FIX_08_LOW	output/outobj.c	82;"	d	file:
FIX_16_OFFSET	output/outobj.c	83;"	d	file:
FIX_16_SELECTOR	output/outobj.c	84;"	d	file:
FIX_32_OFFSET	output/outobj.c	87;"	d	file:
FIX_32_POINTER	output/outobj.c	85;"	d	file:
FIX_48_POINTER	output/outobj.c	88;"	d	file:
FL	doc/rdsrc.pl	/^    FL:for ($i=0; $i <= $#$ientry; $i++) {$/;"	l
FOLLOWS_DEFINED	output/outbin.c	68;"	d	file:
FPU0	nasm.h	401;"	d
FPUREG	nasm.h	400;"	d
FT_EXT	output/outieee.c	/^        FT_EXT = 3,$/;"	e	enum:ieeeFixupp::<anonymous>	file:
FT_EXTREL	output/outieee.c	/^        FT_EXTREL = 5,$/;"	e	enum:ieeeFixupp::<anonymous>	file:
FT_EXTSEG	output/outieee.c	/^        FT_EXTSEG = 7$/;"	e	enum:ieeeFixupp::<anonymous>	file:
FT_EXTWRT	output/outieee.c	/^        FT_EXTWRT = 6,$/;"	e	enum:ieeeFixupp::<anonymous>	file:
FT_OFS	output/outieee.c	/^        FT_OFS = 2,$/;"	e	enum:ieeeFixupp::<anonymous>	file:
FT_REL	output/outieee.c	/^        FT_REL = 1,$/;"	e	enum:ieeeFixupp::<anonymous>	file:
FT_SEG	output/outieee.c	/^        FT_SEG = 0,$/;"	e	enum:ieeeFixupp::<anonymous>	file:
FT_WRT	output/outieee.c	/^        FT_WRT = 4,$/;"	e	enum:ieeeFixupp::<anonymous>	file:
FileName	output/outieee.c	/^static struct FileName {$/;"	s	file:
FileName	output/outobj.c	/^static struct FileName {$/;"	s	file:
GET_CURR_OFFS	nasm.c	132;"	d	file:
GI_SWITCH	nasm.h	/^enum geninfo { GI_SWITCH };$/;"	e	enum:geninfo
GLOBAL_BIT	labels.c	47;"	d	file:
GLOBAL_PLACEHOLDER	labels.c	53;"	d	file:
GLOBAL_SYMBOL	labels.c	54;"	d	file:
GLOBAL_TEMP_BASE	output/outelf.c	119;"	d	file:
GROUP_MAX	output/outobj.c	472;"	d	file:
GRPDEF	output/outobj.c	/^    GRPDEF = 0x9A,              \/* group definition *\/$/;"	e	enum:RecordID	file:
GenericRec	rdoff/rdoff.h	/^struct GenericRec {$/;"	s
GetMemberOffset	preproc.c	4033;"	d	file:
GetMemberOffset	preproc.c	4049;"	d	file:
Group	output/outobj.c	/^static struct Group {$/;"	s	file:
HAVE_INTTYPES_H	config.h	8;"	d
HAVE_LIMITS_H	config.h	11;"	d
HAVE_MEMORY_H	config.h	14;"	d
HAVE_SNPRINTF	config.h	17;"	d
HAVE_STDINT_H	config.h	20;"	d
HAVE_STDLIB_H	config.h	23;"	d
HAVE_STRCSPN	config.h	26;"	d
HAVE_STRINGS_H	config.h	29;"	d
HAVE_STRING_H	config.h	32;"	d
HAVE_STRSPN	config.h	35;"	d
HAVE_SYS_STAT_H	config.h	38;"	d
HAVE_SYS_TYPES_H	config.h	41;"	d
HAVE_UNISTD_H	config.h	44;"	d
HAVE_VPRINTF	config.h	47;"	d
HAVE_VSNPRINTF	config.h	50;"	d
HEX	listing.c	35;"	d	file:
HUNKSIZE	output/outieee.c	63;"	d	file:
IDLEN_MAX	nasm.h	43;"	d
IF_186	insns.h	86;"	d
IF_286	insns.h	87;"	d
IF_386	insns.h	88;"	d
IF_3DNOW	insns.h	77;"	d
IF_486	insns.h	89;"	d
IF_8086	insns.h	85;"	d
IF_AMD	insns.h	97;"	d
IF_AR0	insns.h	67;"	d
IF_AR1	insns.h	68;"	d
IF_AR2	insns.h	69;"	d
IF_ARMASK	insns.h	70;"	d
IF_CYRIX	insns.h	96;"	d
IF_FPU	insns.h	75;"	d
IF_IA64	insns.h	95;"	d
IF_KATMAI	insns.h	92;"	d
IF_MMX	insns.h	76;"	d
IF_P6	insns.h	91;"	d
IF_PENT	insns.h	90;"	d
IF_PFMASK	insns.h	84;"	d
IF_PLEVEL	insns.h	82;"	d
IF_PMASK	insns.h	81;"	d
IF_PRESCOTT	insns.h	94;"	d
IF_PRIV	insns.h	71;"	d
IF_PROT	insns.h	73;"	d
IF_SB	insns.h	64;"	d
IF_SD	insns.h	66;"	d
IF_SM	insns.h	62;"	d
IF_SM2	insns.h	63;"	d
IF_SMM	insns.h	72;"	d
IF_SSE	insns.h	78;"	d
IF_SSE2	insns.h	79;"	d
IF_SSE3	insns.h	80;"	d
IF_SW	insns.h	65;"	d
IF_UNDOC	insns.h	74;"	d
IF_WILLAMETTE	insns.h	93;"	d
IMMEDIATE	nasm.h	391;"	d
INFO_FLAGS	output/outcoff.c	104;"	d	file:
INSN_MAX	disasm.h	12;"	d
INSTALL	Makefile	/^INSTALL		= \/usr\/bin\/install -c$/;"	m
INSTALL	doc/Makefile	/^INSTALL		= \/usr\/bin\/install -c$/;"	m
INSTALL	rdoff/Makefile	/^INSTALL		= \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA	= ${INSTALL} -m 644$/;"	m
INSTALL_DATA	doc/Makefile	/^INSTALL_DATA	= ${INSTALL} -m 644$/;"	m
INSTALL_DATA	rdoff/Makefile	/^INSTALL_DATA	= ${INSTALL} -m 644$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM	= ${INSTALL}$/;"	m
INSTALL_PROGRAM	doc/Makefile	/^INSTALL_PROGRAM	= ${INSTALL}$/;"	m
INSTALL_PROGRAM	rdoff/Makefile	/^INSTALL_PROGRAM	= ${INSTALL}$/;"	m
ITEMPLATE_END	insns.h	33;"	d
I_AAA	insnsi.h	/^	I_AAA,$/;"	e
I_AAD	insnsi.h	/^	I_AAD,$/;"	e
I_AAM	insnsi.h	/^	I_AAM,$/;"	e
I_AAS	insnsi.h	/^	I_AAS,$/;"	e
I_ADC	insnsi.h	/^	I_ADC,$/;"	e
I_ADD	insnsi.h	/^	I_ADD,$/;"	e
I_ADDPD	insnsi.h	/^	I_ADDPD,$/;"	e
I_ADDPS	insnsi.h	/^	I_ADDPS,$/;"	e
I_ADDSD	insnsi.h	/^	I_ADDSD,$/;"	e
I_ADDSS	insnsi.h	/^	I_ADDSS,$/;"	e
I_ADDSUBPD	insnsi.h	/^	I_ADDSUBPD,$/;"	e
I_ADDSUBPS	insnsi.h	/^	I_ADDSUBPS,$/;"	e
I_AND	insnsi.h	/^	I_AND,$/;"	e
I_ANDNPD	insnsi.h	/^	I_ANDNPD,$/;"	e
I_ANDNPS	insnsi.h	/^	I_ANDNPS,$/;"	e
I_ANDPD	insnsi.h	/^	I_ANDPD,$/;"	e
I_ANDPS	insnsi.h	/^	I_ANDPS,$/;"	e
I_ARPL	insnsi.h	/^	I_ARPL,$/;"	e
I_BOUND	insnsi.h	/^	I_BOUND,$/;"	e
I_BSF	insnsi.h	/^	I_BSF,$/;"	e
I_BSR	insnsi.h	/^	I_BSR,$/;"	e
I_BSWAP	insnsi.h	/^	I_BSWAP,$/;"	e
I_BT	insnsi.h	/^	I_BT,$/;"	e
I_BTC	insnsi.h	/^	I_BTC,$/;"	e
I_BTR	insnsi.h	/^	I_BTR,$/;"	e
I_BTS	insnsi.h	/^	I_BTS,$/;"	e
I_CALL	insnsi.h	/^	I_CALL,$/;"	e
I_CBW	insnsi.h	/^	I_CBW,$/;"	e
I_CDQ	insnsi.h	/^	I_CDQ,$/;"	e
I_CLC	insnsi.h	/^	I_CLC,$/;"	e
I_CLD	insnsi.h	/^	I_CLD,$/;"	e
I_CLFLUSH	insnsi.h	/^	I_CLFLUSH,$/;"	e
I_CLI	insnsi.h	/^	I_CLI,$/;"	e
I_CLTS	insnsi.h	/^	I_CLTS,$/;"	e
I_CMC	insnsi.h	/^	I_CMC,$/;"	e
I_CMOVcc	insnsi.h	/^	I_CMOVcc,$/;"	e
I_CMP	insnsi.h	/^	I_CMP,$/;"	e
I_CMPEQPD	insnsi.h	/^	I_CMPEQPD,$/;"	e
I_CMPEQPS	insnsi.h	/^	I_CMPEQPS,$/;"	e
I_CMPEQSD	insnsi.h	/^	I_CMPEQSD,$/;"	e
I_CMPEQSS	insnsi.h	/^	I_CMPEQSS,$/;"	e
I_CMPLEPD	insnsi.h	/^	I_CMPLEPD,$/;"	e
I_CMPLEPS	insnsi.h	/^	I_CMPLEPS,$/;"	e
I_CMPLESD	insnsi.h	/^	I_CMPLESD,$/;"	e
I_CMPLESS	insnsi.h	/^	I_CMPLESS,$/;"	e
I_CMPLTPD	insnsi.h	/^	I_CMPLTPD,$/;"	e
I_CMPLTPS	insnsi.h	/^	I_CMPLTPS,$/;"	e
I_CMPLTSD	insnsi.h	/^	I_CMPLTSD,$/;"	e
I_CMPLTSS	insnsi.h	/^	I_CMPLTSS,$/;"	e
I_CMPNEQPD	insnsi.h	/^	I_CMPNEQPD,$/;"	e
I_CMPNEQPS	insnsi.h	/^	I_CMPNEQPS,$/;"	e
I_CMPNEQSD	insnsi.h	/^	I_CMPNEQSD,$/;"	e
I_CMPNEQSS	insnsi.h	/^	I_CMPNEQSS,$/;"	e
I_CMPNLEPD	insnsi.h	/^	I_CMPNLEPD,$/;"	e
I_CMPNLEPS	insnsi.h	/^	I_CMPNLEPS,$/;"	e
I_CMPNLESD	insnsi.h	/^	I_CMPNLESD,$/;"	e
I_CMPNLESS	insnsi.h	/^	I_CMPNLESS,$/;"	e
I_CMPNLTPD	insnsi.h	/^	I_CMPNLTPD,$/;"	e
I_CMPNLTPS	insnsi.h	/^	I_CMPNLTPS,$/;"	e
I_CMPNLTSD	insnsi.h	/^	I_CMPNLTSD,$/;"	e
I_CMPNLTSS	insnsi.h	/^	I_CMPNLTSS,$/;"	e
I_CMPORDPD	insnsi.h	/^	I_CMPORDPD,$/;"	e
I_CMPORDPS	insnsi.h	/^	I_CMPORDPS,$/;"	e
I_CMPORDSD	insnsi.h	/^	I_CMPORDSD,$/;"	e
I_CMPORDSS	insnsi.h	/^	I_CMPORDSS,$/;"	e
I_CMPPD	insnsi.h	/^	I_CMPPD,$/;"	e
I_CMPPS	insnsi.h	/^	I_CMPPS,$/;"	e
I_CMPSB	insnsi.h	/^	I_CMPSB,$/;"	e
I_CMPSD	insnsi.h	/^	I_CMPSD,$/;"	e
I_CMPSS	insnsi.h	/^	I_CMPSS,$/;"	e
I_CMPSW	insnsi.h	/^	I_CMPSW,$/;"	e
I_CMPUNORDPD	insnsi.h	/^	I_CMPUNORDPD,$/;"	e
I_CMPUNORDPS	insnsi.h	/^	I_CMPUNORDPS,$/;"	e
I_CMPUNORDSD	insnsi.h	/^	I_CMPUNORDSD,$/;"	e
I_CMPUNORDSS	insnsi.h	/^	I_CMPUNORDSS,$/;"	e
I_CMPXCHG	insnsi.h	/^	I_CMPXCHG,$/;"	e
I_CMPXCHG486	insnsi.h	/^	I_CMPXCHG486,$/;"	e
I_CMPXCHG8B	insnsi.h	/^	I_CMPXCHG8B,$/;"	e
I_COMISD	insnsi.h	/^	I_COMISD,$/;"	e
I_COMISS	insnsi.h	/^	I_COMISS,$/;"	e
I_CPUID	insnsi.h	/^	I_CPUID,$/;"	e
I_CVTDQ2PD	insnsi.h	/^	I_CVTDQ2PD,$/;"	e
I_CVTDQ2PS	insnsi.h	/^	I_CVTDQ2PS,$/;"	e
I_CVTPD2DQ	insnsi.h	/^	I_CVTPD2DQ,$/;"	e
I_CVTPD2PI	insnsi.h	/^	I_CVTPD2PI,$/;"	e
I_CVTPD2PS	insnsi.h	/^	I_CVTPD2PS,$/;"	e
I_CVTPI2PD	insnsi.h	/^	I_CVTPI2PD,$/;"	e
I_CVTPI2PS	insnsi.h	/^	I_CVTPI2PS,$/;"	e
I_CVTPS2DQ	insnsi.h	/^	I_CVTPS2DQ,$/;"	e
I_CVTPS2PD	insnsi.h	/^	I_CVTPS2PD,$/;"	e
I_CVTPS2PI	insnsi.h	/^	I_CVTPS2PI,$/;"	e
I_CVTSD2SI	insnsi.h	/^	I_CVTSD2SI,$/;"	e
I_CVTSD2SS	insnsi.h	/^	I_CVTSD2SS,$/;"	e
I_CVTSI2SD	insnsi.h	/^	I_CVTSI2SD,$/;"	e
I_CVTSI2SS	insnsi.h	/^	I_CVTSI2SS,$/;"	e
I_CVTSS2SD	insnsi.h	/^	I_CVTSS2SD,$/;"	e
I_CVTSS2SI	insnsi.h	/^	I_CVTSS2SI,$/;"	e
I_CVTTPD2DQ	insnsi.h	/^	I_CVTTPD2DQ,$/;"	e
I_CVTTPD2PI	insnsi.h	/^	I_CVTTPD2PI,$/;"	e
I_CVTTPS2DQ	insnsi.h	/^	I_CVTTPS2DQ,$/;"	e
I_CVTTPS2PI	insnsi.h	/^	I_CVTTPS2PI,$/;"	e
I_CVTTSD2SI	insnsi.h	/^	I_CVTTSD2SI,$/;"	e
I_CVTTSS2SI	insnsi.h	/^	I_CVTTSS2SI,$/;"	e
I_CWD	insnsi.h	/^	I_CWD,$/;"	e
I_CWDE	insnsi.h	/^	I_CWDE,$/;"	e
I_DAA	insnsi.h	/^	I_DAA,$/;"	e
I_DAS	insnsi.h	/^	I_DAS,$/;"	e
I_DB	insnsi.h	/^	I_DB,$/;"	e
I_DD	insnsi.h	/^	I_DD,$/;"	e
I_DEC	insnsi.h	/^	I_DEC,$/;"	e
I_DIV	insnsi.h	/^	I_DIV,$/;"	e
I_DIVPD	insnsi.h	/^	I_DIVPD,$/;"	e
I_DIVPS	insnsi.h	/^	I_DIVPS,$/;"	e
I_DIVSD	insnsi.h	/^	I_DIVSD,$/;"	e
I_DIVSS	insnsi.h	/^	I_DIVSS,$/;"	e
I_DQ	insnsi.h	/^	I_DQ,$/;"	e
I_DT	insnsi.h	/^	I_DT,$/;"	e
I_DW	insnsi.h	/^	I_DW,$/;"	e
I_EMMS	insnsi.h	/^	I_EMMS,$/;"	e
I_ENTER	insnsi.h	/^	I_ENTER,$/;"	e
I_EQU	insnsi.h	/^	I_EQU,$/;"	e
I_F2XM1	insnsi.h	/^	I_F2XM1,$/;"	e
I_FABS	insnsi.h	/^	I_FABS,$/;"	e
I_FADD	insnsi.h	/^	I_FADD,$/;"	e
I_FADDP	insnsi.h	/^	I_FADDP,$/;"	e
I_FBLD	insnsi.h	/^	I_FBLD,$/;"	e
I_FBSTP	insnsi.h	/^	I_FBSTP,$/;"	e
I_FCHS	insnsi.h	/^	I_FCHS,$/;"	e
I_FCLEX	insnsi.h	/^	I_FCLEX,$/;"	e
I_FCMOVB	insnsi.h	/^	I_FCMOVB,$/;"	e
I_FCMOVBE	insnsi.h	/^	I_FCMOVBE,$/;"	e
I_FCMOVE	insnsi.h	/^	I_FCMOVE,$/;"	e
I_FCMOVNB	insnsi.h	/^	I_FCMOVNB,$/;"	e
I_FCMOVNBE	insnsi.h	/^	I_FCMOVNBE,$/;"	e
I_FCMOVNE	insnsi.h	/^	I_FCMOVNE,$/;"	e
I_FCMOVNU	insnsi.h	/^	I_FCMOVNU,$/;"	e
I_FCMOVU	insnsi.h	/^	I_FCMOVU,$/;"	e
I_FCOM	insnsi.h	/^	I_FCOM,$/;"	e
I_FCOMI	insnsi.h	/^	I_FCOMI,$/;"	e
I_FCOMIP	insnsi.h	/^	I_FCOMIP,$/;"	e
I_FCOMP	insnsi.h	/^	I_FCOMP,$/;"	e
I_FCOMPP	insnsi.h	/^	I_FCOMPP,$/;"	e
I_FCOS	insnsi.h	/^	I_FCOS,$/;"	e
I_FDECSTP	insnsi.h	/^	I_FDECSTP,$/;"	e
I_FDISI	insnsi.h	/^	I_FDISI,$/;"	e
I_FDIV	insnsi.h	/^	I_FDIV,$/;"	e
I_FDIVP	insnsi.h	/^	I_FDIVP,$/;"	e
I_FDIVR	insnsi.h	/^	I_FDIVR,$/;"	e
I_FDIVRP	insnsi.h	/^	I_FDIVRP,$/;"	e
I_FEMMS	insnsi.h	/^	I_FEMMS,$/;"	e
I_FENI	insnsi.h	/^	I_FENI,$/;"	e
I_FFREE	insnsi.h	/^	I_FFREE,$/;"	e
I_FFREEP	insnsi.h	/^	I_FFREEP,$/;"	e
I_FIADD	insnsi.h	/^	I_FIADD,$/;"	e
I_FICOM	insnsi.h	/^	I_FICOM,$/;"	e
I_FICOMP	insnsi.h	/^	I_FICOMP,$/;"	e
I_FIDIV	insnsi.h	/^	I_FIDIV,$/;"	e
I_FIDIVR	insnsi.h	/^	I_FIDIVR,$/;"	e
I_FILD	insnsi.h	/^	I_FILD,$/;"	e
I_FIMUL	insnsi.h	/^	I_FIMUL,$/;"	e
I_FINCSTP	insnsi.h	/^	I_FINCSTP,$/;"	e
I_FINIT	insnsi.h	/^	I_FINIT,$/;"	e
I_FIST	insnsi.h	/^	I_FIST,$/;"	e
I_FISTP	insnsi.h	/^	I_FISTP,$/;"	e
I_FISTTP	insnsi.h	/^	I_FISTTP,$/;"	e
I_FISUB	insnsi.h	/^	I_FISUB,$/;"	e
I_FISUBR	insnsi.h	/^	I_FISUBR,$/;"	e
I_FLD	insnsi.h	/^	I_FLD,$/;"	e
I_FLD1	insnsi.h	/^	I_FLD1,$/;"	e
I_FLDCW	insnsi.h	/^	I_FLDCW,$/;"	e
I_FLDENV	insnsi.h	/^	I_FLDENV,$/;"	e
I_FLDL2E	insnsi.h	/^	I_FLDL2E,$/;"	e
I_FLDL2T	insnsi.h	/^	I_FLDL2T,$/;"	e
I_FLDLG2	insnsi.h	/^	I_FLDLG2,$/;"	e
I_FLDLN2	insnsi.h	/^	I_FLDLN2,$/;"	e
I_FLDPI	insnsi.h	/^	I_FLDPI,$/;"	e
I_FLDZ	insnsi.h	/^	I_FLDZ,$/;"	e
I_FMUL	insnsi.h	/^	I_FMUL,$/;"	e
I_FMULP	insnsi.h	/^	I_FMULP,$/;"	e
I_FNCLEX	insnsi.h	/^	I_FNCLEX,$/;"	e
I_FNDISI	insnsi.h	/^	I_FNDISI,$/;"	e
I_FNENI	insnsi.h	/^	I_FNENI,$/;"	e
I_FNINIT	insnsi.h	/^	I_FNINIT,$/;"	e
I_FNOP	insnsi.h	/^	I_FNOP,$/;"	e
I_FNSAVE	insnsi.h	/^	I_FNSAVE,$/;"	e
I_FNSTCW	insnsi.h	/^	I_FNSTCW,$/;"	e
I_FNSTENV	insnsi.h	/^	I_FNSTENV,$/;"	e
I_FNSTSW	insnsi.h	/^	I_FNSTSW,$/;"	e
I_FPATAN	insnsi.h	/^	I_FPATAN,$/;"	e
I_FPREM	insnsi.h	/^	I_FPREM,$/;"	e
I_FPREM1	insnsi.h	/^	I_FPREM1,$/;"	e
I_FPTAN	insnsi.h	/^	I_FPTAN,$/;"	e
I_FRNDINT	insnsi.h	/^	I_FRNDINT,$/;"	e
I_FRSTOR	insnsi.h	/^	I_FRSTOR,$/;"	e
I_FSAVE	insnsi.h	/^	I_FSAVE,$/;"	e
I_FSCALE	insnsi.h	/^	I_FSCALE,$/;"	e
I_FSETPM	insnsi.h	/^	I_FSETPM,$/;"	e
I_FSIN	insnsi.h	/^	I_FSIN,$/;"	e
I_FSINCOS	insnsi.h	/^	I_FSINCOS,$/;"	e
I_FSQRT	insnsi.h	/^	I_FSQRT,$/;"	e
I_FST	insnsi.h	/^	I_FST,$/;"	e
I_FSTCW	insnsi.h	/^	I_FSTCW,$/;"	e
I_FSTENV	insnsi.h	/^	I_FSTENV,$/;"	e
I_FSTP	insnsi.h	/^	I_FSTP,$/;"	e
I_FSTSW	insnsi.h	/^	I_FSTSW,$/;"	e
I_FSUB	insnsi.h	/^	I_FSUB,$/;"	e
I_FSUBP	insnsi.h	/^	I_FSUBP,$/;"	e
I_FSUBR	insnsi.h	/^	I_FSUBR,$/;"	e
I_FSUBRP	insnsi.h	/^	I_FSUBRP,$/;"	e
I_FTST	insnsi.h	/^	I_FTST,$/;"	e
I_FUCOM	insnsi.h	/^	I_FUCOM,$/;"	e
I_FUCOMI	insnsi.h	/^	I_FUCOMI,$/;"	e
I_FUCOMIP	insnsi.h	/^	I_FUCOMIP,$/;"	e
I_FUCOMP	insnsi.h	/^	I_FUCOMP,$/;"	e
I_FUCOMPP	insnsi.h	/^	I_FUCOMPP,$/;"	e
I_FWAIT	insnsi.h	/^	I_FWAIT,$/;"	e
I_FXAM	insnsi.h	/^	I_FXAM,$/;"	e
I_FXCH	insnsi.h	/^	I_FXCH,$/;"	e
I_FXRSTOR	insnsi.h	/^	I_FXRSTOR,$/;"	e
I_FXSAVE	insnsi.h	/^	I_FXSAVE,$/;"	e
I_FXTRACT	insnsi.h	/^	I_FXTRACT,$/;"	e
I_FYL2X	insnsi.h	/^	I_FYL2X,$/;"	e
I_FYL2XP1	insnsi.h	/^	I_FYL2XP1,$/;"	e
I_HADDPD	insnsi.h	/^	I_HADDPD,$/;"	e
I_HADDPS	insnsi.h	/^	I_HADDPS,$/;"	e
I_HLT	insnsi.h	/^	I_HLT,$/;"	e
I_HSUBPD	insnsi.h	/^	I_HSUBPD,$/;"	e
I_HSUBPS	insnsi.h	/^	I_HSUBPS,$/;"	e
I_IBTS	insnsi.h	/^	I_IBTS,$/;"	e
I_ICEBP	insnsi.h	/^	I_ICEBP,$/;"	e
I_IDIV	insnsi.h	/^	I_IDIV,$/;"	e
I_IMUL	insnsi.h	/^	I_IMUL,$/;"	e
I_IN	insnsi.h	/^	I_IN,$/;"	e
I_INC	insnsi.h	/^	I_INC,$/;"	e
I_INCBIN	insnsi.h	/^	I_INCBIN,$/;"	e
I_INSB	insnsi.h	/^	I_INSB,$/;"	e
I_INSD	insnsi.h	/^	I_INSD,$/;"	e
I_INSW	insnsi.h	/^	I_INSW,$/;"	e
I_INT	insnsi.h	/^	I_INT,$/;"	e
I_INT01	insnsi.h	/^	I_INT01,$/;"	e
I_INT03	insnsi.h	/^	I_INT03,$/;"	e
I_INT1	insnsi.h	/^	I_INT1,$/;"	e
I_INT3	insnsi.h	/^	I_INT3,$/;"	e
I_INTO	insnsi.h	/^	I_INTO,$/;"	e
I_INVD	insnsi.h	/^	I_INVD,$/;"	e
I_INVLPG	insnsi.h	/^	I_INVLPG,$/;"	e
I_IRET	insnsi.h	/^	I_IRET,$/;"	e
I_IRETD	insnsi.h	/^	I_IRETD,$/;"	e
I_IRETW	insnsi.h	/^	I_IRETW,$/;"	e
I_JCXZ	insnsi.h	/^	I_JCXZ,$/;"	e
I_JECXZ	insnsi.h	/^	I_JECXZ,$/;"	e
I_JMP	insnsi.h	/^	I_JMP,$/;"	e
I_JMPE	insnsi.h	/^	I_JMPE,$/;"	e
I_Jcc	insnsi.h	/^	I_Jcc,$/;"	e
I_LAHF	insnsi.h	/^	I_LAHF,$/;"	e
I_LAR	insnsi.h	/^	I_LAR,$/;"	e
I_LDDQU	insnsi.h	/^	I_LDDQU,$/;"	e
I_LDMXCSR	insnsi.h	/^	I_LDMXCSR,$/;"	e
I_LDS	insnsi.h	/^	I_LDS,$/;"	e
I_LEA	insnsi.h	/^	I_LEA,$/;"	e
I_LEAVE	insnsi.h	/^	I_LEAVE,$/;"	e
I_LES	insnsi.h	/^	I_LES,$/;"	e
I_LFENCE	insnsi.h	/^	I_LFENCE,$/;"	e
I_LFS	insnsi.h	/^	I_LFS,$/;"	e
I_LGDT	insnsi.h	/^	I_LGDT,$/;"	e
I_LGS	insnsi.h	/^	I_LGS,$/;"	e
I_LIDT	insnsi.h	/^	I_LIDT,$/;"	e
I_LLDT	insnsi.h	/^	I_LLDT,$/;"	e
I_LMSW	insnsi.h	/^	I_LMSW,$/;"	e
I_LOADALL	insnsi.h	/^	I_LOADALL,$/;"	e
I_LOADALL286	insnsi.h	/^	I_LOADALL286,$/;"	e
I_LODSB	insnsi.h	/^	I_LODSB,$/;"	e
I_LODSD	insnsi.h	/^	I_LODSD,$/;"	e
I_LODSW	insnsi.h	/^	I_LODSW,$/;"	e
I_LOOP	insnsi.h	/^	I_LOOP,$/;"	e
I_LOOPE	insnsi.h	/^	I_LOOPE,$/;"	e
I_LOOPNE	insnsi.h	/^	I_LOOPNE,$/;"	e
I_LOOPNZ	insnsi.h	/^	I_LOOPNZ,$/;"	e
I_LOOPZ	insnsi.h	/^	I_LOOPZ,$/;"	e
I_LSL	insnsi.h	/^	I_LSL,$/;"	e
I_LSS	insnsi.h	/^	I_LSS,$/;"	e
I_LTR	insnsi.h	/^	I_LTR,$/;"	e
I_MASKMOVDQU	insnsi.h	/^	I_MASKMOVDQU,$/;"	e
I_MASKMOVQ	insnsi.h	/^	I_MASKMOVQ,$/;"	e
I_MAXPD	insnsi.h	/^	I_MAXPD,$/;"	e
I_MAXPS	insnsi.h	/^	I_MAXPS,$/;"	e
I_MAXSD	insnsi.h	/^	I_MAXSD,$/;"	e
I_MAXSS	insnsi.h	/^	I_MAXSS,$/;"	e
I_MFENCE	insnsi.h	/^	I_MFENCE,$/;"	e
I_MINPD	insnsi.h	/^	I_MINPD,$/;"	e
I_MINPS	insnsi.h	/^	I_MINPS,$/;"	e
I_MINSD	insnsi.h	/^	I_MINSD,$/;"	e
I_MINSS	insnsi.h	/^	I_MINSS,$/;"	e
I_MONITOR	insnsi.h	/^	I_MONITOR,$/;"	e
I_MOV	insnsi.h	/^	I_MOV,$/;"	e
I_MOVAPD	insnsi.h	/^	I_MOVAPD,$/;"	e
I_MOVAPS	insnsi.h	/^	I_MOVAPS,$/;"	e
I_MOVD	insnsi.h	/^	I_MOVD,$/;"	e
I_MOVDDUP	insnsi.h	/^	I_MOVDDUP,$/;"	e
I_MOVDQ2Q	insnsi.h	/^	I_MOVDQ2Q,$/;"	e
I_MOVDQA	insnsi.h	/^	I_MOVDQA,$/;"	e
I_MOVDQU	insnsi.h	/^	I_MOVDQU,$/;"	e
I_MOVHLPS	insnsi.h	/^	I_MOVHLPS,$/;"	e
I_MOVHPD	insnsi.h	/^	I_MOVHPD,$/;"	e
I_MOVHPS	insnsi.h	/^	I_MOVHPS,$/;"	e
I_MOVLHPS	insnsi.h	/^	I_MOVLHPS,$/;"	e
I_MOVLPD	insnsi.h	/^	I_MOVLPD,$/;"	e
I_MOVLPS	insnsi.h	/^	I_MOVLPS,$/;"	e
I_MOVMSKPD	insnsi.h	/^	I_MOVMSKPD,$/;"	e
I_MOVMSKPS	insnsi.h	/^	I_MOVMSKPS,$/;"	e
I_MOVNTDQ	insnsi.h	/^	I_MOVNTDQ,$/;"	e
I_MOVNTI	insnsi.h	/^	I_MOVNTI,$/;"	e
I_MOVNTPD	insnsi.h	/^	I_MOVNTPD,$/;"	e
I_MOVNTPS	insnsi.h	/^	I_MOVNTPS,$/;"	e
I_MOVNTQ	insnsi.h	/^	I_MOVNTQ,$/;"	e
I_MOVQ	insnsi.h	/^	I_MOVQ,$/;"	e
I_MOVQ2DQ	insnsi.h	/^	I_MOVQ2DQ,$/;"	e
I_MOVSB	insnsi.h	/^	I_MOVSB,$/;"	e
I_MOVSD	insnsi.h	/^	I_MOVSD,$/;"	e
I_MOVSHDUP	insnsi.h	/^	I_MOVSHDUP,$/;"	e
I_MOVSLDUP	insnsi.h	/^	I_MOVSLDUP,$/;"	e
I_MOVSS	insnsi.h	/^	I_MOVSS,$/;"	e
I_MOVSW	insnsi.h	/^	I_MOVSW,$/;"	e
I_MOVSX	insnsi.h	/^	I_MOVSX,$/;"	e
I_MOVUPD	insnsi.h	/^	I_MOVUPD,$/;"	e
I_MOVUPS	insnsi.h	/^	I_MOVUPS,$/;"	e
I_MOVZX	insnsi.h	/^	I_MOVZX,$/;"	e
I_MUL	insnsi.h	/^	I_MUL,$/;"	e
I_MULPD	insnsi.h	/^	I_MULPD,$/;"	e
I_MULPS	insnsi.h	/^	I_MULPS,$/;"	e
I_MULSD	insnsi.h	/^	I_MULSD,$/;"	e
I_MULSS	insnsi.h	/^	I_MULSS,$/;"	e
I_MWAIT	insnsi.h	/^	I_MWAIT,$/;"	e
I_NEG	insnsi.h	/^	I_NEG,$/;"	e
I_NOP	insnsi.h	/^	I_NOP,$/;"	e
I_NOT	insnsi.h	/^	I_NOT,$/;"	e
I_OR	insnsi.h	/^	I_OR,$/;"	e
I_ORPD	insnsi.h	/^	I_ORPD,$/;"	e
I_ORPS	insnsi.h	/^	I_ORPS,$/;"	e
I_OUT	insnsi.h	/^	I_OUT,$/;"	e
I_OUTSB	insnsi.h	/^	I_OUTSB,$/;"	e
I_OUTSD	insnsi.h	/^	I_OUTSD,$/;"	e
I_OUTSW	insnsi.h	/^	I_OUTSW,$/;"	e
I_PACKSSDW	insnsi.h	/^	I_PACKSSDW,$/;"	e
I_PACKSSWB	insnsi.h	/^	I_PACKSSWB,$/;"	e
I_PACKUSWB	insnsi.h	/^	I_PACKUSWB,$/;"	e
I_PADDB	insnsi.h	/^	I_PADDB,$/;"	e
I_PADDD	insnsi.h	/^	I_PADDD,$/;"	e
I_PADDQ	insnsi.h	/^	I_PADDQ,$/;"	e
I_PADDSB	insnsi.h	/^	I_PADDSB,$/;"	e
I_PADDSIW	insnsi.h	/^	I_PADDSIW,$/;"	e
I_PADDSW	insnsi.h	/^	I_PADDSW,$/;"	e
I_PADDUSB	insnsi.h	/^	I_PADDUSB,$/;"	e
I_PADDUSW	insnsi.h	/^	I_PADDUSW,$/;"	e
I_PADDW	insnsi.h	/^	I_PADDW,$/;"	e
I_PAND	insnsi.h	/^	I_PAND,$/;"	e
I_PANDN	insnsi.h	/^	I_PANDN,$/;"	e
I_PAUSE	insnsi.h	/^	I_PAUSE,$/;"	e
I_PAVEB	insnsi.h	/^	I_PAVEB,$/;"	e
I_PAVGB	insnsi.h	/^	I_PAVGB,$/;"	e
I_PAVGUSB	insnsi.h	/^	I_PAVGUSB,$/;"	e
I_PAVGW	insnsi.h	/^	I_PAVGW,$/;"	e
I_PCMPEQB	insnsi.h	/^	I_PCMPEQB,$/;"	e
I_PCMPEQD	insnsi.h	/^	I_PCMPEQD,$/;"	e
I_PCMPEQW	insnsi.h	/^	I_PCMPEQW,$/;"	e
I_PCMPGTB	insnsi.h	/^	I_PCMPGTB,$/;"	e
I_PCMPGTD	insnsi.h	/^	I_PCMPGTD,$/;"	e
I_PCMPGTW	insnsi.h	/^	I_PCMPGTW,$/;"	e
I_PDISTIB	insnsi.h	/^	I_PDISTIB,$/;"	e
I_PEXTRW	insnsi.h	/^	I_PEXTRW,$/;"	e
I_PF2ID	insnsi.h	/^	I_PF2ID,$/;"	e
I_PF2IW	insnsi.h	/^	I_PF2IW,$/;"	e
I_PFACC	insnsi.h	/^	I_PFACC,$/;"	e
I_PFADD	insnsi.h	/^	I_PFADD,$/;"	e
I_PFCMPEQ	insnsi.h	/^	I_PFCMPEQ,$/;"	e
I_PFCMPGE	insnsi.h	/^	I_PFCMPGE,$/;"	e
I_PFCMPGT	insnsi.h	/^	I_PFCMPGT,$/;"	e
I_PFMAX	insnsi.h	/^	I_PFMAX,$/;"	e
I_PFMIN	insnsi.h	/^	I_PFMIN,$/;"	e
I_PFMUL	insnsi.h	/^	I_PFMUL,$/;"	e
I_PFNACC	insnsi.h	/^	I_PFNACC,$/;"	e
I_PFPNACC	insnsi.h	/^	I_PFPNACC,$/;"	e
I_PFRCP	insnsi.h	/^	I_PFRCP,$/;"	e
I_PFRCPIT1	insnsi.h	/^	I_PFRCPIT1,$/;"	e
I_PFRCPIT2	insnsi.h	/^	I_PFRCPIT2,$/;"	e
I_PFRSQIT1	insnsi.h	/^	I_PFRSQIT1,$/;"	e
I_PFRSQRT	insnsi.h	/^	I_PFRSQRT,$/;"	e
I_PFSUB	insnsi.h	/^	I_PFSUB,$/;"	e
I_PFSUBR	insnsi.h	/^	I_PFSUBR,$/;"	e
I_PI2FD	insnsi.h	/^	I_PI2FD,$/;"	e
I_PI2FW	insnsi.h	/^	I_PI2FW,$/;"	e
I_PINSRW	insnsi.h	/^	I_PINSRW,$/;"	e
I_PMACHRIW	insnsi.h	/^	I_PMACHRIW,$/;"	e
I_PMADDWD	insnsi.h	/^	I_PMADDWD,$/;"	e
I_PMAGW	insnsi.h	/^	I_PMAGW,$/;"	e
I_PMAXSW	insnsi.h	/^	I_PMAXSW,$/;"	e
I_PMAXUB	insnsi.h	/^	I_PMAXUB,$/;"	e
I_PMINSW	insnsi.h	/^	I_PMINSW,$/;"	e
I_PMINUB	insnsi.h	/^	I_PMINUB,$/;"	e
I_PMOVMSKB	insnsi.h	/^	I_PMOVMSKB,$/;"	e
I_PMULHRIW	insnsi.h	/^	I_PMULHRIW,$/;"	e
I_PMULHRWA	insnsi.h	/^	I_PMULHRWA,$/;"	e
I_PMULHRWC	insnsi.h	/^	I_PMULHRWC,$/;"	e
I_PMULHUW	insnsi.h	/^	I_PMULHUW,$/;"	e
I_PMULHW	insnsi.h	/^	I_PMULHW,$/;"	e
I_PMULLW	insnsi.h	/^	I_PMULLW,$/;"	e
I_PMULUDQ	insnsi.h	/^	I_PMULUDQ,$/;"	e
I_PMVGEZB	insnsi.h	/^	I_PMVGEZB,$/;"	e
I_PMVLZB	insnsi.h	/^	I_PMVLZB,$/;"	e
I_PMVNZB	insnsi.h	/^	I_PMVNZB,$/;"	e
I_PMVZB	insnsi.h	/^	I_PMVZB,$/;"	e
I_POP	insnsi.h	/^	I_POP,$/;"	e
I_POPA	insnsi.h	/^	I_POPA,$/;"	e
I_POPAD	insnsi.h	/^	I_POPAD,$/;"	e
I_POPAW	insnsi.h	/^	I_POPAW,$/;"	e
I_POPF	insnsi.h	/^	I_POPF,$/;"	e
I_POPFD	insnsi.h	/^	I_POPFD,$/;"	e
I_POPFW	insnsi.h	/^	I_POPFW,$/;"	e
I_POR	insnsi.h	/^	I_POR,$/;"	e
I_PREFETCH	insnsi.h	/^	I_PREFETCH,$/;"	e
I_PREFETCHNTA	insnsi.h	/^	I_PREFETCHNTA,$/;"	e
I_PREFETCHT0	insnsi.h	/^	I_PREFETCHT0,$/;"	e
I_PREFETCHT1	insnsi.h	/^	I_PREFETCHT1,$/;"	e
I_PREFETCHT2	insnsi.h	/^	I_PREFETCHT2,$/;"	e
I_PREFETCHW	insnsi.h	/^	I_PREFETCHW,$/;"	e
I_PSADBW	insnsi.h	/^	I_PSADBW,$/;"	e
I_PSHUFD	insnsi.h	/^	I_PSHUFD,$/;"	e
I_PSHUFHW	insnsi.h	/^	I_PSHUFHW,$/;"	e
I_PSHUFLW	insnsi.h	/^	I_PSHUFLW,$/;"	e
I_PSHUFW	insnsi.h	/^	I_PSHUFW,$/;"	e
I_PSLLD	insnsi.h	/^	I_PSLLD,$/;"	e
I_PSLLDQ	insnsi.h	/^	I_PSLLDQ,$/;"	e
I_PSLLQ	insnsi.h	/^	I_PSLLQ,$/;"	e
I_PSLLW	insnsi.h	/^	I_PSLLW,$/;"	e
I_PSRAD	insnsi.h	/^	I_PSRAD,$/;"	e
I_PSRAW	insnsi.h	/^	I_PSRAW,$/;"	e
I_PSRLD	insnsi.h	/^	I_PSRLD,$/;"	e
I_PSRLDQ	insnsi.h	/^	I_PSRLDQ,$/;"	e
I_PSRLQ	insnsi.h	/^	I_PSRLQ,$/;"	e
I_PSRLW	insnsi.h	/^	I_PSRLW,$/;"	e
I_PSUBB	insnsi.h	/^	I_PSUBB,$/;"	e
I_PSUBD	insnsi.h	/^	I_PSUBD,$/;"	e
I_PSUBQ	insnsi.h	/^	I_PSUBQ,$/;"	e
I_PSUBSB	insnsi.h	/^	I_PSUBSB,$/;"	e
I_PSUBSIW	insnsi.h	/^	I_PSUBSIW,$/;"	e
I_PSUBSW	insnsi.h	/^	I_PSUBSW,$/;"	e
I_PSUBUSB	insnsi.h	/^	I_PSUBUSB,$/;"	e
I_PSUBUSW	insnsi.h	/^	I_PSUBUSW,$/;"	e
I_PSUBW	insnsi.h	/^	I_PSUBW,$/;"	e
I_PSWAPD	insnsi.h	/^	I_PSWAPD,$/;"	e
I_PUNPCKHBW	insnsi.h	/^	I_PUNPCKHBW,$/;"	e
I_PUNPCKHDQ	insnsi.h	/^	I_PUNPCKHDQ,$/;"	e
I_PUNPCKHQDQ	insnsi.h	/^	I_PUNPCKHQDQ,$/;"	e
I_PUNPCKHWD	insnsi.h	/^	I_PUNPCKHWD,$/;"	e
I_PUNPCKLBW	insnsi.h	/^	I_PUNPCKLBW,$/;"	e
I_PUNPCKLDQ	insnsi.h	/^	I_PUNPCKLDQ,$/;"	e
I_PUNPCKLQDQ	insnsi.h	/^	I_PUNPCKLQDQ,$/;"	e
I_PUNPCKLWD	insnsi.h	/^	I_PUNPCKLWD,$/;"	e
I_PUSH	insnsi.h	/^	I_PUSH,$/;"	e
I_PUSHA	insnsi.h	/^	I_PUSHA,$/;"	e
I_PUSHAD	insnsi.h	/^	I_PUSHAD,$/;"	e
I_PUSHAW	insnsi.h	/^	I_PUSHAW,$/;"	e
I_PUSHF	insnsi.h	/^	I_PUSHF,$/;"	e
I_PUSHFD	insnsi.h	/^	I_PUSHFD,$/;"	e
I_PUSHFW	insnsi.h	/^	I_PUSHFW,$/;"	e
I_PXOR	insnsi.h	/^	I_PXOR,$/;"	e
I_RCL	insnsi.h	/^	I_RCL,$/;"	e
I_RCPPS	insnsi.h	/^	I_RCPPS,$/;"	e
I_RCPSS	insnsi.h	/^	I_RCPSS,$/;"	e
I_RCR	insnsi.h	/^	I_RCR,$/;"	e
I_RDMSR	insnsi.h	/^	I_RDMSR,$/;"	e
I_RDPMC	insnsi.h	/^	I_RDPMC,$/;"	e
I_RDSHR	insnsi.h	/^	I_RDSHR,$/;"	e
I_RDTSC	insnsi.h	/^	I_RDTSC,$/;"	e
I_RESB	insnsi.h	/^	I_RESB,$/;"	e
I_RESD	insnsi.h	/^	I_RESD,$/;"	e
I_RESQ	insnsi.h	/^	I_RESQ,$/;"	e
I_REST	insnsi.h	/^	I_REST,$/;"	e
I_RESW	insnsi.h	/^	I_RESW,$/;"	e
I_RET	insnsi.h	/^	I_RET,$/;"	e
I_RETF	insnsi.h	/^	I_RETF,$/;"	e
I_RETN	insnsi.h	/^	I_RETN,$/;"	e
I_ROL	insnsi.h	/^	I_ROL,$/;"	e
I_ROR	insnsi.h	/^	I_ROR,$/;"	e
I_RSDC	insnsi.h	/^	I_RSDC,$/;"	e
I_RSLDT	insnsi.h	/^	I_RSLDT,$/;"	e
I_RSM	insnsi.h	/^	I_RSM,$/;"	e
I_RSQRTPS	insnsi.h	/^	I_RSQRTPS,$/;"	e
I_RSQRTSS	insnsi.h	/^	I_RSQRTSS,$/;"	e
I_RSTS	insnsi.h	/^	I_RSTS,$/;"	e
I_SAHF	insnsi.h	/^	I_SAHF,$/;"	e
I_SAL	insnsi.h	/^	I_SAL,$/;"	e
I_SALC	insnsi.h	/^	I_SALC,$/;"	e
I_SAR	insnsi.h	/^	I_SAR,$/;"	e
I_SBB	insnsi.h	/^	I_SBB,$/;"	e
I_SCASB	insnsi.h	/^	I_SCASB,$/;"	e
I_SCASD	insnsi.h	/^	I_SCASD,$/;"	e
I_SCASW	insnsi.h	/^	I_SCASW,$/;"	e
I_SETcc	insnsi.h	/^	I_SETcc$/;"	e
I_SFENCE	insnsi.h	/^	I_SFENCE,$/;"	e
I_SGDT	insnsi.h	/^	I_SGDT,$/;"	e
I_SHL	insnsi.h	/^	I_SHL,$/;"	e
I_SHLD	insnsi.h	/^	I_SHLD,$/;"	e
I_SHR	insnsi.h	/^	I_SHR,$/;"	e
I_SHRD	insnsi.h	/^	I_SHRD,$/;"	e
I_SHUFPD	insnsi.h	/^	I_SHUFPD,$/;"	e
I_SHUFPS	insnsi.h	/^	I_SHUFPS,$/;"	e
I_SIDT	insnsi.h	/^	I_SIDT,$/;"	e
I_SLDT	insnsi.h	/^	I_SLDT,$/;"	e
I_SMI	insnsi.h	/^	I_SMI,$/;"	e
I_SMINT	insnsi.h	/^	I_SMINT,$/;"	e
I_SMINTOLD	insnsi.h	/^	I_SMINTOLD,$/;"	e
I_SMSW	insnsi.h	/^	I_SMSW,$/;"	e
I_SQRTPD	insnsi.h	/^	I_SQRTPD,$/;"	e
I_SQRTPS	insnsi.h	/^	I_SQRTPS,$/;"	e
I_SQRTSD	insnsi.h	/^	I_SQRTSD,$/;"	e
I_SQRTSS	insnsi.h	/^	I_SQRTSS,$/;"	e
I_STC	insnsi.h	/^	I_STC,$/;"	e
I_STD	insnsi.h	/^	I_STD,$/;"	e
I_STI	insnsi.h	/^	I_STI,$/;"	e
I_STMXCSR	insnsi.h	/^	I_STMXCSR,$/;"	e
I_STOSB	insnsi.h	/^	I_STOSB,$/;"	e
I_STOSD	insnsi.h	/^	I_STOSD,$/;"	e
I_STOSW	insnsi.h	/^	I_STOSW,$/;"	e
I_STR	insnsi.h	/^	I_STR,$/;"	e
I_SUB	insnsi.h	/^	I_SUB,$/;"	e
I_SUBPD	insnsi.h	/^	I_SUBPD,$/;"	e
I_SUBPS	insnsi.h	/^	I_SUBPS,$/;"	e
I_SUBSD	insnsi.h	/^	I_SUBSD,$/;"	e
I_SUBSS	insnsi.h	/^	I_SUBSS,$/;"	e
I_SVDC	insnsi.h	/^	I_SVDC,$/;"	e
I_SVLDT	insnsi.h	/^	I_SVLDT,$/;"	e
I_SVTS	insnsi.h	/^	I_SVTS,$/;"	e
I_SYSCALL	insnsi.h	/^	I_SYSCALL,$/;"	e
I_SYSENTER	insnsi.h	/^	I_SYSENTER,$/;"	e
I_SYSEXIT	insnsi.h	/^	I_SYSEXIT,$/;"	e
I_SYSRET	insnsi.h	/^	I_SYSRET,$/;"	e
I_TEST	insnsi.h	/^	I_TEST,$/;"	e
I_UCOMISD	insnsi.h	/^	I_UCOMISD,$/;"	e
I_UCOMISS	insnsi.h	/^	I_UCOMISS,$/;"	e
I_UD0	insnsi.h	/^	I_UD0,$/;"	e
I_UD1	insnsi.h	/^	I_UD1,$/;"	e
I_UD2	insnsi.h	/^	I_UD2,$/;"	e
I_UMOV	insnsi.h	/^	I_UMOV,$/;"	e
I_UNPCKHPD	insnsi.h	/^	I_UNPCKHPD,$/;"	e
I_UNPCKHPS	insnsi.h	/^	I_UNPCKHPS,$/;"	e
I_UNPCKLPD	insnsi.h	/^	I_UNPCKLPD,$/;"	e
I_UNPCKLPS	insnsi.h	/^	I_UNPCKLPS,$/;"	e
I_VERR	insnsi.h	/^	I_VERR,$/;"	e
I_VERW	insnsi.h	/^	I_VERW,$/;"	e
I_WAIT	insnsi.h	/^	I_WAIT,$/;"	e
I_WBINVD	insnsi.h	/^	I_WBINVD,$/;"	e
I_WRMSR	insnsi.h	/^	I_WRMSR,$/;"	e
I_WRSHR	insnsi.h	/^	I_WRSHR,$/;"	e
I_XADD	insnsi.h	/^	I_XADD,$/;"	e
I_XBTS	insnsi.h	/^	I_XBTS,$/;"	e
I_XCHG	insnsi.h	/^	I_XCHG,$/;"	e
I_XLAT	insnsi.h	/^	I_XLAT,$/;"	e
I_XLATB	insnsi.h	/^	I_XLATB,$/;"	e
I_XOR	insnsi.h	/^	I_XOR,$/;"	e
I_XORPD	insnsi.h	/^	I_XORPD,$/;"	e
I_XORPS	insnsi.h	/^	I_XORPS,$/;"	e
I_XSTORE	insnsi.h	/^	I_XSTORE,$/;"	e
ImpDef	output/outobj.c	/^static struct ImpDef {$/;"	s	file:
ImportRec	output/outrdf.c	/^struct ImportRec {$/;"	s	file:
ImportRec	rdoff/rdoff.h	/^struct ImportRec {$/;"	s
IncPath	preproc.c	/^struct IncPath {$/;"	s	file:
IncPath	preproc.c	/^typedef struct IncPath IncPath;$/;"	t	file:
Include	preproc.c	/^struct Include {$/;"	s	file:
Include	preproc.c	/^typedef struct Include Include;$/;"	t	file:
LABEL_BLOCK	labels.c	32;"	d	file:
LABEL_HASHES	labels.c	34;"	d	file:
LAYERSIZ	nasmlib.c	329;"	d	file:
LBLK_SIZE	labels.c	33;"	d	file:
LCCDIR	lcc/lin-aout.c	6;"	d	file:
LCCDIR	lcc/lin-elf.c	6;"	d	file:
LDFLAGS	Makefile	/^LDFLAGS		= $/;"	m
LDFLAGS	rdoff/Makefile	/^LDFLAGS		= $/;"	m
LDPERLINE	output/outieee.c	65;"	d	file:
LDRDFLIBS	rdoff/Makefile	/^LDRDFLIBS 	= rdoff.o nasmlib.o symtab.o collectn.o rdlib.o segtab.o hash.o$/;"	m
LDRDF_VERSION	rdoff/ldrdf.c	39;"	d	file:
LEAFSIZ	nasmlib.c	326;"	d	file:
LEDATA	output/outobj.c	/^    LEDATA = 0xA0,              \/* logical enumerated data *\/$/;"	e	enum:RecordID	file:
LIBS	Makefile	/^LIBS		= $/;"	m
LINNUM	output/outobj.c	/^    LINNUM = 0x94,              \/* line number record *\/$/;"	e	enum:RecordID	file:
LIST_HEXBIT	listing.c	23;"	d	file:
LIST_INCBIN	nasm.h	/^    LIST_INCBIN, LIST_TIMES$/;"	e
LIST_INCLUDE	nasm.h	/^    LIST_READ, LIST_MACRO, LIST_MACRO_NOLIST, LIST_INCLUDE,$/;"	e
LIST_INDENT	listing.c	22;"	d	file:
LIST_MACRO	nasm.h	/^    LIST_READ, LIST_MACRO, LIST_MACRO_NOLIST, LIST_INCLUDE,$/;"	e
LIST_MACRO_NOLIST	nasm.h	/^    LIST_READ, LIST_MACRO, LIST_MACRO_NOLIST, LIST_INCLUDE,$/;"	e
LIST_MAX_LEN	listing.c	21;"	d	file:
LIST_READ	nasm.h	/^    LIST_READ, LIST_MACRO, LIST_MACRO_NOLIST, LIST_INCLUDE,$/;"	e
LIST_TIMES	nasm.h	/^    LIST_INCBIN, LIST_TIMES$/;"	e
LNAMES	output/outobj.c	/^    LNAMES = 0x96,              \/* list of names *\/$/;"	e	enum:RecordID	file:
LN_S	rdoff/Makefile	/^LN_S 		= ln -s$/;"	m
LOCAL_SYMBOL	labels.c	52;"	d	file:
Line	preproc.c	/^struct Line {$/;"	s	file:
Line	preproc.c	/^typedef struct Line Line;$/;"	t	file:
LineNumber	output/outieee.c	/^struct LineNumber {$/;"	s	file:
LineNumber	output/outobj.c	/^struct LineNumber {$/;"	s	file:
ListGen	nasm.h	/^} ListGen;$/;"	t
LocalOffset	preproc.c	/^static int LocalOffset = 4;$/;"	v	file:
MAKEINFO	doc/Makefile	/^MAKEINFO	= makeinfo$/;"	m
MANT_DIGITS	float.c	21;"	d	file:
MANT_WORDS	float.c	20;"	d	file:
MAP_ORIGIN	output/outbin.c	131;"	d	file:
MAP_SECTIONS	output/outbin.c	133;"	d	file:
MAP_SUMMARY	output/outbin.c	132;"	d	file:
MAP_SYMBOLS	output/outbin.c	134;"	d	file:
MAX	preproc.c	325;"	d	file:
MAXMODNAMELEN	rdoff/rdlar.h	17;"	d
MAXPREFIX	nasm.h	496;"	d
MAX_INSLEN	insnsi.h	572;"	d
MAX_KEYWORD	insns.h	17;"	d
MAX_KEYWORD	insns.h	19;"	d
MEMORY	nasm.h	389;"	d
MEM_OFFS	nasm.h	427;"	d
MMXREG	nasm.h	398;"	d
MMacro	preproc.c	/^struct MMacro {$/;"	s	file:
MMacro	preproc.c	/^typedef struct MMacro MMacro;$/;"	t	file:
MODE32	output/outobj.c	/^    MODE32 = 0x8B               \/* module end for 32-bit objects *\/$/;"	e	enum:RecordID	file:
MODEND	output/outobj.c	/^    MODEND = 0x8A,              \/* module end *\/$/;"	e	enum:RecordID	file:
MODLIB_NAME_MAX	rdoff/rdoff.h	38;"	d
MacroInhibit	listing.c	/^static struct MacroInhibit {$/;"	s	file:
MacroInhibit	listing.c	/^typedef struct MacroInhibit MacroInhibit;$/;"	t	file:
ModRec	rdoff/rdoff.h	/^struct ModRec {$/;"	s
NASM	Makefile	/^NASM =	nasm.$(O) nasmlib.$(O) float.$(O) insnsa.$(O) assemble.$(O) \\$/;"	m
NASMPATH	lcc/lin-aout.c	9;"	d	file:
NASMPATH	lcc/lin-elf.c	9;"	d	file:
NASM_ASSEMBLE_H	assemble.h	10;"	d
NASM_DISASM_H	disasm.h	10;"	d
NASM_EVAL_H	eval.h	10;"	d
NASM_FLOAT_H	float.h	11;"	d
NASM_INSNS_H	insns.h	11;"	d
NASM_LISTING_H	listing.h	10;"	d
NASM_MAJOR_VER	version.h	3;"	d
NASM_MINOR_VER	version.h	4;"	d
NASM_NASMLIB_H	nasmlib.h	10;"	d
NASM_NASM_H	nasm.h	12;"	d
NASM_OUTFORM_H	outform.h	37;"	d
NASM_PARSER_H	parser.h	11;"	d
NASM_PATCHLEVEL_VER	version.h	6;"	d
NASM_PREPROC_H	preproc.h	10;"	d
NASM_SUBMINOR_VER	version.h	5;"	d
NASM_SYNC_H	sync.h	10;"	d
NASM_VER	version.h	8;"	d
NASM_VERSION_H	version.h	2;"	d
NASM_VERSION_ID	version.h	7;"	d
NDISASM	Makefile	/^NDISASM = ndisasm.$(O) disasm.$(O) sync.$(O) nasmlib.$(O) insnsd.$(O)$/;"	m
NEAR	nasm.h	378;"	d
NHASH	preproc.c	363;"	d	file:
NON_SIZE	nasm.h	382;"	d
NOT_DEFINED_YET	labels.c	50;"	d	file:
NO_DIRECTIVE_FOUND	preproc.c	244;"	d	file:
NO_SEG	nasm.h	28;"	d
NROFF	Makefile	/^NROFF		= nroff$/;"	m
NULL	nasm.h	18;"	d
N_BINCL	output/outelf.c	148;"	d	file:
N_EINCL	output/outelf.c	149;"	d	file:
N_SLINE	output/outelf.c	150;"	d	file:
N_SO	output/outelf.c	146;"	d	file:
N_SOL	output/outelf.c	147;"	d	file:
Next	output/outcoff.c	/^    struct tagString *Next;$/;"	m	struct:tagString	file:
O	Makefile	/^O               = o$/;"	m
O	rdoff/Makefile	/^O               = o$/;"	m
OBJ_PARMS	output/outobj.c	80;"	d	file:
OF_ALL	outform.h	66;"	d
OF_AOUT	outform.h	118;"	d
OF_AOUT	outform.h	157;"	d
OF_AOUT	outform.h	84;"	d
OF_AOUTB	outform.h	121;"	d
OF_AOUTB	outform.h	160;"	d
OF_AOUTB	outform.h	87;"	d
OF_AS86	outform.h	136;"	d
OF_AS86	outform.h	169;"	d
OF_AS86	outform.h	93;"	d
OF_BIN	outform.h	109;"	d
OF_BIN	outform.h	133;"	d
OF_BIN	outform.h	148;"	d
OF_BIN	outform.h	72;"	d
OF_COFF	outform.h	124;"	d
OF_COFF	outform.h	163;"	d
OF_COFF	outform.h	81;"	d
OF_DEFAULT	outform.h	179;"	d
OF_ELF	outform.h	127;"	d
OF_ELF	outform.h	154;"	d
OF_ELF	outform.h	78;"	d
OF_IEEE	outform.h	142;"	d
OF_IEEE	outform.h	175;"	d
OF_IEEE	outform.h	99;"	d
OF_OBJ	outform.h	106;"	d
OF_OBJ	outform.h	151;"	d
OF_OBJ	outform.h	75;"	d
OF_RDF	outform.h	172;"	d
OF_RDF2	outform.h	139;"	d
OF_RDF2	outform.h	96;"	d
OF_WIN32	outform.h	112;"	d
OF_WIN32	outform.h	166;"	d
OF_WIN32	outform.h	90;"	d
ONENESS	nasm.h	430;"	d
OPFLAG_EXTERN	nasm.h	484;"	d
OPFLAG_FORWARD	nasm.h	483;"	d
OPT_POSTFIX	nasm.c	348;"	d	file:
OPT_PREFIX	nasm.c	347;"	d	file:
ORI	output/outobj.c	/^typedef void ORI(ObjRecord * orp);$/;"	t	file:
OUT	doc/Makefile	/^OUT		= nasm.info nasmdoc.ps nasmdoc.pdf$/;"	m
OUTS	rdoff/doc/Makefile	/^OUTS = rdoff.info rdoff.html rdoff.ps rdoff.pdf$/;"	m
OUT_ADDRESS	nasm.h	722;"	d
OUT_RAWDATA	nasm.h	721;"	d
OUT_REL2ADR	nasm.h	723;"	d
OUT_REL4ADR	nasm.h	724;"	d
OUT_RESERVE	nasm.h	725;"	d
OUT_SIZMASK	nasm.h	727;"	d
OUT_TYPMASK	nasm.h	726;"	d
ObjRecord	output/outobj.c	/^struct ObjRecord {$/;"	s	file:
ObjRecord	output/outobj.c	/^typedef struct ObjRecord ObjRecord;$/;"	t	file:
PACKAGE_BUGREPORT	config.h	53;"	d
PACKAGE_NAME	config.h	56;"	d
PACKAGE_STRING	config.h	59;"	d
PACKAGE_TARNAME	config.h	62;"	d
PACKAGE_VERSION	config.h	65;"	d
PARAM_DELTA	preproc.c	384;"	d	file:
PERL	Makefile	/^PERL		= perl$/;"	m
PERL	doc/Makefile	/^PERL		= perl$/;"	m
PERLREQ	Makefile	/^PERLREQ = macros.c insnsa.c insnsd.c insnsi.h insnsn.c \\$/;"	m
PERMTS_SIZE	labels.c	40;"	d	file:
POSTFIX_MAX	nasm.h	40;"	d
PP_ARG	preproc.c	/^    PP_ARG,$/;"	e	file:
PP_ASSIGN	preproc.c	/^    PP_ASSIGN, PP_CLEAR, PP_DEFINE, PP_ELIF, PP_ELIFCTX, PP_ELIFDEF,$/;"	e	file:
PP_CLEAR	preproc.c	/^    PP_ASSIGN, PP_CLEAR, PP_DEFINE, PP_ELIF, PP_ELIFCTX, PP_ELIFDEF,$/;"	e	file:
PP_DEFINE	preproc.c	/^    PP_ASSIGN, PP_CLEAR, PP_DEFINE, PP_ELIF, PP_ELIFCTX, PP_ELIFDEF,$/;"	e	file:
PP_ELIF	preproc.c	/^    PP_ASSIGN, PP_CLEAR, PP_DEFINE, PP_ELIF, PP_ELIFCTX, PP_ELIFDEF,$/;"	e	file:
PP_ELIFCTX	preproc.c	/^    PP_ASSIGN, PP_CLEAR, PP_DEFINE, PP_ELIF, PP_ELIFCTX, PP_ELIFDEF,$/;"	e	file:
PP_ELIFDEF	preproc.c	/^    PP_ASSIGN, PP_CLEAR, PP_DEFINE, PP_ELIF, PP_ELIFCTX, PP_ELIFDEF,$/;"	e	file:
PP_ELIFID	preproc.c	/^    PP_ELIFID, PP_ELIFIDN, PP_ELIFIDNI, PP_ELIFMACRO, PP_ELIFNCTX,$/;"	e	file:
PP_ELIFIDN	preproc.c	/^    PP_ELIFID, PP_ELIFIDN, PP_ELIFIDNI, PP_ELIFMACRO, PP_ELIFNCTX,$/;"	e	file:
PP_ELIFIDNI	preproc.c	/^    PP_ELIFID, PP_ELIFIDN, PP_ELIFIDNI, PP_ELIFMACRO, PP_ELIFNCTX,$/;"	e	file:
PP_ELIFMACRO	preproc.c	/^    PP_ELIFID, PP_ELIFIDN, PP_ELIFIDNI, PP_ELIFMACRO, PP_ELIFNCTX,$/;"	e	file:
PP_ELIFNCTX	preproc.c	/^    PP_ELIFID, PP_ELIFIDN, PP_ELIFIDNI, PP_ELIFMACRO, PP_ELIFNCTX,$/;"	e	file:
PP_ELIFNDEF	preproc.c	/^        PP_ELIFNDEF,$/;"	e	file:
PP_ELIFNID	preproc.c	/^    PP_ELIFNID, PP_ELIFNIDN, PP_ELIFNIDNI, PP_ELIFNMACRO, PP_ELIFNNUM,$/;"	e	file:
PP_ELIFNIDN	preproc.c	/^    PP_ELIFNID, PP_ELIFNIDN, PP_ELIFNIDNI, PP_ELIFNMACRO, PP_ELIFNNUM,$/;"	e	file:
PP_ELIFNIDNI	preproc.c	/^    PP_ELIFNID, PP_ELIFNIDN, PP_ELIFNIDNI, PP_ELIFNMACRO, PP_ELIFNNUM,$/;"	e	file:
PP_ELIFNMACRO	preproc.c	/^    PP_ELIFNID, PP_ELIFNIDN, PP_ELIFNIDNI, PP_ELIFNMACRO, PP_ELIFNNUM,$/;"	e	file:
PP_ELIFNNUM	preproc.c	/^    PP_ELIFNID, PP_ELIFNIDN, PP_ELIFNIDNI, PP_ELIFNMACRO, PP_ELIFNNUM,$/;"	e	file:
PP_ELIFNSTR	preproc.c	/^        PP_ELIFNSTR,$/;"	e	file:
PP_ELIFNUM	preproc.c	/^    PP_ELIFNUM, PP_ELIFSTR, PP_ELSE, PP_ENDIF, PP_ENDM, PP_ENDMACRO,$/;"	e	file:
PP_ELIFSTR	preproc.c	/^    PP_ELIFNUM, PP_ELIFSTR, PP_ELSE, PP_ENDIF, PP_ENDM, PP_ENDMACRO,$/;"	e	file:
PP_ELSE	preproc.c	/^    PP_ELIFNUM, PP_ELIFSTR, PP_ELSE, PP_ENDIF, PP_ENDM, PP_ENDMACRO,$/;"	e	file:
PP_ENDIF	preproc.c	/^    PP_ELIFNUM, PP_ELIFSTR, PP_ELSE, PP_ENDIF, PP_ENDM, PP_ENDMACRO,$/;"	e	file:
PP_ENDM	preproc.c	/^    PP_ELIFNUM, PP_ELIFSTR, PP_ELSE, PP_ENDIF, PP_ENDM, PP_ENDMACRO,$/;"	e	file:
PP_ENDMACRO	preproc.c	/^    PP_ELIFNUM, PP_ELIFSTR, PP_ELSE, PP_ENDIF, PP_ENDM, PP_ENDMACRO,$/;"	e	file:
PP_ENDREP	preproc.c	/^    PP_ENDREP, PP_ERROR, PP_EXITREP, PP_IASSIGN, PP_IDEFINE, PP_IF,$/;"	e	file:
PP_ERROR	preproc.c	/^    PP_ENDREP, PP_ERROR, PP_EXITREP, PP_IASSIGN, PP_IDEFINE, PP_IF,$/;"	e	file:
PP_EXITREP	preproc.c	/^    PP_ENDREP, PP_ERROR, PP_EXITREP, PP_IASSIGN, PP_IDEFINE, PP_IF,$/;"	e	file:
PP_IASSIGN	preproc.c	/^    PP_ENDREP, PP_ERROR, PP_EXITREP, PP_IASSIGN, PP_IDEFINE, PP_IF,$/;"	e	file:
PP_IDEFINE	preproc.c	/^    PP_ENDREP, PP_ERROR, PP_EXITREP, PP_IASSIGN, PP_IDEFINE, PP_IF,$/;"	e	file:
PP_IF	preproc.c	/^    PP_ENDREP, PP_ERROR, PP_EXITREP, PP_IASSIGN, PP_IDEFINE, PP_IF,$/;"	e	file:
PP_IFCTX	preproc.c	/^    PP_IFCTX, PP_IFDEF, PP_IFID, PP_IFIDN, PP_IFIDNI, PP_IFMACRO,$/;"	e	file:
PP_IFDEF	preproc.c	/^    PP_IFCTX, PP_IFDEF, PP_IFID, PP_IFIDN, PP_IFIDNI, PP_IFMACRO,$/;"	e	file:
PP_IFID	preproc.c	/^    PP_IFCTX, PP_IFDEF, PP_IFID, PP_IFIDN, PP_IFIDNI, PP_IFMACRO,$/;"	e	file:
PP_IFIDN	preproc.c	/^    PP_IFCTX, PP_IFDEF, PP_IFID, PP_IFIDN, PP_IFIDNI, PP_IFMACRO,$/;"	e	file:
PP_IFIDNI	preproc.c	/^    PP_IFCTX, PP_IFDEF, PP_IFID, PP_IFIDN, PP_IFIDNI, PP_IFMACRO,$/;"	e	file:
PP_IFMACRO	preproc.c	/^    PP_IFCTX, PP_IFDEF, PP_IFID, PP_IFIDN, PP_IFIDNI, PP_IFMACRO,$/;"	e	file:
PP_IFNCTX	preproc.c	/^        PP_IFNCTX,$/;"	e	file:
PP_IFNDEF	preproc.c	/^    PP_IFNDEF, PP_IFNID, PP_IFNIDN, PP_IFNIDNI, PP_IFNMACRO, PP_IFNNUM,$/;"	e	file:
PP_IFNID	preproc.c	/^    PP_IFNDEF, PP_IFNID, PP_IFNIDN, PP_IFNIDNI, PP_IFNMACRO, PP_IFNNUM,$/;"	e	file:
PP_IFNIDN	preproc.c	/^    PP_IFNDEF, PP_IFNID, PP_IFNIDN, PP_IFNIDNI, PP_IFNMACRO, PP_IFNNUM,$/;"	e	file:
PP_IFNIDNI	preproc.c	/^    PP_IFNDEF, PP_IFNID, PP_IFNIDN, PP_IFNIDNI, PP_IFNMACRO, PP_IFNNUM,$/;"	e	file:
PP_IFNMACRO	preproc.c	/^    PP_IFNDEF, PP_IFNID, PP_IFNIDN, PP_IFNIDNI, PP_IFNMACRO, PP_IFNNUM,$/;"	e	file:
PP_IFNNUM	preproc.c	/^    PP_IFNDEF, PP_IFNID, PP_IFNIDN, PP_IFNIDNI, PP_IFNMACRO, PP_IFNNUM,$/;"	e	file:
PP_IFNSTR	preproc.c	/^    PP_IFNSTR, PP_IFNUM, PP_IFSTR, PP_IMACRO, PP_INCLUDE,$/;"	e	file:
PP_IFNUM	preproc.c	/^    PP_IFNSTR, PP_IFNUM, PP_IFSTR, PP_IMACRO, PP_INCLUDE,$/;"	e	file:
PP_IFSTR	preproc.c	/^    PP_IFNSTR, PP_IFNUM, PP_IFSTR, PP_IMACRO, PP_INCLUDE,$/;"	e	file:
PP_IMACRO	preproc.c	/^    PP_IFNSTR, PP_IFNUM, PP_IFSTR, PP_IMACRO, PP_INCLUDE,$/;"	e	file:
PP_INCLUDE	preproc.c	/^    PP_IFNSTR, PP_IFNUM, PP_IFSTR, PP_IMACRO, PP_INCLUDE,$/;"	e	file:
PP_IXDEFINE	preproc.c	/^    PP_IXDEFINE, PP_LINE,$/;"	e	file:
PP_LINE	preproc.c	/^    PP_IXDEFINE, PP_LINE,$/;"	e	file:
PP_LOCAL	preproc.c	/^    PP_LOCAL,$/;"	e	file:
PP_MACRO	preproc.c	/^    PP_MACRO, PP_POP, PP_PUSH, PP_REP, PP_REPL, PP_ROTATE,$/;"	e	file:
PP_POP	preproc.c	/^    PP_MACRO, PP_POP, PP_PUSH, PP_REP, PP_REPL, PP_ROTATE,$/;"	e	file:
PP_PUSH	preproc.c	/^    PP_MACRO, PP_POP, PP_PUSH, PP_REP, PP_REPL, PP_ROTATE,$/;"	e	file:
PP_REP	preproc.c	/^    PP_MACRO, PP_POP, PP_PUSH, PP_REP, PP_REPL, PP_ROTATE,$/;"	e	file:
PP_REPL	preproc.c	/^    PP_MACRO, PP_POP, PP_PUSH, PP_REP, PP_REPL, PP_ROTATE,$/;"	e	file:
PP_ROTATE	preproc.c	/^    PP_MACRO, PP_POP, PP_PUSH, PP_REP, PP_REPL, PP_ROTATE,$/;"	e	file:
PP_STACKSIZE	preproc.c	/^    PP_STACKSIZE,$/;"	e	file:
PP_STRLEN	preproc.c	/^    PP_STRLEN, PP_SUBSTR, PP_UNDEF, PP_XDEFINE$/;"	e	file:
PP_SUBSTR	preproc.c	/^    PP_STRLEN, PP_SUBSTR, PP_UNDEF, PP_XDEFINE$/;"	e	file:
PP_UNDEF	preproc.c	/^    PP_STRLEN, PP_SUBSTR, PP_UNDEF, PP_XDEFINE$/;"	e	file:
PP_XDEFINE	preproc.c	/^    PP_STRLEN, PP_SUBSTR, PP_UNDEF, PP_XDEFINE$/;"	e	file:
PREFIX_ENUM_START	nasm.h	/^    PREFIX_ENUM_START = REG_ENUM_LIMIT,$/;"	e
PREFIX_MAX	nasm.h	36;"	d
PROGRAMS	rdoff/Makefile	/^PROGRAMS = rdfdump$(X) ldrdf$(X) rdx$(X) rdflib$(X) \\$/;"	m
PROGRAM_VERSION	rdoff/rdfdump.c	13;"	d	file:
PROGRAM_VERSION	rdoff/rdlar.c	19;"	d	file:
PS2PDF	doc/Makefile	/^PS2PDF          = ps2pdf -dOptimize=true	# Part of GhostScript$/;"	m
PUBDEF	output/outobj.c	/^    PUBDEF = 0x90,              \/* public definition *\/$/;"	e	enum:RecordID	file:
P_A16	nasm.h	/^    P_A16 = PREFIX_ENUM_START, P_A32, P_LOCK, P_O16, P_O32, P_REP, P_REPE,$/;"	e
P_A32	nasm.h	/^    P_A16 = PREFIX_ENUM_START, P_A32, P_LOCK, P_O16, P_O32, P_REP, P_REPE,$/;"	e
P_LOCK	nasm.h	/^    P_A16 = PREFIX_ENUM_START, P_A32, P_LOCK, P_O16, P_O32, P_REP, P_REPE,$/;"	e
P_O16	nasm.h	/^    P_A16 = PREFIX_ENUM_START, P_A32, P_LOCK, P_O16, P_O32, P_REP, P_REPE,$/;"	e
P_O32	nasm.h	/^    P_A16 = PREFIX_ENUM_START, P_A32, P_LOCK, P_O16, P_O32, P_REP, P_REPE,$/;"	e
P_REP	nasm.h	/^    P_A16 = PREFIX_ENUM_START, P_A32, P_LOCK, P_O16, P_O32, P_REP, P_REPE,$/;"	e
P_REPE	nasm.h	/^    P_A16 = PREFIX_ENUM_START, P_A32, P_LOCK, P_O16, P_O32, P_REP, P_REPE,$/;"	e
P_REPNE	nasm.h	/^    P_REPNE, P_REPNZ, P_REPZ, P_TIMES$/;"	e
P_REPNZ	nasm.h	/^    P_REPNE, P_REPNZ, P_REPZ, P_TIMES$/;"	e
P_REPZ	nasm.h	/^    P_REPNE, P_REPNZ, P_REPZ, P_TIMES$/;"	e
P_TIMES	nasm.h	/^    P_REPNE, P_REPNZ, P_REPZ, P_TIMES$/;"	e
Piece	output/outas86.c	/^struct Piece {$/;"	s	file:
Preproc	nasm.h	/^} Preproc;$/;"	t
Public	output/outobj.c	/^static struct Public {$/;"	s	file:
RAA	nasmlib.h	/^struct RAA {$/;"	s
RAA	nasmlib.h	/^typedef struct RAA RAA;$/;"	t
RAA_BLKSIZE	nasmlib.h	141;"	d
RAA_BRANCH	nasmlib.h	/^        struct RAA_BRANCH {$/;"	s	union:RAA::RAA_UNION
RAA_BRANCH	nasmlib.h	/^typedef struct RAA_BRANCH RAA_BRANCH;$/;"	t
RAA_LAYERSIZE	nasmlib.h	142;"	d
RAA_LEAF	nasmlib.h	/^        struct RAA_LEAF {$/;"	s	union:RAA::RAA_UNION
RAA_LEAF	nasmlib.h	/^typedef struct RAA_LEAF RAA_LEAF;$/;"	t
RAA_UNION	nasmlib.h	/^    union RAA_UNION {$/;"	u	struct:RAA
RAA_UNION	nasmlib.h	/^typedef union RAA_UNION RAA_UNION;$/;"	t
RDATA_FLAGS	output/outcoff.c	105;"	d	file:
RDFFileInfo	rdoff/rdoff.h	/^typedef struct RDFFileInfo {$/;"	s
RDFHeaderRec	rdoff/rdoff.h	/^typedef union RDFHeaderRec {$/;"	u
RDFModuleStruct	rdoff/rdfload.h	/^typedef struct RDFModuleStruct {$/;"	s
RDFREC_BSS	rdoff/rdoff.h	49;"	d
RDFREC_COMMON	rdoff/rdoff.h	53;"	d
RDFREC_DLL	rdoff/rdoff.h	48;"	d
RDFREC_FARIMPORT	rdoff/rdoff.h	51;"	d
RDFREC_GENERIC	rdoff/rdoff.h	44;"	d
RDFREC_GLOBAL	rdoff/rdoff.h	47;"	d
RDFREC_IMPORT	rdoff/rdoff.h	46;"	d
RDFREC_MODNAME	rdoff/rdoff.h	52;"	d
RDFREC_RELOC	rdoff/rdoff.h	45;"	d
RDFREC_SEGRELOC	rdoff/rdoff.h	50;"	d
RDF_ERR_FORMAT	rdoff/rdoff.h	/^    \/* 2 *\/ RDF_ERR_FORMAT,$/;"	e
RDF_ERR_HEADER	rdoff/rdoff.h	/^    \/* 5 *\/ RDF_ERR_HEADER,$/;"	e
RDF_ERR_NOMEM	rdoff/rdoff.h	/^    \/* 6 *\/ RDF_ERR_NOMEM,$/;"	e
RDF_ERR_OPEN	rdoff/rdoff.h	/^    \/* 1 *\/ RDF_ERR_OPEN,$/;"	e
RDF_ERR_READ	rdoff/rdoff.h	/^    \/* 3 *\/ RDF_ERR_READ,$/;"	e
RDF_ERR_RECLEN	rdoff/rdoff.h	/^    \/* 9 *\/ RDF_ERR_RECLEN,$/;"	e
RDF_ERR_RECTYPE	rdoff/rdoff.h	/^    \/* 8 *\/ RDF_ERR_RECTYPE,$/;"	e
RDF_ERR_SEGMENT	rdoff/rdoff.h	/^    \/* 10 *\/ RDF_ERR_SEGMENT$/;"	e
RDF_ERR_UNKNOWN	rdoff/rdoff.h	/^    \/* 4 *\/ RDF_ERR_UNKNOWN,$/;"	e
RDF_ERR_VER	rdoff/rdoff.h	/^    \/* 7 *\/ RDF_ERR_VER,$/;"	e
RDF_MAXSEGS	rdoff/rdoff.h	41;"	d
RDF_OK	rdoff/rdoff.h	/^    \/* 0 *\/ RDF_OK,$/;"	e
RDLAMAG	rdoff/rdlar.h	14;"	d
RDLMMAG	rdoff/rdlar.h	15;"	d
RDL_EINVALID	rdoff/rdlib.h	15;"	d
RDL_ENOTFOUND	rdoff/rdlib.h	17;"	d
RDL_EOPEN	rdoff/rdlib.h	14;"	d
RDL_EVERSION	rdoff/rdlib.h	16;"	d
RDOFF2Id	output/outrdf2.c	/^static const char *RDOFF2Id = RDOFF2_SIGNATURE;$/;"	v	file:
RDOFF2_REVISION	rdoff/rdoff.h	29;"	d
RDOFF2_SIGNATURE	rdoff/rdoff.h	32;"	d
RDOFFId	output/outrdf.c	/^static const char *RDOFFId = "RDOFF1";  \/* written to start of RDOFF files *\/$/;"	v	file:
RDOFFId	rdoff/rdoff.c	/^const char *RDOFFId = RDOFF2_SIGNATURE;$/;"	v
RDOFF_CODE	rdoff/rdoff.h	218;"	d
RDOFF_DATA	rdoff/rdoff.h	219;"	d
RDOFF_HEADER	rdoff/rdoff.h	220;"	d
RDOFF_RELATIVEMASK	rdoff/rdoff.h	222;"	d
RDOFF_SEGMENTMASK	rdoff/rdoff.h	224;"	d
RDOFF_UTILS	rdoff/ldrdf.c	31;"	d	file:
RDOFF_UTILS	rdoff/rdfdump.c	9;"	d	file:
RDOFF_UTILS	rdoff/rdfload.h	15;"	d
RDOFF_UTILS	rdoff/rdlib.c	9;"	d	file:
RDOFF_UTILS	rdoff/rdoff.c	23;"	d	file:
RDXLIBS	rdoff/Makefile	/^RDXLIBS 	= rdoff.o rdfload.o symtab.o collectn.o hash.o$/;"	m
REAL_SYMBOLS	output/outcoff.c	/^        REAL_SYMBOLS$/;"	e	enum:Reloc::<anonymous>	file:
RECORD_MAX	output/outobj.c	79;"	d	file:
REG16	nasm.h	396;"	d
REG32	nasm.h	397;"	d
REG8	nasm.h	395;"	d
REGISTER	nasm.h	390;"	d
REGMEM	nasm.h	393;"	d
REGNORM	nasm.h	394;"	d
REG_ACCUM	nasm.h	405;"	d
REG_AL	nasm.h	406;"	d
REG_AX	nasm.h	407;"	d
REG_CDT	nasm.h	421;"	d
REG_CL	nasm.h	410;"	d
REG_COUNT	nasm.h	409;"	d
REG_CREG	nasm.h	422;"	d
REG_CS	nasm.h	417;"	d
REG_CX	nasm.h	411;"	d
REG_DESS	nasm.h	418;"	d
REG_DL	nasm.h	413;"	d
REG_DREG	nasm.h	423;"	d
REG_DX	nasm.h	414;"	d
REG_EAX	nasm.h	408;"	d
REG_ECX	nasm.h	412;"	d
REG_EDX	nasm.h	415;"	d
REG_ENUM_LIMIT	regs.h	/^    REG_ENUM_LIMIT$/;"	e	enum:reg_enum
REG_FSGS	nasm.h	419;"	d
REG_SEG67	nasm.h	420;"	d
REG_SMASK	nasm.h	404;"	d
REG_SREG	nasm.h	416;"	d
REG_TREG	nasm.h	424;"	d
RELTYPE_ABSOLUTE	output/outaout.c	21;"	d	file:
RELTYPE_GOT	output/outaout.c	25;"	d	file:
RELTYPE_GOTOFF	output/outaout.c	24;"	d	file:
RELTYPE_GOTPC	output/outaout.c	23;"	d	file:
RELTYPE_PLT	output/outaout.c	26;"	d	file:
RELTYPE_RELATIVE	output/outaout.c	22;"	d	file:
RELTYPE_SYMFLAG	output/outaout.c	27;"	d	file:
RI16	rdoff/rdoff.c	381;"	d	file:
RI32	rdoff/rdoff.c	385;"	d	file:
RI8	rdoff/rdoff.c	380;"	d	file:
RS	rdoff/rdoff.c	391;"	d	file:
R_386_16	output/outelf.c	/^    R_386_16 = 20,              \/* A 16-bit absolute relocation *\/$/;"	e	enum:reloc_type	file:
R_386_32	output/outelf.c	/^    R_386_32 = 1,               \/* ordinary absolute relocation *\/$/;"	e	enum:reloc_type	file:
R_386_8	output/outelf.c	/^    R_386_8 = 22,               \/* An 8-bit absolute relocation *\/$/;"	e	enum:reloc_type	file:
R_386_COPY	output/outelf.c	/^    R_386_COPY = 5,             \/* ??? *\/$/;"	e	enum:reloc_type	file:
R_386_GLOB_DAT	output/outelf.c	/^    R_386_GLOB_DAT = 6,         \/* ??? *\/$/;"	e	enum:reloc_type	file:
R_386_GOT32	output/outelf.c	/^    R_386_GOT32 = 3,            \/* an offset into GOT *\/$/;"	e	enum:reloc_type	file:
R_386_GOTOFF	output/outelf.c	/^    R_386_GOTOFF = 9,           \/* an offset from GOT base *\/$/;"	e	enum:reloc_type	file:
R_386_GOTPC	output/outelf.c	/^    R_386_GOTPC = 10,           \/* a PC-relative offset _to_ GOT *\/$/;"	e	enum:reloc_type	file:
R_386_JUMP_SLOT	output/outelf.c	/^    R_386_JUMP_SLOT = 7,        \/* ??? *\/$/;"	e	enum:reloc_type	file:
R_386_PC16	output/outelf.c	/^    R_386_PC16 = 21,            \/* A 16-bit PC-relative relocation *\/$/;"	e	enum:reloc_type	file:
R_386_PC32	output/outelf.c	/^    R_386_PC32 = 2,             \/* PC-relative relocation *\/$/;"	e	enum:reloc_type	file:
R_386_PC8	output/outelf.c	/^    R_386_PC8 = 23              \/* An 8-bit PC-relative relocation *\/$/;"	e	enum:reloc_type	file:
R_386_PLT32	output/outelf.c	/^    R_386_PLT32 = 4,            \/* a PC-relative offset into PLT *\/$/;"	e	enum:reloc_type	file:
R_386_RELATIVE	output/outelf.c	/^    R_386_RELATIVE = 8,         \/* ??? *\/$/;"	e	enum:reloc_type	file:
R_AH	regs.h	/^    R_AH = EXPR_REG_START,$/;"	e	enum:reg_enum
R_AL	regs.h	/^    R_AL,$/;"	e	enum:reg_enum
R_AX	regs.h	/^    R_AX,$/;"	e	enum:reg_enum
R_BH	regs.h	/^    R_BH,$/;"	e	enum:reg_enum
R_BL	regs.h	/^    R_BL,$/;"	e	enum:reg_enum
R_BP	regs.h	/^    R_BP,$/;"	e	enum:reg_enum
R_BX	regs.h	/^    R_BX,$/;"	e	enum:reg_enum
R_CH	regs.h	/^    R_CH,$/;"	e	enum:reg_enum
R_CL	regs.h	/^    R_CL,$/;"	e	enum:reg_enum
R_CR0	regs.h	/^    R_CR0,$/;"	e	enum:reg_enum
R_CR1	regs.h	/^    R_CR1,$/;"	e	enum:reg_enum
R_CR2	regs.h	/^    R_CR2,$/;"	e	enum:reg_enum
R_CR3	regs.h	/^    R_CR3,$/;"	e	enum:reg_enum
R_CR4	regs.h	/^    R_CR4,$/;"	e	enum:reg_enum
R_CR5	regs.h	/^    R_CR5,$/;"	e	enum:reg_enum
R_CR6	regs.h	/^    R_CR6,$/;"	e	enum:reg_enum
R_CR7	regs.h	/^    R_CR7,$/;"	e	enum:reg_enum
R_CS	regs.h	/^    R_CS,$/;"	e	enum:reg_enum
R_CX	regs.h	/^    R_CX,$/;"	e	enum:reg_enum
R_DH	regs.h	/^    R_DH,$/;"	e	enum:reg_enum
R_DI	regs.h	/^    R_DI,$/;"	e	enum:reg_enum
R_DL	regs.h	/^    R_DL,$/;"	e	enum:reg_enum
R_DR0	regs.h	/^    R_DR0,$/;"	e	enum:reg_enum
R_DR1	regs.h	/^    R_DR1,$/;"	e	enum:reg_enum
R_DR2	regs.h	/^    R_DR2,$/;"	e	enum:reg_enum
R_DR3	regs.h	/^    R_DR3,$/;"	e	enum:reg_enum
R_DR4	regs.h	/^    R_DR4,$/;"	e	enum:reg_enum
R_DR5	regs.h	/^    R_DR5,$/;"	e	enum:reg_enum
R_DR6	regs.h	/^    R_DR6,$/;"	e	enum:reg_enum
R_DR7	regs.h	/^    R_DR7,$/;"	e	enum:reg_enum
R_DS	regs.h	/^    R_DS,$/;"	e	enum:reg_enum
R_DX	regs.h	/^    R_DX,$/;"	e	enum:reg_enum
R_EAX	regs.h	/^    R_EAX,$/;"	e	enum:reg_enum
R_EBP	regs.h	/^    R_EBP,$/;"	e	enum:reg_enum
R_EBX	regs.h	/^    R_EBX,$/;"	e	enum:reg_enum
R_ECX	regs.h	/^    R_ECX,$/;"	e	enum:reg_enum
R_EDI	regs.h	/^    R_EDI,$/;"	e	enum:reg_enum
R_EDX	regs.h	/^    R_EDX,$/;"	e	enum:reg_enum
R_ES	regs.h	/^    R_ES,$/;"	e	enum:reg_enum
R_ESI	regs.h	/^    R_ESI,$/;"	e	enum:reg_enum
R_ESP	regs.h	/^    R_ESP,$/;"	e	enum:reg_enum
R_FS	regs.h	/^    R_FS,$/;"	e	enum:reg_enum
R_GS	regs.h	/^    R_GS,$/;"	e	enum:reg_enum
R_MM0	regs.h	/^    R_MM0,$/;"	e	enum:reg_enum
R_MM1	regs.h	/^    R_MM1,$/;"	e	enum:reg_enum
R_MM2	regs.h	/^    R_MM2,$/;"	e	enum:reg_enum
R_MM3	regs.h	/^    R_MM3,$/;"	e	enum:reg_enum
R_MM4	regs.h	/^    R_MM4,$/;"	e	enum:reg_enum
R_MM5	regs.h	/^    R_MM5,$/;"	e	enum:reg_enum
R_MM6	regs.h	/^    R_MM6,$/;"	e	enum:reg_enum
R_MM7	regs.h	/^    R_MM7,$/;"	e	enum:reg_enum
R_SEGR6	regs.h	/^    R_SEGR6,$/;"	e	enum:reg_enum
R_SEGR7	regs.h	/^    R_SEGR7,$/;"	e	enum:reg_enum
R_SI	regs.h	/^    R_SI,$/;"	e	enum:reg_enum
R_SP	nasm.h	51;"	d
R_SP	regs.h	/^    R_SP,$/;"	e	enum:reg_enum
R_SS	regs.h	/^    R_SS,$/;"	e	enum:reg_enum
R_ST0	regs.h	/^    R_ST0,$/;"	e	enum:reg_enum
R_ST1	regs.h	/^    R_ST1,$/;"	e	enum:reg_enum
R_ST2	regs.h	/^    R_ST2,$/;"	e	enum:reg_enum
R_ST3	regs.h	/^    R_ST3,$/;"	e	enum:reg_enum
R_ST4	regs.h	/^    R_ST4,$/;"	e	enum:reg_enum
R_ST5	regs.h	/^    R_ST5,$/;"	e	enum:reg_enum
R_ST6	regs.h	/^    R_ST6,$/;"	e	enum:reg_enum
R_ST7	regs.h	/^    R_ST7,$/;"	e	enum:reg_enum
R_TR0	regs.h	/^    R_TR0,$/;"	e	enum:reg_enum
R_TR1	regs.h	/^    R_TR1,$/;"	e	enum:reg_enum
R_TR2	regs.h	/^    R_TR2,$/;"	e	enum:reg_enum
R_TR3	regs.h	/^    R_TR3,$/;"	e	enum:reg_enum
R_TR4	regs.h	/^    R_TR4,$/;"	e	enum:reg_enum
R_TR5	regs.h	/^    R_TR5,$/;"	e	enum:reg_enum
R_TR6	regs.h	/^    R_TR6,$/;"	e	enum:reg_enum
R_TR7	regs.h	/^    R_TR7,$/;"	e	enum:reg_enum
R_XMM0	regs.h	/^    R_XMM0,$/;"	e	enum:reg_enum
R_XMM1	regs.h	/^    R_XMM1,$/;"	e	enum:reg_enum
R_XMM2	regs.h	/^    R_XMM2,$/;"	e	enum:reg_enum
R_XMM3	regs.h	/^    R_XMM3,$/;"	e	enum:reg_enum
R_XMM4	regs.h	/^    R_XMM4,$/;"	e	enum:reg_enum
R_XMM5	regs.h	/^    R_XMM5,$/;"	e	enum:reg_enum
R_XMM6	regs.h	/^    R_XMM6,$/;"	e	enum:reg_enum
R_XMM7	regs.h	/^    R_XMM7,$/;"	e	enum:reg_enum
RecordID	output/outobj.c	/^enum RecordID {                 \/* record ID codes *\/$/;"	g	file:
Reloc	output/outaout.c	/^struct Reloc {$/;"	s	file:
Reloc	output/outbin.c	/^static struct Reloc {$/;"	s	file:
Reloc	output/outcoff.c	/^struct Reloc {$/;"	s	file:
Reloc	output/outelf.c	/^struct Reloc {$/;"	s	file:
RelocRec	output/outrdf.c	/^struct RelocRec {$/;"	s	file:
RelocRec	rdoff/rdoff.h	/^struct RelocRec {$/;"	s
SAA	nasmlib.h	/^struct SAA {$/;"	s
SAA_MAXLEN	nasmlib.c	426;"	d	file:
SBYTE	nasm.h	433;"	d
SECT_ABS	output/outaout.c	53;"	d	file:
SECT_BSS	output/outaout.c	56;"	d	file:
SECT_BSS	output/outas86.c	42;"	d	file:
SECT_DATA	output/outaout.c	55;"	d	file:
SECT_DATA	output/outas86.c	41;"	d	file:
SECT_DELTA	output/outcoff.c	107;"	d	file:
SECT_DELTA	output/outelf.c	82;"	d	file:
SECT_MASK	output/outaout.c	57;"	d	file:
SECT_SYMBOLS	output/outcoff.c	/^        SECT_SYMBOLS,$/;"	e	enum:Reloc::<anonymous>	file:
SECT_TEXT	output/outaout.c	54;"	d	file:
SECT_TEXT	output/outas86.c	40;"	d	file:
SEGCONFIGMAX	rdoff/ldsegs.h	23;"	d
SEGDEF	output/outobj.c	/^    SEGDEF = 0x98,              \/* segment definition *\/$/;"	e	enum:RecordID	file:
SEG_32BIT	disasm.c	28;"	d	file:
SEG_ABS	nasm.h	29;"	d
SEG_ALIGN	output/outelf.c	121;"	d	file:
SEG_ALIGN_1	output/outelf.c	122;"	d	file:
SEG_DISP16	disasm.c	31;"	d	file:
SEG_DISP32	disasm.c	32;"	d	file:
SEG_DISP8	disasm.c	30;"	d	file:
SEG_IGNORE	rdoff/ldsegs.h	19;"	d
SEG_MERGE	rdoff/ldsegs.h	21;"	d
SEG_NEWSEG	rdoff/ldsegs.h	20;"	d
SEG_NODISP	disasm.c	33;"	d	file:
SEG_RELATIVE	disasm.c	27;"	d	file:
SEG_RMREG	disasm.c	29;"	d	file:
SEG_SIGNED	disasm.c	34;"	d	file:
SET_CURR_OFFS	nasm.c	134;"	d	file:
SHF_ALLOC	output/outelf.c	65;"	d	file:
SHF_EXECINSTR	output/outelf.c	66;"	d	file:
SHF_WRITE	output/outelf.c	64;"	d	file:
SHN_ABS	output/outelf.c	110;"	d	file:
SHN_COMMON	output/outelf.c	111;"	d	file:
SHN_UNDEF	output/outelf.c	112;"	d	file:
SHORT	nasm.h	379;"	d
SHSTR_DELTA	output/outelf.c	86;"	d	file:
SHT_NOBITS	output/outelf.c	62;"	d	file:
SHT_PROGBITS	output/outelf.c	61;"	d	file:
SIZE_MASK	nasm.h	381;"	d
SMacro	preproc.c	/^struct SMacro {$/;"	s	file:
SMacro	preproc.c	/^typedef struct SMacro SMacro;$/;"	t	file:
SRCS	doc/Makefile	/^SRCS		= nasmdoc.src$/;"	m
SRCS	rdoff/doc/Makefile	/^SRCS = rdoff.texi$/;"	m
START_DEFINED	output/outbin.c	66;"	d	file:
STDC_HEADERS	config.h	68;"	d
STDSCAN_TEMP_DELTA	nasmlib.c	665;"	d	file:
STRICT	nasm.h	386;"	d
STRICT_ERRORS	rdoff/rdoff.c	37;"	d	file:
STRING	output/outcoff.c	/^} STRING;$/;"	t	file:
SYMTABSIZE	rdoff/symtab.c	17;"	d	file:
SYM_ABSOLUTE	output/outas86.c	50;"	d	file:
SYM_DATA	output/outaout.c	63;"	d	file:
SYM_DATA	output/outelf.c	116;"	d	file:
SYM_DATA	rdoff/rdoff.h	146;"	d
SYM_ENTRY	output/outas86.c	47;"	d	file:
SYM_EXPORT	output/outas86.c	48;"	d	file:
SYM_FUNCTION	output/outaout.c	64;"	d	file:
SYM_FUNCTION	output/outelf.c	117;"	d	file:
SYM_FUNCTION	rdoff/rdoff.h	147;"	d
SYM_GLOBAL	output/outaout.c	62;"	d	file:
SYM_GLOBAL	output/outelf.c	115;"	d	file:
SYM_GLOBAL	rdoff/rdoff.h	148;"	d
SYM_IMPORT	output/outas86.c	49;"	d	file:
SYM_IMPORT	rdoff/rdoff.h	149;"	d
SYM_SECTION	output/outelf.c	114;"	d	file:
SYM_WITH_SIZE	output/outaout.c	65;"	d	file:
SYNC_MAX	sync.c	15;"	d	file:
S_BYTE	parser.c	/^    S_BYTE, S_DWORD, S_FAR, S_LONG, S_NEAR, S_NOSPLIT, S_QWORD,$/;"	e	file:
S_DWORD	parser.c	/^    S_BYTE, S_DWORD, S_FAR, S_LONG, S_NEAR, S_NOSPLIT, S_QWORD,$/;"	e	file:
S_FAR	parser.c	/^    S_BYTE, S_DWORD, S_FAR, S_LONG, S_NEAR, S_NOSPLIT, S_QWORD,$/;"	e	file:
S_LONG	parser.c	/^    S_BYTE, S_DWORD, S_FAR, S_LONG, S_NEAR, S_NOSPLIT, S_QWORD,$/;"	e	file:
S_NEAR	parser.c	/^    S_BYTE, S_DWORD, S_FAR, S_LONG, S_NEAR, S_NOSPLIT, S_QWORD,$/;"	e	file:
S_NOSPLIT	parser.c	/^    S_BYTE, S_DWORD, S_FAR, S_LONG, S_NEAR, S_NOSPLIT, S_QWORD,$/;"	e	file:
S_QWORD	parser.c	/^    S_BYTE, S_DWORD, S_FAR, S_LONG, S_NEAR, S_NOSPLIT, S_QWORD,$/;"	e	file:
S_SHORT	parser.c	/^    S_SHORT, S_STRICT, S_TO, S_TWORD, S_WORD$/;"	e	file:
S_STRICT	parser.c	/^    S_SHORT, S_STRICT, S_TO, S_TWORD, S_WORD$/;"	e	file:
S_TO	parser.c	/^    S_SHORT, S_STRICT, S_TO, S_TWORD, S_WORD$/;"	e	file:
S_TWORD	parser.c	/^    S_SHORT, S_STRICT, S_TO, S_TWORD, S_WORD$/;"	e	file:
S_WORD	parser.c	/^    S_SHORT, S_STRICT, S_TO, S_TWORD, S_WORD$/;"	e	file:
Section	output/outaout.c	/^struct Section {$/;"	s	file:
Section	output/outas86.c	/^struct Section {$/;"	s	file:
Section	output/outbin.c	/^static struct Section {$/;"	s	file:
Section	output/outcoff.c	/^struct Section {$/;"	s	file:
Section	output/outdbg.c	/^struct Section {$/;"	s	file:
Section	output/outelf.c	/^struct Section {$/;"	s	file:
Segment	output/outobj.c	/^static struct Segment {$/;"	s	file:
SegmentHeaderRec	rdoff/rdoff.h	/^struct SegmentHeaderRec {$/;"	s
StackPointer	preproc.c	/^static char *StackPointer = "ebp";$/;"	v	file:
StackSize	preproc.c	/^static int StackSize = 4;$/;"	v	file:
String	output/outcoff.c	/^    char *String;$/;"	m	struct:tagString	file:
Symbol	output/outaout.c	/^struct Symbol {$/;"	s	file:
Symbol	output/outas86.c	/^struct Symbol {$/;"	s	file:
Symbol	output/outcoff.c	/^struct Symbol {$/;"	s	file:
Symbol	output/outelf.c	/^struct Symbol {$/;"	s	file:
Sync	sync.c	/^static struct Sync {$/;"	s	file:
TASM_MACRO_COUNT	macros.c	95;"	d	file:
TEMPEXPRS_DELTA	eval.c	22;"	d	file:
TEMPEXPR_DELTA	eval.c	23;"	d	file:
TEXI2DVI	doc/Makefile	/^TEXI2DVI        = texi2dvi$/;"	m
TEXT_FLAGS	output/outcoff.c	101;"	d	file:
THEADR	output/outobj.c	/^    THEADR = 0x80,              \/* module header *\/$/;"	e	enum:RecordID	file:
TM_ARG	preproc.c	/^    TM_ARG, TM_ELIF, TM_ELSE, TM_ENDIF, TM_IF, TM_IFDEF, TM_IFDIFI,$/;"	e	file:
TM_ELIF	preproc.c	/^    TM_ARG, TM_ELIF, TM_ELSE, TM_ENDIF, TM_IF, TM_IFDEF, TM_IFDIFI,$/;"	e	file:
TM_ELSE	preproc.c	/^    TM_ARG, TM_ELIF, TM_ELSE, TM_ENDIF, TM_IF, TM_IFDEF, TM_IFDIFI,$/;"	e	file:
TM_ENDIF	preproc.c	/^    TM_ARG, TM_ELIF, TM_ELSE, TM_ENDIF, TM_IF, TM_IFDEF, TM_IFDIFI,$/;"	e	file:
TM_IF	preproc.c	/^    TM_ARG, TM_ELIF, TM_ELSE, TM_ENDIF, TM_IF, TM_IFDEF, TM_IFDIFI,$/;"	e	file:
TM_IFDEF	preproc.c	/^    TM_ARG, TM_ELIF, TM_ELSE, TM_ENDIF, TM_IF, TM_IFDEF, TM_IFDIFI,$/;"	e	file:
TM_IFDIFI	preproc.c	/^    TM_ARG, TM_ELIF, TM_ELSE, TM_ENDIF, TM_IF, TM_IFDEF, TM_IFDIFI,$/;"	e	file:
TM_IFNDEF	preproc.c	/^    TM_IFNDEF, TM_INCLUDE, TM_LOCAL$/;"	e	file:
TM_INCLUDE	preproc.c	/^    TM_IFNDEF, TM_INCLUDE, TM_LOCAL$/;"	e	file:
TM_LOCAL	preproc.c	/^    TM_IFNDEF, TM_INCLUDE, TM_LOCAL$/;"	e	file:
TO	nasm.h	384;"	d
TOKEN_BASE	nasm.h	/^    TOKEN_HERE, TOKEN_BASE,     \/* $ and $$ *\/$/;"	e
TOKEN_BLOCKSIZE	preproc.c	403;"	d	file:
TOKEN_DBL_AND	nasm.h	/^    TOKEN_DBL_AND, TOKEN_DBL_OR, TOKEN_DBL_XOR, \/* &&, || and ^^ *\/$/;"	e
TOKEN_DBL_OR	nasm.h	/^    TOKEN_DBL_AND, TOKEN_DBL_OR, TOKEN_DBL_XOR, \/* &&, || and ^^ *\/$/;"	e
TOKEN_DBL_XOR	nasm.h	/^    TOKEN_DBL_AND, TOKEN_DBL_OR, TOKEN_DBL_XOR, \/* &&, || and ^^ *\/$/;"	e
TOKEN_EOS	nasm.h	/^    TOKEN_EOS = 0,              \/* end of string *\/$/;"	e
TOKEN_EQ	nasm.h	/^    TOKEN_EQ = '=', TOKEN_GT = '>', TOKEN_LT = '<',     \/* aliases *\/$/;"	e
TOKEN_ERRNUM	nasm.h	/^    TOKEN_ERRNUM,               \/* numeric constant with error in *\/$/;"	e
TOKEN_FLOAT	nasm.h	/^    TOKEN_FLOAT                 \/* floating-point constant *\/$/;"	e
TOKEN_GE	nasm.h	/^    TOKEN_GE, TOKEN_LE, TOKEN_NE,       \/* >=, <= and <> (!= is same as <>) *\/$/;"	e
TOKEN_GT	nasm.h	/^    TOKEN_EQ = '=', TOKEN_GT = '>', TOKEN_LT = '<',     \/* aliases *\/$/;"	e
TOKEN_HERE	nasm.h	/^    TOKEN_HERE, TOKEN_BASE,     \/* $ and $$ *\/$/;"	e
TOKEN_ID	nasm.h	/^    TOKEN_ID = 256, TOKEN_NUM, TOKEN_REG, TOKEN_INSN,   \/* major token types *\/$/;"	e
TOKEN_INSN	nasm.h	/^    TOKEN_ID = 256, TOKEN_NUM, TOKEN_REG, TOKEN_INSN,   \/* major token types *\/$/;"	e
TOKEN_INVALID	nasm.h	/^    TOKEN_INVALID = -1,         \/* a placeholder value *\/$/;"	e
TOKEN_LE	nasm.h	/^    TOKEN_GE, TOKEN_LE, TOKEN_NE,       \/* >=, <= and <> (!= is same as <>) *\/$/;"	e
TOKEN_LT	nasm.h	/^    TOKEN_EQ = '=', TOKEN_GT = '>', TOKEN_LT = '<',     \/* aliases *\/$/;"	e
TOKEN_NE	nasm.h	/^    TOKEN_GE, TOKEN_LE, TOKEN_NE,       \/* >=, <= and <> (!= is same as <>) *\/$/;"	e
TOKEN_NUM	nasm.h	/^    TOKEN_ID = 256, TOKEN_NUM, TOKEN_REG, TOKEN_INSN,   \/* major token types *\/$/;"	e
TOKEN_PREFIX	nasm.h	/^    TOKEN_PREFIX,               \/* A32, O16, LOCK, REPNZ, TIMES, etc *\/$/;"	e
TOKEN_REG	nasm.h	/^    TOKEN_ID = 256, TOKEN_NUM, TOKEN_REG, TOKEN_INSN,   \/* major token types *\/$/;"	e
TOKEN_SDIV	nasm.h	/^    TOKEN_SDIV, TOKEN_SMOD,     \/* \/\/ and %% *\/$/;"	e
TOKEN_SEG	nasm.h	/^    TOKEN_SEG, TOKEN_WRT,       \/* SEG and WRT *\/$/;"	e
TOKEN_SHL	nasm.h	/^    TOKEN_SHL, TOKEN_SHR,       \/* << and >> *\/$/;"	e
TOKEN_SHR	nasm.h	/^    TOKEN_SHL, TOKEN_SHR,       \/* << and >> *\/$/;"	e
TOKEN_SMOD	nasm.h	/^    TOKEN_SDIV, TOKEN_SMOD,     \/* \/\/ and %% *\/$/;"	e
TOKEN_SPECIAL	nasm.h	/^    TOKEN_SPECIAL,              \/* BYTE, WORD, DWORD, FAR, NEAR, etc *\/$/;"	e
TOKEN_WRT	nasm.h	/^    TOKEN_SEG, TOKEN_WRT,       \/* SEG and WRT *\/$/;"	e
TOK_COMMENT	preproc.c	/^    TOK_WHITESPACE = 1, TOK_COMMENT, TOK_ID, TOK_PREPROC_ID, TOK_STRING,$/;"	e	file:
TOK_ID	preproc.c	/^    TOK_WHITESPACE = 1, TOK_COMMENT, TOK_ID, TOK_PREPROC_ID, TOK_STRING,$/;"	e	file:
TOK_INTERNAL_STRING	preproc.c	/^    TOK_INTERNAL_STRING$/;"	e	file:
TOK_NUMBER	preproc.c	/^    TOK_NUMBER, TOK_SMAC_END, TOK_OTHER, TOK_SMAC_PARAM,$/;"	e	file:
TOK_OTHER	preproc.c	/^    TOK_NUMBER, TOK_SMAC_END, TOK_OTHER, TOK_SMAC_PARAM,$/;"	e	file:
TOK_PREPROC_ID	preproc.c	/^    TOK_WHITESPACE = 1, TOK_COMMENT, TOK_ID, TOK_PREPROC_ID, TOK_STRING,$/;"	e	file:
TOK_SMAC_END	preproc.c	/^    TOK_NUMBER, TOK_SMAC_END, TOK_OTHER, TOK_SMAC_PARAM,$/;"	e	file:
TOK_SMAC_PARAM	preproc.c	/^    TOK_NUMBER, TOK_SMAC_END, TOK_OTHER, TOK_SMAC_PARAM,$/;"	e	file:
TOK_STRING	preproc.c	/^    TOK_WHITESPACE = 1, TOK_COMMENT, TOK_ID, TOK_PREPROC_ID, TOK_STRING,$/;"	e	file:
TOK_WHITESPACE	preproc.c	/^    TOK_WHITESPACE = 1, TOK_COMMENT, TOK_ID, TOK_PREPROC_ID, TOK_STRING,$/;"	e	file:
TRUE	float.c	17;"	d	file:
TRUE	nasm.h	25;"	d
TRUE	rdoff/rdlar.c	/^typedef enum { FALSE, TRUE } bool;$/;"	e	file:
TYM_ELEMENTS	nasm.h	822;"	d
TYM_TYPE	nasm.h	821;"	d
TYPE_DEFINED	output/outbin.c	72;"	d	file:
TYPE_MASK	labels.c	51;"	d	file:
TYPE_NOBITS	output/outbin.c	74;"	d	file:
TYPE_PROGBITS	output/outbin.c	73;"	d	file:
TYS_ELEMENTS	nasm.h	824;"	d
TY_BYTE	nasm.h	810;"	d
TY_COMMON	nasm.h	816;"	d
TY_DWORD	nasm.h	812;"	d
TY_EQU	nasm.h	819;"	d
TY_EXTERN	nasm.h	818;"	d
TY_FLOAT	nasm.h	813;"	d
TY_LABEL	nasm.h	809;"	d
TY_QWORD	nasm.h	814;"	d
TY_SEG	nasm.h	817;"	d
TY_STABSSYMLIN	output/outelf.c	151;"	d	file:
TY_TBYTE	nasm.h	815;"	d
TY_UNKNOWN	nasm.h	808;"	d
TY_WORD	nasm.h	811;"	d
TestElse	test/changed.asm	/^TestElse 1$/;"	l
This_label_is_256_characters_long__There_used_to_be_a_bug_in_stdscan_which_made_it_crash_when_it_did_a_keyword_search_on_any_label_longer_than_255_characters__Now_anything_longer_than_MAX_KEYWORD_is_always_a_symbol__It_will_not_even_try_a_keyword_search___	test/changed.asm	/^This_label_is_256_characters_long__There_used_to_be_a_bug_in_stdscan_which_made_it_crash_when_it_did_a_keyword_search_on_any_label_longer_than_255_characters__Now_anything_longer_than_MAX_KEYWORD_is_always_a_symbol__It_will_not_even_try_a_keyword_search___$/;"	l
Token	preproc.c	/^struct Token {$/;"	s	file:
Token	preproc.c	/^typedef struct Token Token;$/;"	t	file:
UI16	rdoff/ldsegs.h	7;"	d
UNITY	nasm.h	431;"	d
VALIGN_DEFINED	output/outbin.c	70;"	d	file:
VERBOSE_WARNINGS	output/outrdf.c	26;"	d	file:
VERBOSE_WARNINGS	output/outrdf2.c	25;"	d	file:
VFOLLOWS_DEFINED	output/outbin.c	71;"	d	file:
VSTART_DEFINED	output/outbin.c	69;"	d	file:
WRITECHAR	nasmlib.h	110;"	d
WRITELONG	nasmlib.h	121;"	d
WRITESHORT	nasmlib.h	115;"	d
WRITE_STAB	output/outelf.c	1354;"	d	file:
X	Makefile	/^X               = $/;"	m
X	rdoff/Makefile	/^X               = $/;"	m
XMMREG	nasm.h	399;"	d
_COLLECTN_H	rdoff/collectn.h	10;"	d
_ENDIANNESS	rdoff/rdflib.c	57;"	d	file:
_ENDIANNESS	rdoff/rdlar.c	41;"	d	file:
_RDFLOAD_H	rdoff/rdfload.h	13;"	d
_RDLAR_H	rdoff/rdlar.h	6;"	d
_RDOFF_H	rdoff/rdoff.h	15;"	d
_argv	rdoff/rdflib.c	/^char **_argv;$/;"	v
_argv	rdoff/rdlar.c	/^char **_argv = NULL;$/;"	v
_asmstr	test/aoutso.asm	/^_asmstr	  db 'hello, world', 0	; [2]$/;"	d
_asmstr	test/aouttest.asm	/^_asmstr	  db 'hello, world', 0	; [2]$/;"	d
_asmstr	test/cofftest.asm	/^_asmstr	  db 'hello, world', 0	; [2]$/;"	d
_bsssym	test/objtest.asm	/^_bsssym	  resw 64		; [12]$/;"	l
_error	preproc.c	/^static efunc _error;            \/* Pointer to client-provided error reporting function *\/$/;"	v	file:
_fardata	rdoff/test/rdftest2.asm	/^_fardata:	dw _term	; [4]$/;"	d
_farproc	rdoff/test/rdftest2.asm	/^_farproc:$/;"	l
_function	test/objtest.asm	/^_function push bp$/;"	l
_greet	test/aoutso.asm	/^_greet	  push ebx		; we'll use EBX for GOT, so save it$/;"	l
_greet	test/aouttest.asm	/^_greet	  mov eax,[_integer]	; [14]$/;"	l
_greet	test/cofftest.asm	/^_greet	  mov eax,[_integer]	; [14]$/;"	l
_integer	test/aoutso.asm	/^_integer  resd 1		; [3]$/;"	l
_integer	test/aouttest.asm	/^_integer  resd 1		; [3]$/;"	l
_integer	test/cofftest.asm	/^_integer  resd 1		; [3]$/;"	l
_localref	rdoff/test/rdftest2.asm	/^_localref:	dd _farproc	; [2]$/;"	d
_lrotate	test/aoutso.asm	/^_lrotate:			; [1]$/;"	l
_lrotate	test/aouttest.asm	/^_lrotate:			; [1]$/;"	l
_lrotate	test/cofftest.asm	/^_lrotate:			; [1]$/;"	l
_main	rdoff/test/rdfseg.asm	/^_main:$/;"	l
_main	rdoff/test/rdftest1.asm	/^_main:$/;"	l
_main	rdoff/test/rdtmain.asm	/^_main:$/;"	l
_main	rdoff/test/testlib.asm	/^_main:$/;"	l
_main	test/inc2.asm	/^_main:	  mov dx,message$/;"	l
_message	rdoff/test/rdfseg.asm	/^_message:	db 'Hello, World', 10, 13, 0$/;"	d
_message	rdoff/test/rdtlib.asm	/^_message:	db 'hello',0/;"	d
_printfstr	test/aoutso.asm	/^_printfstr db "integer==%d, localint==%d, commvar=%d"$/;"	d
_printfstr	test/aouttest.asm	/^_printfstr db "integer==%d, localint==%d, commvar=%d"$/;"	d
_printfstr	test/cofftest.asm	/^_printfstr db "integer==%d, localint==%d, commvar=%d"$/;"	d
_puts	rdoff/test/rdfseg2.asm	/^_puts:$/;"	l
_selfptr	test/aoutso.asm	/^_selfptr  dd _selfptr wrt ..sym	; [16]$/;"	d
_selfptr	test/aouttest.asm	/^_selfptr  dd _selfptr		; [16]$/;"	d
_selfptr	test/cofftest.asm	/^_selfptr  dd _selfptr		; [16]$/;"	d
_selfptr	test/objtest.asm	/^_selfptr  dw _selfptr, seg _selfptr ; [8] [15]$/;"	d
_selfptr2	test/objtest.asm	/^_selfptr2 dw _selfptr2 wrt mydata, mydata ; [11] [13]$/;"	d
_start	test/lnxhello.asm	/^_start:$/;"	l
_strcmp	rdoff/test/rdtlib.asm	/^_strcmp:$/;"	l
_term	rdoff/test/rdftest1.asm	/^_term:	xor ax,ax		; => 66 31 c0$/;"	l
_test1proc	rdoff/test/rdftest1.asm	/^_test1proc:$/;"	l
_textptr	test/aoutso.asm	/^_textptr  dd _greet wrt ..sym	; [15]$/;"	d
_textptr	test/aouttest.asm	/^_textptr  dd _greet		; [15]$/;"	d
_textptr	test/cofftest.asm	/^_textptr  dd _greet		; [15]$/;"	d
abs_offset	nasm.c	/^long abs_offset;                \/* ABSOLUTE offset *\/$/;"	v
abs_seg	nasm.c	/^long abs_seg;                   \/* ABSOLUTE segment basis *\/$/;"	v
add_item	doc/rdsrc.pl	/^sub add_item {$/;"	s
add_library	rdoff/ldrdf.c	/^void add_library(const char *name)$/;"	f
add_module	rdoff/rdlar.c	/^int add_module(FILE * libfp, const char *fname, char *modname)$/;"	f
add_reloc	output/outbin.c	/^static void add_reloc(struct Section *s, long bytes, long secref,$/;"	f	file:
add_sectname	output/outelf.c	/^static void add_sectname(char *firsthalf, char *secondhalf)$/;"	f	file:
add_seglocation	rdoff/segtab.c	/^void add_seglocation(segtab * root, int localseg, int destseg, long offset)$/;"	f
add_sync	sync.c	/^void add_sync(unsigned long pos, unsigned long length)$/;"	f
add_vectors	eval.c	/^static expr *add_vectors(expr * p, expr * q)$/;"	f	file:
addend	output/outieee.c	/^    long addend;$/;"	m	struct:ieeeFixupp	file:
addidx	doc/rdsrc.pl	/^sub addidx {$/;"	s
addr_size	nasm.h	/^    int addr_size;              \/* 0 means default; 16; 32 *\/$/;"	m
address	output/outaout.c	/^    long address;               \/* relative to _start_ of section *\/$/;"	m	struct:Reloc	file:
address	output/outcoff.c	/^    long address;               \/* relative to _start_ of section *\/$/;"	m	struct:Reloc	file:
address	output/outelf.c	/^    long address;               \/* relative to _start_ of section *\/$/;"	m	struct:Reloc	file:
addtotemp	eval.c	/^static void addtotemp(long type, long value)$/;"	f	file:
admin	labels.c	/^    } admin;$/;"	m	union:label	file:
align	output/outbin.c	/^    unsigned long align;        \/* section alignment *\/$/;"	m	struct:Section	file:
align	output/outelf.c	/^    int align;                  \/* alignment: power of two *\/$/;"	m	struct:Section	file:
align	output/outieee.c	/^    long align;                 \/* can be SEG_ABS + absolute addr *\/$/;"	m	struct:ieeeSection	file:
align	output/outobj.c	/^    long align;                 \/* can be SEG_ABS + absolute addr *\/$/;"	m	struct:Segment	file:
align	rdoff/ldrdf.c	/^    int align;$/;"	m	struct:ldrdfoptions	file:
align	rdoff/rdf2bin.c	/^int align = 16;$/;"	v
align	rdoff/rdf2ihx.c	/^int align = 16;$/;"	v
align	rdoff/rdlar.c	/^    bool align;$/;"	m	file:
align	rdoff/rdoff.h	/^    uint16 align;               \/* alignment (power of two) *\/$/;"	m	struct:CommonRec
align_str	output/outelf.c	/^static const char align_str[SEG_ALIGN] = "";    \/* ANSI will pad this with 0s *\/$/;"	v	file:
alldeps	mkdep.pl	/^sub alldeps($) {$/;"	s
allocnewseg	rdoff/ldrdf.c	/^int allocnewseg(uint16 type, uint16 reserved)$/;"	f
amount	output/outrdf.c	/^    long amount;                \/* number of bytes BSS to reserve *\/$/;"	m	struct:BSSRec	file:
amount	rdoff/rdoff.h	/^    long amount;                \/* number of bytes BSS to reserve *\/$/;"	m	struct:BSSRec
any_extrastdmac	preproc.c	/^int any_extrastdmac;$/;"	v
any_segs	output/outieee.c	/^static int any_segs;$/;"	v	file:
any_segs	output/outobj.c	/^static int any_segs;$/;"	v	file:
aout_add_gotoff_reloc	output/outaout.c	/^static long aout_add_gotoff_reloc(struct Section *sect, long segment,$/;"	f	file:
aout_add_gsym_reloc	output/outaout.c	/^static long aout_add_gsym_reloc(struct Section *sect,$/;"	f	file:
aout_add_reloc	output/outaout.c	/^static void aout_add_reloc(struct Section *sect, long segment,$/;"	f	file:
aout_cleanup	output/outaout.c	/^static void aout_cleanup(int debuginfo)$/;"	f	file:
aout_deflabel	output/outaout.c	/^static void aout_deflabel(char *name, long segment, long offset,$/;"	f	file:
aout_directive	output/outaout.c	/^static int aout_directive(char *directive, char *value, int pass)$/;"	f	file:
aout_filename	output/outaout.c	/^static void aout_filename(char *inname, char *outname, efunc error)$/;"	f	file:
aout_fixup_relocs	output/outaout.c	/^static void aout_fixup_relocs(struct Section *sect)$/;"	f	file:
aout_got_sect	output/outaout.c	/^static long aout_got_sect, aout_plt_sect;$/;"	v	file:
aout_gotoff_sect	output/outaout.c	/^static long aout_gotpc_sect, aout_gotoff_sect;$/;"	v	file:
aout_gotpc_sect	output/outaout.c	/^static long aout_gotpc_sect, aout_gotoff_sect;$/;"	v	file:
aout_init	output/outaout.c	/^static void aout_init(FILE * fp, efunc errfunc, ldfunc ldef, evalfunc eval)$/;"	f	file:
aout_out	output/outaout.c	/^static void aout_out(long segto, const void *data, unsigned long type,$/;"	f	file:
aout_pad_sections	output/outaout.c	/^static void aout_pad_sections(void)$/;"	f	file:
aout_plt_sect	output/outaout.c	/^static long aout_got_sect, aout_plt_sect;$/;"	v	file:
aout_sect_write	output/outaout.c	/^static void aout_sect_write(struct Section *sect,$/;"	f	file:
aout_section_names	output/outaout.c	/^static long aout_section_names(char *name, int pass, int *bits)$/;"	f	file:
aout_segbase	output/outaout.c	/^static long aout_segbase(long segment)$/;"	f	file:
aout_set_info	output/outaout.c	/^static int aout_set_info(enum geninfo type, char **val)$/;"	f	file:
aout_stdmac	output/outaout.c	/^static const char *aout_stdmac[] = {$/;"	v	file:
aout_sym_sect	output/outaout.c	/^static long aout_sym_sect;$/;"	v	file:
aout_write	output/outaout.c	/^static void aout_write(void)$/;"	f	file:
aout_write_relocs	output/outaout.c	/^static void aout_write_relocs(struct Reloc *r)$/;"	f	file:
aout_write_syms	output/outaout.c	/^static void aout_write_syms(void)$/;"	f	file:
aoutb_init	output/outaout.c	/^static void aoutb_init(FILE * fp, efunc errfunc, ldfunc ldef,$/;"	f	file:
aoutfp	output/outaout.c	/^static FILE *aoutfp;$/;"	v	file:
aoutg_init	output/outaout.c	/^static void aoutg_init(FILE * fp, efunc errfunc, ldfunc ldef,$/;"	f	file:
arg_example	test/changed.asm	/^arg_example arg$/;"	l
arg_example2	test/changed.asm	/^arg_example2 arg2$/;"	l
arrhead	output/outieee.c	/^} *arrhead, **arrtail;$/;"	v	file:
arrhead	output/outobj.c	/^} *arrhead, **arrtail;$/;"	v	file:
arrindex	output/outieee.c	/^static int arrindex;$/;"	v	file:
arrindex	output/outobj.c	/^static int arrindex;$/;"	v	file:
arrtail	output/outieee.c	/^} *arrhead, **arrtail;$/;"	v	file:
arrtail	output/outobj.c	/^} *arrhead, **arrtail;$/;"	v	file:
as	lcc/lin-aout.c	/^char *as[] = { NASMPATH, "-a", "-faout", "-o", "$3", "$1", "$2", 0 };$/;"	v
as	lcc/lin-elf.c	/^char *as[] = { NASMPATH, "-a", "-felf", "-o", "$3", "$1", "$2", 0 };$/;"	v
as86_add_piece	output/outas86.c	/^static void as86_add_piece(struct Section *sect, int type, long offset,$/;"	f	file:
as86_add_string	output/outas86.c	/^static int as86_add_string(char *name)$/;"	f	file:
as86_cleanup	output/outas86.c	/^static void as86_cleanup(int debuginfo)$/;"	f	file:
as86_deflabel	output/outas86.c	/^static void as86_deflabel(char *name, long segment, long offset,$/;"	f	file:
as86_directive	output/outas86.c	/^static int as86_directive(char *directive, char *value, int pass)$/;"	f	file:
as86_filename	output/outas86.c	/^static void as86_filename(char *inname, char *outname, efunc error)$/;"	f	file:
as86_init	output/outas86.c	/^static void as86_init(FILE * fp, efunc errfunc, ldfunc ldef, evalfunc eval)$/;"	f	file:
as86_linenumber	output/outas86.c	/^void as86_linenumber(char *name, long segment, long offset, int is_main,$/;"	f
as86_module	output/outas86.c	/^static char as86_module[FILENAME_MAX];$/;"	v	file:
as86_out	output/outas86.c	/^static void as86_out(long segto, const void *data, unsigned long type,$/;"	f	file:
as86_reloc_size	output/outas86.c	/^static int as86_reloc_size;$/;"	v	file:
as86_sect_write	output/outas86.c	/^static void as86_sect_write(struct Section *sect,$/;"	f	file:
as86_section_names	output/outas86.c	/^static long as86_section_names(char *name, int pass, int *bits)$/;"	f	file:
as86_segbase	output/outas86.c	/^static long as86_segbase(long segment)$/;"	f	file:
as86_set_info	output/outas86.c	/^static int as86_set_info(enum geninfo type, char **val)$/;"	f	file:
as86_set_rsize	output/outas86.c	/^static void as86_set_rsize(int size)$/;"	f	file:
as86_stdmac	output/outas86.c	/^static const char *as86_stdmac[] = {$/;"	v	file:
as86_write	output/outas86.c	/^static void as86_write(void)$/;"	f	file:
as86_write_section	output/outas86.c	/^static void as86_write_section(struct Section *sect, int index)$/;"	f	file:
as86fp	output/outas86.c	/^static FILE *as86fp;$/;"	v	file:
asciz1	test/multisection.asm	/^asciz1: db "This is string 2", 0$/;"	d
asmstr	test/elfso.asm	/^asmstr	  db 'hello, world', 0	; [2]$/;"	d
asmstr	test/elftest.asm	/^asmstr	  db 'hello, world', 0	; [2]$/;"	d
assemble	assemble.c	/^long assemble(long segment, long offset, int bits, unsigned long cp,$/;"	f
assemble_file	nasm.c	/^static void assemble_file(char *fname)$/;"	f	file:
asym	output/outaout.c	/^    struct Symbol *gsyms, *asym;$/;"	m	struct:Section	file:
b	nasmlib.h	/^        } b;$/;"	m	union:RAA::RAA_UNION
b	rdoff/rdfload.h	/^    unsigned char *t, *d, *b;   \/* text, data, and bss segments *\/$/;"	m	struct:RDFModuleStruct
b	rdoff/rdoff.h	/^    struct BSSRec b;            \/* type == 5 *\/$/;"	m	union:RDFHeaderRec
b1	test/absolute.asm	/^b1:	resb 1$/;"	l
b2	test/absolute.asm	/^b2:	resd 6$/;"	l
back	output/outobj.c	/^    ObjRecord *back;            \/* Previous part of this record     *\/$/;"	m	struct:ObjRecord	file:
bar	test/a32offs.asm	/^bar:	loop bar, ecx$/;"	l
base	nasm.h	/^    int base;$/;"	m	struct:eval_hints
basereg	nasm.h	/^    int basereg, indexreg, scale;       \/* registers and scale involved *\/$/;"	m
basetype	output/outieee.c	/^    int basetype;$/;"	m	struct:Array	file:
basetype	output/outobj.c	/^    int basetype;$/;"	m	struct:Array	file:
baz	test/a32offs.asm	/^baz:	a16 loop baz$/;"	l
bbexit	lcc/lin-aout.c	/^static char *bbexit = LCCDIR "bbexit.o";$/;"	v	file:
bbexit	lcc/lin-elf.c	/^static char *bbexit = LCCDIR "bbexit.o";$/;"	v	file:
begintemp	eval.c	/^static void begintemp(void)$/;"	f	file:
bexpr	eval.c	/^static expr *(*bexpr) (int);$/;"	v	file:
bin_assign_attributes	output/outbin.c	/^static void bin_assign_attributes(struct Section *sec, char *astring)$/;"	f	file:
bin_cleanup	output/outbin.c	/^static void bin_cleanup(int debuginfo)$/;"	f	file:
bin_define_section_labels	output/outbin.c	/^static void bin_define_section_labels()$/;"	f	file:
bin_deflabel	output/outbin.c	/^static void bin_deflabel(char *name, long segment, long offset,$/;"	f	file:
bin_directive	output/outbin.c	/^static int bin_directive(char *directive, char *args, int pass)$/;"	f	file:
bin_filename	output/outbin.c	/^static void bin_filename(char *inname, char *outname, efunc error)$/;"	f	file:
bin_get_ofmt	output/outbin.c	/^struct ofmt *bin_get_ofmt()$/;"	f
bin_init	output/outbin.c	/^static void bin_init(FILE * afp, efunc errfunc, ldfunc ldef, evalfunc eval)$/;"	f	file:
bin_label	output/outbin.c	/^static struct bin_label {$/;"	s	file:
bin_out	output/outbin.c	/^static void bin_out(long segto, const void *data, unsigned long type,$/;"	f	file:
bin_read_attribute	output/outbin.c	/^static int bin_read_attribute(char **line, int *attribute,$/;"	f	file:
bin_secname	output/outbin.c	/^static long bin_secname(char *name, int pass, int *bits)$/;"	f	file:
bin_segbase	output/outbin.c	/^static long bin_segbase(long segment)$/;"	f	file:
bin_set_info	output/outbin.c	/^static int bin_set_info(enum geninfo type, char **val)$/;"	f	file:
bin_stdmac	output/outbin.c	/^static const char *bin_stdmac[] = {$/;"	v	file:
bindings	lcc/bind.c	/^Binding bindings[] = {$/;"	v
bindir	Makefile	/^bindir		= ${exec_prefix}\/bin$/;"	m
bindir	doc/Makefile	/^bindir		= ${exec_prefix}\/bin$/;"	m
bindir	rdoff/Makefile	/^bindir		= ${exec_prefix}\/bin$/;"	m
bits	test/multisection.asm	/^bits 16$/;"	l
blocks	preproc.c	/^static Blocks blocks = { NULL, NULL };$/;"	v	file:
bool	rdoff/rdlar.c	/^typedef enum { FALSE, TRUE } bool;$/;"	t	file:
bool	rdoff/rdoff.h	/^typedef unsigned int bool;$/;"	t
borland_debug_arr	output/outobj.c	/^static struct dfmt *borland_debug_arr[3] = {$/;"	v	file:
borland_debug_form	output/outobj.c	/^static struct dfmt borland_debug_form = {$/;"	v	file:
bsd	output/outaout.c	/^static int bsd;$/;"	v	file:
bsi	nasmlib.c	/^int bsi(char *string, const char **array, int size)$/;"	f
bss_length	rdoff/ldrdf.c	/^long bss_length;$/;"	v
bss_reloc	rdoff/ldrdf.c	/^    long bss_reloc;$/;"	m	struct:modulenode	file:
bss_sym	test/bintest.asm	/^bss_sym	  resb 1		; [3]$/;"	l
bssindex	output/outas86.c	/^static long bssindex;$/;"	v	file:
bsslen	output/outas86.c	/^static unsigned long bsslen;$/;"	v	file:
bsslength	output/outrdf.c	/^static long bsslength;$/;"	v	file:
bsslength	output/outrdf2.c	/^static long bsslength;$/;"	v	file:
bssptr	test/bintest.asm	/^bssptr	  dw bss_sym		; [2] [11]$/;"	d
bssrel	rdoff/rdfload.h	/^    long bssrel;$/;"	m	struct:RDFModuleStruct
bsym	output/outaout.c	/^static struct RAA *bsym;$/;"	v	file:
bsym	output/outas86.c	/^static struct RAA *bsym;$/;"	v	file:
bsym	output/outcoff.c	/^static struct RAA *bsym, *symval;$/;"	v	file:
bsym	output/outelf.c	/^static struct RAA *bsym;$/;"	v	file:
buf	output/outobj.c	/^    unsigned char buf[RECORD_MAX + 3];$/;"	m	struct:ObjRecord	file:
buf	rdoff/rdoff.h	/^    memorybuffer *buf;          \/* buffer containing header records *\/$/;"	m
buffer	output/outrdf.c	/^    char buffer[BUF_BLOCK_LEN];$/;"	m	struct:memorybuffer	file:
buffer	rdoff/rdoff.h	/^    byte buffer[BUF_BLOCK_LEN];$/;"	m	struct:memorybuffer
byte	rdoff/rdoff.h	/^typedef unsigned char byte;$/;"	t
bytes	assemble.c	/^    int bytes;                  \/* # of bytes of offset needed *\/$/;"	m	file:
bytes	output/outaout.c	/^    int bytes;                  \/* 2 or 4 *\/$/;"	m	struct:Reloc	file:
bytes	output/outas86.c	/^    long bytes;                 \/* size of reloc or of absolute data *\/$/;"	m	struct:Piece	file:
bytes	output/outbin.c	/^    long bytes;$/;"	m	struct:Reloc	file:
c	rdoff/rdoff.h	/^    struct CommonRec c;         \/* type == 10 *\/$/;"	m	union:RDFHeaderRec
c_A	preproc.c	/^    c_A, c_AE, c_B, c_BE, c_C, c_CXZ, c_E, c_ECXZ, c_G, c_GE, c_L, c_LE,$/;"	e	file:
c_AE	preproc.c	/^    c_A, c_AE, c_B, c_BE, c_C, c_CXZ, c_E, c_ECXZ, c_G, c_GE, c_L, c_LE,$/;"	e	file:
c_B	preproc.c	/^    c_A, c_AE, c_B, c_BE, c_C, c_CXZ, c_E, c_ECXZ, c_G, c_GE, c_L, c_LE,$/;"	e	file:
c_BE	preproc.c	/^    c_A, c_AE, c_B, c_BE, c_C, c_CXZ, c_E, c_ECXZ, c_G, c_GE, c_L, c_LE,$/;"	e	file:
c_C	preproc.c	/^    c_A, c_AE, c_B, c_BE, c_C, c_CXZ, c_E, c_ECXZ, c_G, c_GE, c_L, c_LE,$/;"	e	file:
c_CXZ	preproc.c	/^    c_A, c_AE, c_B, c_BE, c_C, c_CXZ, c_E, c_ECXZ, c_G, c_GE, c_L, c_LE,$/;"	e	file:
c_E	preproc.c	/^    c_A, c_AE, c_B, c_BE, c_C, c_CXZ, c_E, c_ECXZ, c_G, c_GE, c_L, c_LE,$/;"	e	file:
c_ECXZ	preproc.c	/^    c_A, c_AE, c_B, c_BE, c_C, c_CXZ, c_E, c_ECXZ, c_G, c_GE, c_L, c_LE,$/;"	e	file:
c_G	preproc.c	/^    c_A, c_AE, c_B, c_BE, c_C, c_CXZ, c_E, c_ECXZ, c_G, c_GE, c_L, c_LE,$/;"	e	file:
c_GE	preproc.c	/^    c_A, c_AE, c_B, c_BE, c_C, c_CXZ, c_E, c_ECXZ, c_G, c_GE, c_L, c_LE,$/;"	e	file:
c_L	preproc.c	/^    c_A, c_AE, c_B, c_BE, c_C, c_CXZ, c_E, c_ECXZ, c_G, c_GE, c_L, c_LE,$/;"	e	file:
c_LE	preproc.c	/^    c_A, c_AE, c_B, c_BE, c_C, c_CXZ, c_E, c_ECXZ, c_G, c_GE, c_L, c_LE,$/;"	e	file:
c_NA	preproc.c	/^    c_NA, c_NAE, c_NB, c_NBE, c_NC, c_NE, c_NG, c_NGE, c_NL, c_NLE, c_NO,$/;"	e	file:
c_NAE	preproc.c	/^    c_NA, c_NAE, c_NB, c_NBE, c_NC, c_NE, c_NG, c_NGE, c_NL, c_NLE, c_NO,$/;"	e	file:
c_NB	preproc.c	/^    c_NA, c_NAE, c_NB, c_NBE, c_NC, c_NE, c_NG, c_NGE, c_NL, c_NLE, c_NO,$/;"	e	file:
c_NBE	preproc.c	/^    c_NA, c_NAE, c_NB, c_NBE, c_NC, c_NE, c_NG, c_NGE, c_NL, c_NLE, c_NO,$/;"	e	file:
c_NC	preproc.c	/^    c_NA, c_NAE, c_NB, c_NBE, c_NC, c_NE, c_NG, c_NGE, c_NL, c_NLE, c_NO,$/;"	e	file:
c_NE	preproc.c	/^    c_NA, c_NAE, c_NB, c_NBE, c_NC, c_NE, c_NG, c_NGE, c_NL, c_NLE, c_NO,$/;"	e	file:
c_NG	preproc.c	/^    c_NA, c_NAE, c_NB, c_NBE, c_NC, c_NE, c_NG, c_NGE, c_NL, c_NLE, c_NO,$/;"	e	file:
c_NGE	preproc.c	/^    c_NA, c_NAE, c_NB, c_NBE, c_NC, c_NE, c_NG, c_NGE, c_NL, c_NLE, c_NO,$/;"	e	file:
c_NL	preproc.c	/^    c_NA, c_NAE, c_NB, c_NBE, c_NC, c_NE, c_NG, c_NGE, c_NL, c_NLE, c_NO,$/;"	e	file:
c_NLE	preproc.c	/^    c_NA, c_NAE, c_NB, c_NBE, c_NC, c_NE, c_NG, c_NGE, c_NL, c_NLE, c_NO,$/;"	e	file:
c_NO	preproc.c	/^    c_NA, c_NAE, c_NB, c_NBE, c_NC, c_NE, c_NG, c_NGE, c_NL, c_NLE, c_NO,$/;"	e	file:
c_NP	preproc.c	/^    c_NP, c_NS, c_NZ, c_O, c_P, c_PE, c_PO, c_S, c_Z$/;"	e	file:
c_NS	preproc.c	/^    c_NP, c_NS, c_NZ, c_O, c_P, c_PE, c_PO, c_S, c_Z$/;"	e	file:
c_NZ	preproc.c	/^    c_NP, c_NS, c_NZ, c_O, c_P, c_PE, c_PO, c_S, c_Z$/;"	e	file:
c_O	preproc.c	/^    c_NP, c_NS, c_NZ, c_O, c_P, c_PE, c_PO, c_S, c_Z$/;"	e	file:
c_P	preproc.c	/^    c_NP, c_NS, c_NZ, c_O, c_P, c_PE, c_PO, c_S, c_Z$/;"	e	file:
c_PE	preproc.c	/^    c_NP, c_NS, c_NZ, c_O, c_P, c_PE, c_PO, c_S, c_Z$/;"	e	file:
c_PO	preproc.c	/^    c_NP, c_NS, c_NZ, c_O, c_P, c_PE, c_PO, c_S, c_Z$/;"	e	file:
c_S	preproc.c	/^    c_NP, c_NS, c_NZ, c_O, c_P, c_PE, c_PO, c_S, c_Z$/;"	e	file:
c_Z	preproc.c	/^    c_NP, c_NS, c_NZ, c_O, c_P, c_PE, c_PO, c_S, c_Z$/;"	e	file:
calcsize	assemble.c	/^static long calcsize(long segment, long offset, int bits,$/;"	f	file:
casesense	preproc.c	/^    int casesense;$/;"	m	struct:MMacro	file:
casesense	preproc.c	/^    int casesense;$/;"	m	struct:SMacro	file:
check_tasm_directive	preproc.c	/^static char *check_tasm_directive(char *line)$/;"	f	file:
checksum	output/outieee.c	/^static int checksum;$/;"	v	file:
child	output/outobj.c	/^    ObjRecord *child;           \/* Associated record below this one *\/$/;"	m	struct:ObjRecord	file:
chsize	assemble.c	/^static int chsize(operand * input, int addrbits)$/;"	f	file:
chunk	preproc.c	/^    void *chunk;$/;"	m	struct:Blocks	file:
cleanup	nasm.h	/^    void (*cleanup) (int debuginfo);$/;"	m	struct:ofmt
cleanup	nasm.h	/^    void (*cleanup) (int);$/;"	m
cleanup	nasm.h	/^    void (*cleanup) (void);$/;"	m
cleanup	nasm.h	/^    void (*cleanup) (void);$/;"	m	struct:dfmt
cleanup_insn	parser.c	/^void cleanup_insn(insn * i)$/;"	f
cleanup_labels	labels.c	/^void cleanup_labels(void)$/;"	f
cmd_cpu	nasm.c	/^static unsigned long cmd_cpu = IF_PLEVEL;       \/* highest level by default *\/$/;"	v	file:
cmd_sb	nasm.c	/^static int sb, cmd_sb = 16;     \/* by default *\/$/;"	v	file:
code	insns.h	/^    const char *code;           \/* the code it assembles to *\/$/;"	m	struct:itemplate
coff_add_reloc	output/outcoff.c	/^static long coff_add_reloc(struct Section *sect, long segment,$/;"	f	file:
coff_cleanup	output/outcoff.c	/^static void coff_cleanup(int debuginfo)$/;"	f	file:
coff_deflabel	output/outcoff.c	/^static void coff_deflabel(char *name, long segment, long offset,$/;"	f	file:
coff_directives	output/outcoff.c	/^static int coff_directives(char *directive, char *value, int pass)$/;"	f	file:
coff_gen_init	output/outcoff.c	/^static void coff_gen_init(FILE * fp, efunc errfunc)$/;"	f	file:
coff_infile	output/outcoff.c	/^static char coff_infile[FILENAME_MAX];$/;"	v	file:
coff_make_section	output/outcoff.c	/^static int coff_make_section(char *name, unsigned long flags)$/;"	f	file:
coff_out	output/outcoff.c	/^static void coff_out(long segto, const void *data, unsigned long type,$/;"	f	file:
coff_sect_write	output/outcoff.c	/^static void coff_sect_write(struct Section *sect,$/;"	f	file:
coff_section_header	output/outcoff.c	/^static void coff_section_header(char *name, long vsize,$/;"	f	file:
coff_section_names	output/outcoff.c	/^static long coff_section_names(char *name, int pass, int *bits)$/;"	f	file:
coff_segbase	output/outcoff.c	/^static long coff_segbase(long segment)$/;"	f	file:
coff_set_info	output/outcoff.c	/^static int coff_set_info(enum geninfo type, char **val)$/;"	f	file:
coff_std_filename	output/outcoff.c	/^static void coff_std_filename(char *inname, char *outname, efunc error)$/;"	f	file:
coff_std_init	output/outcoff.c	/^static void coff_std_init(FILE * fp, efunc errfunc, ldfunc ldef,$/;"	f	file:
coff_stdmac	output/outcoff.c	/^static const char *coff_stdmac[] = {$/;"	v	file:
coff_symbol	output/outcoff.c	/^static void coff_symbol(char *name, long strpos, long value,$/;"	f	file:
coff_win32_filename	output/outcoff.c	/^static void coff_win32_filename(char *inname, char *outname, efunc error)$/;"	f	file:
coff_win32_init	output/outcoff.c	/^static void coff_win32_init(FILE * fp, efunc errfunc,$/;"	f	file:
coff_write	output/outcoff.c	/^static void coff_write(void)$/;"	f	file:
coff_write_relocs	output/outcoff.c	/^static void coff_write_relocs(struct Section *s)$/;"	f	file:
coff_write_symbols	output/outcoff.c	/^static void coff_write_symbols(void)$/;"	f	file:
coffp	output/outcoff.c	/^static FILE *coffp;$/;"	v	file:
collection_init	rdoff/collectn.c	/^void collection_init(Collection * c)$/;"	f
collection_reset	rdoff/collectn.c	/^void collection_reset(Collection * c)$/;"	f
colln	rdoff/collectn.c	/^void **colln(Collection * c, int index)$/;"	f
com	lcc/lin-aout.c	/^char *com[] = { LCCDIR "rcc", "-target=x86\/nasm",$/;"	v
com	lcc/lin-elf.c	/^char *com[] = { LCCDIR "rcc", "-target=x86\/nasm",$/;"	v
combine	output/outieee.c	/^    } combine;$/;"	m	struct:ieeeSection	file:
combine	output/outobj.c	/^    } combine;$/;"	m	struct:Segment	file:
commands	rdoff/rdlar.c	/^const char commands[] = "adnrtx";$/;"	v
committed	output/outobj.c	/^    int committed;              \/* Data size at last boundary       *\/$/;"	m	struct:ObjRecord	file:
commonelem	output/outobj.c	/^    long commonelem;            \/* element size if FAR, else zero *\/$/;"	m	struct:External	file:
commonsize	output/outieee.c	/^    long commonsize;$/;"	m	struct:ieeeExternal	file:
commonsize	output/outobj.c	/^    long commonsize;$/;"	m	struct:External	file:
condition	nasm.h	/^    int condition;              \/* the condition code, if Jcc\/SETcc *\/$/;"	m
conditions	names.c	/^static const char *conditions[] = {     \/* condition code names *\/$/;"	v	file:
conditions	preproc.c	/^static const char *conditions[] = {$/;"	v	file:
conds	preproc.c	/^    Cond *conds;$/;"	m	struct:Include	file:
consttab	rdoff/hash.c	/^const crc32 consttab[] = {$/;"	v
contents	output/outbin.c	/^    struct SAA *contents;$/;"	m	struct:Section	file:
convert_file	mkdep.pl	/^sub convert_file($$) {$/;"	s
copybytes	rdoff/rdflib.c	/^char copybytes(FILE * fp, FILE * fp2, int n)$/;"	f
copybytes	rdoff/rdlar.c	/^char copybytes(FILE * fp, FILE * fp2, int n)$/;"	f
copylong	rdoff/rdflib.c	/^long copylong(FILE * fp, FILE * fp2)$/;"	f
copylong	rdoff/rdlar.c	/^long copylong(FILE * fp, FILE * fp2)$/;"	f
count_mmac_params	preproc.c	/^static void count_mmac_params(Token * t, int *nparam, Token *** params)$/;"	f	file:
cpp	lcc/lin-aout.c	/^char *cpp[] = { LCCDIR "cpp", "-D__STDC__=1",$/;"	v
cpp	lcc/lin-elf.c	/^char *cpp[] = { LCCDIR "cpp", "-D__STDC__=1",$/;"	v
cpu	assemble.c	/^static unsigned long cpu;       \/* cpu level received from nasm.c *\/$/;"	v	file:
cpu	nasm.c	/^static unsigned long cpu = IF_PLEVEL;   \/* passed to insn_size & assemble.c *\/$/;"	v	file:
crc32	rdoff/hash.c	/^typedef unsigned int crc32;$/;"	t	file:
create_library	rdoff/rdlar.c	/^int create_library(char *libname)$/;"	f
create_section	output/outbin.c	/^static struct Section *create_section(char *name)$/;"	f	file:
createok	rdoff/rdlar.c	/^    bool createok;$/;"	m	file:
creg	regdis.c	/^static const int creg    [] = {R_CR0,R_CR1,R_CR2,R_CR3,R_CR4,R_CR5,R_CR6,R_CR7};$/;"	v	file:
cstk	preproc.c	/^static Context *cstk;$/;"	v	file:
ctx_pop	preproc.c	/^static void ctx_pop(void)$/;"	f	file:
current_dfmt	nasm.h	/^    struct dfmt *current_dfmt;$/;"	m	struct:ofmt
current_section	output/outbin.c	/^static long current_section;    \/* only really needed if format_mode = 0 *\/$/;"	v	file:
current_seg	output/outobj.c	/^static struct Segment *current_seg;$/;"	v	file:
currentline	output/outelf.c	/^static int currentline = 0;$/;"	v	file:
currentpos	output/outieee.c	/^    long currentpos;$/;"	m	struct:ieeeSection	file:
currentpos	output/outobj.c	/^    unsigned long currentpos;$/;"	m	struct:Segment	file:
d	rdoff/rdfload.h	/^    unsigned char *t, *d, *b;   \/* text, data, and bss segments *\/$/;"	m	struct:RDFModuleStruct
d	rdoff/rdoff.h	/^    struct DLLRec d;            \/* type == 4 *\/$/;"	m	union:RDFHeaderRec
dCOMPDEF	output/outobj.c	/^    dCOMPDEF = 0xEA             \/* compiler type info *\/$/;"	e	enum:ComentID	file:
dEXTENDED	output/outobj.c	/^    dEXTENDED = 0xA1,           \/* tells that we are using translator-specific extensions *\/$/;"	e	enum:ComentID	file:
dFILNAME	output/outobj.c	/^    dFILNAME = 0xE8,            \/* file name record *\/$/;"	e	enum:ComentID	file:
dLINKPASS	output/outobj.c	/^    dLINKPASS = 0xA2,           \/* link pass 2 marker *\/$/;"	e	enum:ComentID	file:
dOptimize	doc/Makefile	/^PS2PDF          = ps2pdf -dOptimize=true	# Part of GhostScript$/;"	m
dSYM	output/outobj.c	/^    dSYM = 0xE6,                \/* symbol debug record *\/$/;"	e	enum:ComentID	file:
dTYPEDEF	output/outobj.c	/^    dTYPEDEF = 0xE3,            \/* define a type *\/$/;"	e	enum:ComentID	file:
data	labels.c	/^    char data[PERMTS_SIZE];     \/* ... the data block itself *\/$/;"	m	struct:permts	file:
data	nasmlib.h	/^            long data[RAA_BLKSIZE];$/;"	m	struct:RAA::RAA_UNION::RAA_LEAF
data	nasmlib.h	/^            struct RAA *data[RAA_LAYERSIZE];$/;"	m	struct:RAA::RAA_UNION::RAA_BRANCH
data	nasmlib.h	/^    char *data;$/;"	m	struct:SAA
data	output/outaout.c	/^    struct SAA *data;$/;"	m	struct:Section	file:
data	output/outas86.c	/^    struct SAA *data;$/;"	m	struct:Section	file:
data	output/outcoff.c	/^    struct SAA *data;$/;"	m	struct:Section	file:
data	output/outelf.c	/^    struct SAA *data;$/;"	m	struct:Section	file:
data	output/outelf.c	/^    void *data;$/;"	m	struct:ELF_SECTDATA	file:
data	output/outieee.c	/^    struct ieeeObjData *data, *datacurr;$/;"	m	struct:ieeeSection	file:
data	output/outieee.c	/^    unsigned char data[HUNKSIZE];$/;"	m	struct:ieeeObjData	file:
data	rdoff/rdoff.h	/^    byte *data;                 \/* pointer to segment data if it exists in memory *\/$/;"	m	struct:SegmentHeaderRec
data	rdoff/rdoff.h	/^    char data[128];$/;"	m	struct:GenericRec
datacurr	output/outieee.c	/^    struct ieeeObjData *data, *datacurr;$/;"	m	struct:ieeeSection	file:
datalen	output/outas86.c	/^    unsigned long datalen, size, len;$/;"	m	struct:Section	file:
dataptr	test/bintest.asm	/^dataptr	  dw datasym+5		; [2] [10]$/;"	d
datarel	rdoff/rdfload.h	/^    long datarel;$/;"	m	struct:RDFModuleStruct
datasym	test/bintest.asm	/^datasym	  db 'hello  world', 13, 10, '$' ; [2]$/;"	d
date	rdoff/rdlar.h	/^    unsigned long date;         \/* Creation date *\/$/;"	m	struct:rdlm_hdr
db	test/nasmformat.asm	/^db 'This is binary format file'$/;"	l
db	test/nasmformat.asm	/^db 'This is object format file'$/;"	l
db	test/nasmformat.asm	/^db 'This is some other format file'$/;"	l
dbg_cleanup	output/outdbg.c	/^static void dbg_cleanup(int debuginfo)$/;"	f	file:
dbg_deflabel	output/outdbg.c	/^static void dbg_deflabel(char *name, long segment, long offset,$/;"	f	file:
dbg_directive	output/outdbg.c	/^static int dbg_directive(char *directive, char *value, int pass)$/;"	f	file:
dbg_filename	output/outdbg.c	/^static void dbg_filename(char *inname, char *outname, efunc error)$/;"	f	file:
dbg_init	output/outdbg.c	/^static void dbg_init(FILE * fp, efunc errfunc, ldfunc ldef, evalfunc eval)$/;"	f	file:
dbg_out	output/outdbg.c	/^static void dbg_out(long segto, void *data, unsigned long type,$/;"	f	file:
dbg_section_names	output/outdbg.c	/^static long dbg_section_names(char *name, int pass, int *bits)$/;"	f	file:
dbg_segbase	output/outdbg.c	/^static long dbg_segbase(long segment)$/;"	f	file:
dbg_set_info	output/outdbg.c	/^static int dbg_set_info(enum geninfo type, char **val)$/;"	f	file:
dbgbi_cleanup	output/outobj.c	/^static void dbgbi_cleanup(void)$/;"	f	file:
dbgbi_deflabel	output/outobj.c	/^static void dbgbi_deflabel(char *name, long segment,$/;"	f	file:
dbgbi_init	output/outobj.c	/^void dbgbi_init(struct ofmt *of, void *id, FILE * fp, efunc error)$/;"	f
dbgbi_linnum	output/outobj.c	/^static void dbgbi_linnum(const char *lnfname, long lineno, long segto)$/;"	f	file:
dbgbi_output	output/outobj.c	/^static void dbgbi_output(int output_type, void *param)$/;"	f	file:
dbgbi_typevalue	output/outobj.c	/^static void dbgbi_typevalue(long type)$/;"	f	file:
dbgdbg_cleanup	output/outdbg.c	/^static void dbgdbg_cleanup(void)$/;"	f	file:
dbgdbg_define	output/outdbg.c	/^static void dbgdbg_define(const char *type, const char *params)$/;"	f	file:
dbgdbg_deflabel	output/outdbg.c	/^static void dbgdbg_deflabel(char *name, long segment,$/;"	f	file:
dbgdbg_init	output/outdbg.c	/^void dbgdbg_init(struct ofmt *of, void *id, FILE * fp, efunc error)$/;"	f
dbgdbg_linnum	output/outdbg.c	/^static void dbgdbg_linnum(const char *lnfname, long lineno, long segto)$/;"	f	file:
dbgdbg_output	output/outdbg.c	/^static void dbgdbg_output(int output_type, void *param)$/;"	f	file:
dbgdbg_typevalue	output/outdbg.c	/^static void dbgdbg_typevalue(long type)$/;"	f	file:
dbgef	output/outdbg.c	/^efunc dbgef;$/;"	v
dbgf	output/outdbg.c	/^FILE *dbgf;$/;"	v
dbgls_cleanup	output/outieee.c	/^static void dbgls_cleanup(void)$/;"	f	file:
dbgls_deflabel	output/outieee.c	/^static void dbgls_deflabel(char *name, long segment,$/;"	f	file:
dbgls_init	output/outieee.c	/^void dbgls_init(struct ofmt *of, void *id, FILE * fp, efunc error)$/;"	f
dbgls_linnum	output/outieee.c	/^static void dbgls_linnum(const char *lnfname, long lineno, long segto)$/;"	f	file:
dbgls_output	output/outieee.c	/^static void dbgls_output(int output_type, void *param)$/;"	f	file:
dbgls_typevalue	output/outieee.c	/^static void dbgls_typevalue(long type)$/;"	f	file:
dbgsect	output/outdbg.c	/^} *dbgsect;$/;"	v
debug_debug_arr	output/outdbg.c	/^static struct dfmt *debug_debug_arr[3] = {$/;"	v	file:
debug_debug_form	output/outdbg.c	/^static struct dfmt debug_debug_form = {$/;"	v	file:
debug_deflabel	nasm.h	/^    void (*debug_deflabel) (char *name, long segment, long offset,$/;"	m	struct:dfmt
debug_directive	nasm.h	/^    void (*debug_directive) (const char *directive, const char *params);$/;"	m	struct:dfmt
debug_formats	nasm.h	/^    struct dfmt **debug_formats;$/;"	m	struct:ofmt
debug_output	nasm.h	/^    void (*debug_output) (int type, void *param);$/;"	m	struct:dfmt
debug_typevalue	nasm.h	/^    void (*debug_typevalue) (long type);$/;"	m	struct:dfmt
declare_as_global	labels.c	/^void declare_as_global(char *label, char *special, efunc error)$/;"	f
def_seg	output/outcoff.c	/^static long def_seg;$/;"	v	file:
def_seg	output/outelf.c	/^static long def_seg;$/;"	v	file:
defaults	preproc.c	/^    Token **defaults;           \/* Parameter default pointers *\/$/;"	m	struct:MMacro	file:
define_common	labels.c	/^void define_common(char *label, long segment, long size, char *special,$/;"	f
define_label	labels.c	/^void define_label(char *label, long segment, long offset, char *special,$/;"	f
defining	preproc.c	/^static MMacro *defining;$/;"	v	file:
deflabel	output/outieee.c	/^static ldfunc deflabel;$/;"	v	file:
deflabel	output/outobj.c	/^static ldfunc deflabel;$/;"	v	file:
defn	labels.c	/^    } defn;$/;"	m	union:label	file:
defwrt_ptr	output/outobj.c	/^    } defwrt_ptr;$/;"	m	struct:External	file:
defwrt_type	output/outobj.c	/^    } defwrt_type;$/;"	m	struct:External	file:
delay	test/loopoffs.asm	/^delay:	loop delay$/;"	l
delay2	test/loopoffs.asm	/^delay2:	a32 loop delay2$/;"	l
delay3	test/loopoffs.asm	/^delay3:	loop delay3,ecx$/;"	l
delay4	test/loopoffs.asm	/^delay4:	a32 loop delay4,ecx$/;"	l
delete_Blocks	preproc.c	/^static void delete_Blocks(void)$/;"	f	file:
delete_Token	preproc.c	/^static Token *delete_Token(Token * t)$/;"	f	file:
descend_tree_add	rdoff/segtab.c	/^void descend_tree_add(struct segtabnode **node,$/;"	f
dest_seg	rdoff/ldrdf.c	/^    int dest_seg;               \/* output segment to be placed into, -1 to $/;"	m	struct:segment_infonode	file:
destseg	rdoff/segtab.c	/^    int destseg;$/;"	m	struct:segtabnode	file:
detoken	preproc.c	/^static char *detoken(Token * tlist, int expand_locals)$/;"	f	file:
df_stabs	output/outelf.c	/^static struct dfmt df_stabs = {$/;"	v	file:
df_stabs	output/outelf.c	/^static struct dfmt df_stabs;$/;"	v	file:
dfmt	nasm.h	/^struct dfmt {$/;"	s
dfmt_find	outform.c	/^struct dfmt *dfmt_find(struct ofmt *ofmt, char *name)$/;"	f
dfmt_list	outform.c	/^void dfmt_list(struct ofmt *ofmt, FILE * fp)$/;"	f
directive	nasm.h	/^    int (*directive) (char *directive, char *value, int pass);$/;"	m	struct:ofmt
directive_sec	output/outcoff.c	/^static struct Section *directive_sec;$/;"	v	file:
directives	preproc.c	/^static const char *directives[] = {$/;"	v	file:
disasm	disasm.c	/^long disasm(unsigned char *data, char *output, int outbufsize, int segsize,$/;"	f
dlist	preproc.c	/^    Token *dlist;               \/* All defaults as one list *\/$/;"	m	struct:MMacro	file:
do_directive	preproc.c	/^static int do_directive(Token * tline)$/;"	f	file:
do_ea	disasm.c	/^static unsigned char *do_ea(unsigned char *data, int modrm, int asize,$/;"	f	file:
docdir	doc/Makefile	/^docdir		= $(prefix)\/doc\/nasm$/;"	m
done_seglocations	rdoff/segtab.c	/^void done_seglocations(segtab * root)$/;"	f
dowhat	rdoff/ldsegs.h	/^    UI16 dowhat;                \/* one of the SEG_xxxx values below *\/$/;"	m	struct:segconfig
downlevel	nasm.h	/^    void (*downlevel) (int);$/;"	m
dreg	regdis.c	/^static const int dreg    [] = {R_DR0,R_DR1,R_DR2,R_DR3,R_DR4,R_DR5,R_DR6,R_DR7};$/;"	v	file:
drivers	outform.h	/^struct ofmt *drivers[] = {$/;"	v
dummy	labels.c	/^        long movingon, dummy;$/;"	m	struct:label::<anonymous>	file:
dws	output/outobj.c	/^} *exthead, **exttail, *dws;$/;"	v	file:
dynalink	rdoff/ldrdf.c	/^    int dynalink;$/;"	m	struct:ldrdfoptions	file:
e	rdoff/rdoff.h	/^    struct ExportRec e;         \/* type == 3 *\/$/;"	m	union:RDFHeaderRec
ea	assemble.c	/^} ea;$/;"	t	file:
eaflags	nasm.h	/^    int eaflags;                \/* special EA flags *\/$/;"	m
eatbyte	disasm.c	/^long eatbyte(unsigned char *data, char *output, int outbufsize)$/;"	f
ebhead	output/outieee.c	/^} *ebhead, **ebtail;$/;"	v	file:
ebhead	output/outobj.c	/^} *ebhead, **ebtail;$/;"	v	file:
ebtail	output/outieee.c	/^} *ebhead, **ebtail;$/;"	v	file:
ebtail	output/outobj.c	/^} *ebhead, **ebtail;$/;"	v	file:
efunc	nasm.h	/^typedef void (*efunc) (int severity, const char *fmt, ...);$/;"	t
elem_len	nasmlib.h	/^    long elem_len, length, posn, start, rpos;$/;"	m	struct:SAA
elements	nasm.h	836;"	d
elf_add_gsym_reloc	output/outelf.c	/^static long elf_add_gsym_reloc(struct Section *sect,$/;"	f	file:
elf_add_reloc	output/outelf.c	/^static void elf_add_reloc(struct Section *sect, long segment, int type)$/;"	f	file:
elf_build_reltab	output/outelf.c	/^static struct SAA *elf_build_reltab(long *len, struct Reloc *r)$/;"	f	file:
elf_build_symtab	output/outelf.c	/^static struct SAA *elf_build_symtab(long *len, long *local)$/;"	f	file:
elf_cleanup	output/outelf.c	/^static void elf_cleanup(int debuginfo)$/;"	f	file:
elf_debugs_arr	output/outelf.c	/^struct dfmt *elf_debugs_arr[2] = { &df_stabs, NULL };$/;"	v
elf_deflabel	output/outelf.c	/^static void elf_deflabel(char *name, long segment, long offset,$/;"	f	file:
elf_directive	output/outelf.c	/^static int elf_directive(char *directive, char *value, int pass)$/;"	f	file:
elf_filename	output/outelf.c	/^static void elf_filename(char *inname, char *outname, efunc error)$/;"	f	file:
elf_foffs	output/outelf.c	/^static long elf_foffs;$/;"	v	file:
elf_got_sect	output/outelf.c	/^static long elf_got_sect, elf_plt_sect;$/;"	v	file:
elf_gotoff_sect	output/outelf.c	/^static long elf_gotpc_sect, elf_gotoff_sect;$/;"	v	file:
elf_gotpc_sect	output/outelf.c	/^static long elf_gotpc_sect, elf_gotoff_sect;$/;"	v	file:
elf_init	output/outelf.c	/^static void elf_init(FILE * fp, efunc errfunc, ldfunc ldef, evalfunc eval)$/;"	f	file:
elf_make_section	output/outelf.c	/^static int elf_make_section(char *name, int type, int flags, int align)$/;"	f	file:
elf_module	output/outelf.c	/^static char elf_module[FILENAME_MAX];$/;"	v	file:
elf_nsect	output/outelf.c	/^static int elf_nsect;$/;"	v	file:
elf_out	output/outelf.c	/^static void elf_out(long segto, const void *data, unsigned long type,$/;"	f	file:
elf_plt_sect	output/outelf.c	/^static long elf_got_sect, elf_plt_sect;$/;"	v	file:
elf_sect_write	output/outelf.c	/^static void elf_sect_write(struct Section *sect,$/;"	f	file:
elf_section_header	output/outelf.c	/^static void elf_section_header(int name, int type, int flags,$/;"	f	file:
elf_section_names	output/outelf.c	/^static long elf_section_names(char *name, int pass, int *bits)$/;"	f	file:
elf_sects	output/outelf.c	/^} *elf_sects;$/;"	v	file:
elf_segbase	output/outelf.c	/^static long elf_segbase(long segment)$/;"	f	file:
elf_set_info	output/outelf.c	/^static int elf_set_info(enum geninfo type, char **val)$/;"	f	file:
elf_stdmac	output/outelf.c	/^static const char *elf_stdmac[] = {$/;"	v	file:
elf_sym_sect	output/outelf.c	/^static long elf_sym_sect;$/;"	v	file:
elf_write	output/outelf.c	/^static void elf_write(void)$/;"	f	file:
elf_write_sections	output/outelf.c	/^static void elf_write_sections(void)$/;"	f	file:
elffp	output/outelf.c	/^static FILE *elffp;$/;"	v	file:
emitting	preproc.c	239;"	d	file:
emlabel	test/changed.asm	/^emlabel empty_macro$/;"	l
end	nasmlib.h	/^    struct SAA *next, *end, *rptr;$/;"	m	struct:SAA
endX	test/bintest.asm	/^endX	  mov ax,0x4c00		; [1]$/;"	l
ent	rdoff/symtab.c	/^    symtabEnt ent;$/;"	m	struct:tagSymtabNode	file:
eof_offset	rdoff/rdoff.h	/^    long eof_offset;            \/* offset of the first byte beyond the end of this$/;"	m	struct:RDFFileInfo
eops	nasm.h	/^    extop *eops;                \/* extended operands *\/$/;"	m
eops_float	nasm.h	/^    int eops_float;             \/* true if DD and floating *\/$/;"	m
erel	output/outelf.c	/^struct erel {$/;"	s	file:
errfunc	assemble.c	/^static efunc errfunc;$/;"	v	file:
error	eval.c	/^static efunc error;             \/* Address of error reporting routine *\/$/;"	v	file:
error	output/outaout.c	/^static efunc error;$/;"	v	file:
error	output/outas86.c	/^static efunc error;$/;"	v	file:
error	output/outbin.c	/^static efunc error;$/;"	v	file:
error	output/outcoff.c	/^static efunc error;$/;"	v	file:
error	output/outelf.c	/^static efunc error;$/;"	v	file:
error	output/outieee.c	/^static efunc error;$/;"	v	file:
error	output/outobj.c	/^static efunc error;$/;"	v	file:
error	output/outrdf.c	/^static efunc error;$/;"	v	file:
error	output/outrdf2.c	/^static efunc error;$/;"	v	file:
error	parser.c	/^static efunc error;$/;"	v	file:
error	preproc.c	/^static void error(int severity, const char *fmt, ...)$/;"	f	file:
error	rdoff/test/rdtmain.asm	/^error:$/;"	l
error	test/lnxhello.asm	/^error:$/;"	l
error_exit	rdoff/rdlar.c	/^void error_exit(int errcode, bool useperror, const char *fmt, ...)$/;"	f
error_file	nasm.c	/^static FILE *error_file;        \/* Where to write error messages *\/$/;"	v	file:
error_file	rdoff/ldrdf.c	/^static FILE *error_file;$/;"	v	file:
errorcount	rdoff/ldrdf.c	/^int errorcount = 0;             \/* determines main program exit status *\/$/;"	v
eval_cleanup	eval.c	/^void eval_cleanup(void)$/;"	f
eval_global_info	eval.c	/^void eval_global_info(struct ofmt *output, lfunc lookup_label,$/;"	f
eval_hints	nasm.h	/^struct eval_hints {$/;"	s
evalfunc	nasm.h	/^typedef expr *(*evalfunc) (scanner sc, void *scprivate,$/;"	t
evaluate	eval.c	/^expr *evaluate(scanner sc, void *scprivate, struct tokenval *tv,$/;"	f
evaluate	output/outaout.c	/^static evalfunc evaluate;$/;"	v	file:
evaluate	output/outelf.c	/^static evalfunc evaluate;$/;"	v	file:
evaluate	output/outobj.c	/^static evalfunc evaluate;$/;"	v	file:
evaluate	preproc.c	/^static evalfunc evaluate;$/;"	v	file:
exec_prefix	Makefile	/^exec_prefix	= ${prefix}$/;"	m
exec_prefix	doc/Makefile	/^exec_prefix	= ${prefix}$/;"	m
exec_prefix	rdoff/Makefile	/^exec_prefix	= ${prefix}$/;"	m
expand_id	preproc.c	/^static Token *expand_id(Token * tline)$/;"	f	file:
expand_macros_in_string	preproc.c	/^void expand_macros_in_string(char **p)$/;"	f
expand_mmac_params	preproc.c	/^static Token *expand_mmac_params(Token * tline)$/;"	f	file:
expand_mmacro	preproc.c	/^static int expand_mmacro(Token * tline)$/;"	f	file:
expand_smacro	preproc.c	/^static Token *expand_smacro(Token * tline)$/;"	f	file:
expansion	preproc.c	/^    Line *expansion;$/;"	m	struct:Include	file:
expansion	preproc.c	/^    Line *expansion;$/;"	m	struct:MMacro	file:
expansion	preproc.c	/^    Token *expansion;$/;"	m	struct:SMacro	file:
exphead	output/outobj.c	/^} *exphead, **exptail;$/;"	v	file:
expr	nasm.h	/^} expr;$/;"	t
expr0	eval.c	/^static expr *expr0(int critical)$/;"	f	file:
expr1	eval.c	/^static expr *expr1(int critical)$/;"	f	file:
expr2	eval.c	/^static expr *expr2(int critical)$/;"	f	file:
expr3	eval.c	/^static expr *expr3(int critical)$/;"	f	file:
expr4	eval.c	/^static expr *expr4(int critical)$/;"	f	file:
expr5	eval.c	/^static expr *expr5(int critical)$/;"	f	file:
expr6	eval.c	/^static expr *expr6(int critical)$/;"	f	file:
exptail	output/outobj.c	/^} *exphead, **exptail;$/;"	v	file:
externals	output/outieee.c	/^static int externals;$/;"	v	file:
externals	output/outobj.c	/^static int externals;$/;"	v	file:
exthead	output/outieee.c	/^} *exthead, **exttail;$/;"	v	file:
exthead	output/outobj.c	/^} *exthead, **exttail, *dws;$/;"	v	file:
extname	output/outobj.c	/^    char *extname;$/;"	m	struct:ExpDef	file:
extname	output/outobj.c	/^    char *extname;$/;"	m	struct:ImpDef	file:
extop	nasm.h	/^typedef struct extop {          \/* extended operand *\/$/;"	s
extop	nasm.h	/^} extop;$/;"	t
extrastdmac	preproc.c	/^static const char **extrastdmac = NULL;$/;"	v	file:
exts	output/outobj.c	/^    struct External *exts[EXT_BLKSIZ];$/;"	m	struct:ExtBack	file:
exttail	output/outieee.c	/^} *exthead, **exttail;$/;"	v	file:
exttail	output/outobj.c	/^} *exthead, **exttail, *dws;$/;"	v	file:
f	rdoff/ldrdf.c	/^    rdffile f;                  \/* the RDOFF file structure *\/$/;"	m	struct:modulenode	file:
f	rdoff/rdfload.h	/^    rdffile f;                  \/* file structure *\/$/;"	m	struct:RDFModuleStruct
faraway	test/expimp.asm	/^faraway:$/;"	l
farref	rdoff/test/rdftest1.asm	/^farref:		dd _fardata	; [3] => 0 (+20)$/;"	d
file_name	nasmlib.c	/^static char *file_name = NULL;$/;"	v	file:
filename	nasm.h	/^    void (*filename) (char *inname, char *outname, efunc error);$/;"	m	struct:ofmt
filename	output/outelf.c	/^    char *filename;$/;"	m	struct:linelist	file:
find_cc	preproc.c	/^static int find_cc(Token * t)$/;"	f	file:
find_label	labels.c	/^static union label *find_label(char *label, int create)$/;"	f	file:
find_section_by_index	output/outbin.c	/^static struct Section *find_section_by_index(long index)$/;"	f	file:
find_section_by_name	output/outbin.c	/^static struct Section *find_section_by_name(const char *name)$/;"	f	file:
findsegment	rdoff/ldrdf.c	/^int findsegment(uint16 type, uint16 reserved)$/;"	f
finishes	preproc.c	/^    MMacro *finishes;$/;"	m	struct:Line	file:
finishtemp	eval.c	/^static expr *finishtemp(void)$/;"	f	file:
first	preproc.c	/^    Token *first;$/;"	m	struct:Line	file:
first_seg	output/outobj.c	/^static long first_seg;$/;"	v	file:
fixup_xrefs	doc/rdsrc.pl	/^sub fixup_xrefs {$/;"	s
flags	insns.h	/^    unsigned long flags;        \/* some flags *\/$/;"	m	struct:itemplate
flags	output/outas86.c	/^    int flags;                  \/* symbol flags *\/$/;"	m	struct:Symbol	file:
flags	output/outbin.c	/^    int flags;                  \/* see flag definitions above *\/$/;"	m	struct:Section	file:
flags	output/outcoff.c	/^    unsigned long flags;        \/* section flags *\/$/;"	m	struct:Section	file:
flags	output/outelf.c	/^    unsigned long flags;        \/* section flags *\/$/;"	m	struct:Section	file:
flags	output/outobj.c	/^    int flags;$/;"	m	struct:ExpDef	file:
flags	rdoff/rdoff.h	/^    byte flags;                 \/* SYM_* flags (see below) *\/$/;"	m	struct:ExportRec
flags	rdoff/rdoff.h	/^    byte flags;                 \/* SYM_* flags (see below) *\/$/;"	m	struct:ImportRec
flags	rdoff/symtab.h	/^    long flags;$/;"	m
float_const	float.c	/^int float_const(char *number, long sign, unsigned char *result, int bytes,$/;"	f
flptr	output/outieee.c	/^    struct ieeeFixupp *fptr, *flptr;$/;"	m	struct:ieeeSection	file:
fname	preproc.c	/^    char *fname;$/;"	m	struct:Include	file:
fnhead	output/outieee.c	/^} *fnhead, **fntail;$/;"	v	file:
fnhead	output/outobj.c	/^} *fnhead, **fntail;$/;"	v	file:
fntail	output/outieee.c	/^} *fnhead, **fntail;$/;"	v	file:
fntail	output/outobj.c	/^} *fnhead, **fntail;$/;"	v	file:
follows	output/outbin.c	/^    char *follows;              \/* the section that this one will follow *\/$/;"	m	struct:Section	file:
foo	test/a32offs.asm	/^foo:	a32 loop foo$/;"	l
format	insns.pl	/^sub format {$/;"	s
format_mode	output/outbin.c	/^static unsigned char format_mode;       \/* 0 = original bin, 1 = extended bin *\/$/;"	v	file:
forw_ref	nasm.h	/^    int forw_ref;               \/* is there a forward reference? *\/$/;"	m
forward	test/expimp.asm	/^forward:$/;"	l
forwardref	test/changed.asm	/^forwardref:$/;"	l
forwref	nasm.c	/^static struct forwrefinfo *forwref;$/;"	v	file:
forwrefinfo	nasm.c	/^struct forwrefinfo {            \/* info held on forward refs. *\/$/;"	s	file:
forwrefs	nasm.c	/^static struct SAA *forwrefs;    \/* keep track of forward references *\/$/;"	v	file:
fp	output/outbin.c	/^static FILE *fp, *rf = NULL;$/;"	v	file:
fp	preproc.c	/^    FILE *fp;$/;"	m	struct:Include	file:
fp	rdoff/rdlib.h	/^    FILE *fp;                   \/* initialised to NULL - always check *\/$/;"	m	struct:librarynode
fp	rdoff/rdoff.h	/^    FILE *fp;                   \/* file descriptor; must be open to use this struct *\/$/;"	m	struct:RDFFileInfo
fptr	output/outieee.c	/^    struct ieeeFixupp *fptr, *flptr;$/;"	m	struct:ieeeSection	file:
fpubhead	output/outieee.c	/^} *fpubhead, **fpubtail, *last_defined;$/;"	v	file:
fpubhead	output/outobj.c	/^} *fpubhead, **fpubtail, *last_defined;$/;"	v	file:
fpubtail	output/outieee.c	/^} *fpubhead, **fpubtail, *last_defined;$/;"	v	file:
fpubtail	output/outobj.c	/^} *fpubhead, **fpubtail, *last_defined;$/;"	v	file:
fpureg	regdis.c	/^static const int fpureg  [] = {R_ST0,R_ST1,R_ST2,R_ST3,R_ST4,R_ST5,R_ST6,R_ST7};$/;"	v	file:
freeTokens	preproc.c	/^static Token *freeTokens = NULL;$/;"	v	file:
free_llist	preproc.c	/^static void free_llist(Line * list)$/;"	f	file:
free_mmacro	preproc.c	/^static void free_mmacro(MMacro * m)$/;"	f	file:
free_tlist	preproc.c	/^static void free_tlist(Token * list)$/;"	f	file:
freemembuf	output/outrdf.c	/^static void freemembuf(memorybuffer * b)$/;"	f	file:
freemembuf	rdoff/rdoff.c	/^void freemembuf(memorybuffer * b)$/;"	f
freenode	rdoff/segtab.c	/^void freenode(struct segtabnode *n)$/;"	f
fresh	rdoff/rdlar.c	/^    bool fresh;$/;"	m	file:
ftype	output/outieee.c	/^    } ftype;$/;"	m	struct:ieeeFixupp	file:
fullname	nasm.h	/^    const char *fullname;$/;"	m	struct:dfmt
fullname	nasm.h	/^    const char *fullname;$/;"	m	struct:ofmt
fwds	output/outaout.c	/^static struct Symbol *fwds;$/;"	v	file:
fwds	output/outelf.c	/^static struct Symbol *fwds;$/;"	v	file:
fwritelong	nasmlib.c	/^void fwritelong(long data, FILE * fp)$/;"	f
fwriteshort	nasmlib.c	/^void fwriteshort(int data, FILE * fp)$/;"	f
g	rdoff/rdoff.h	/^    struct GenericRec g;        \/* type 0 *\/$/;"	m	union:RDFHeaderRec
gencode	assemble.c	/^static void gencode(long segment, long offset, int bits,$/;"	f	file:
generic_rec_file	rdoff/ldrdf.c	/^char *generic_rec_file = NULL;$/;"	v
geninfo	nasm.h	/^enum geninfo { GI_SWITCH };$/;"	g
get_bits	nasm.c	/^static int get_bits(char *value)$/;"	f	file:
get_cpu	nasm.c	/^static unsigned long get_cpu(char *value)$/;"	f	file:
get_ctx	preproc.c	/^static Context *get_ctx(char *name, int all_contexts)$/;"	f	file:
get_param	nasm.c	/^static char *get_param(char *p, char *q, int *advance)$/;"	f	file:
get_seglocation	rdoff/segtab.c	/^int get_seglocation(segtab * root, int localseg, int *destseg,$/;"	f
getfilename	rdoff/rdf2bin.c	/^char *getfilename(char *pathname)$/;"	f
getgid	rdoff/rdlar.h	11;"	d
getkw	nasm.c	/^static int getkw(char **directive, char **value)$/;"	f	file:
getline	nasm.h	/^    char *(*getline) (void);$/;"	m
getsegconfig	rdoff/ldsegs.h	39;"	d
getsegmentlength	output/outrdf2.c	/^static int getsegmentlength(int segment)$/;"	f	file:
getuid	rdoff/rdlar.h	10;"	d
global_offset_changed	nasm.c	/^int global_offset_changed;      \/* referenced in labels.c *\/$/;"	v
globallineno	nasm.c	/^static int globallineno;        \/* for forward-reference tracking *\/$/;"	v	file:
globnum	output/outelf.c	/^    long globnum;               \/* symbol table offset if global *\/$/;"	m	struct:Symbol	file:
got_para	doc/rdsrc.pl	/^sub got_para {$/;"	s
greet	test/elfso.asm	/^greet	  push ebx		; we'll use EBX for GOT, so save it$/;"	l
greet	test/elftest.asm	/^greet	  mov eax,[integer]	; [14]$/;"	l
group	rdoff/rdlar.h	/^    unsigned long group;        \/* GID *\/$/;"	m	struct:rdlm_hdr
grp	output/outobj.c	/^        struct Group *grp;$/;"	m	union:External::<anonymous>	file:
grp	output/outobj.c	/^    struct Group *grp;          \/* the group it belongs to *\/$/;"	m	struct:Segment	file:
grphead	output/outobj.c	/^} *grphead, **grptail, *obj_grp_needs_update;$/;"	v	file:
grptail	output/outobj.c	/^} *grphead, **grptail, *obj_grp_needs_update;$/;"	v	file:
gsyms	output/outaout.c	/^    struct Symbol *gsyms, *asym;$/;"	m	struct:Section	file:
gsyms	output/outelf.c	/^    struct Symbol *gsyms;       \/* global symbols in section *\/$/;"	m	struct:Section	file:
hash	preproc.c	/^static int hash(char *s)$/;"	f	file:
hash	rdoff/hash.c	/^unsigned hash(const char *name)$/;"	f
hdrsize	rdoff/rdlar.h	/^    unsigned long hdrsize;      \/* Header size + sizeof(module_name) *\/$/;"	m	struct:rdlm_hdr
head	output/outaout.c	/^    struct Reloc *head, **tail;$/;"	m	struct:Section	file:
head	output/outas86.c	/^    struct Piece *head, *last, **tail;$/;"	m	struct:Section	file:
head	output/outcoff.c	/^    struct Reloc *head, **tail;$/;"	m	struct:Section	file:
head	output/outelf.c	/^    struct Reloc *head, **tail;$/;"	m	struct:Section	file:
header	output/outrdf.c	/^static memorybuffer *header;    \/* relocation\/import\/export records *\/$/;"	v	file:
header	output/outrdf2.c	/^static struct SAA *header;      \/* relocation\/import\/export records *\/$/;"	v	file:
header	rdoff/ldrdf.c	/^    void *header;$/;"	m	struct:modulenode	file:
header_fp	rdoff/rdoff.h	/^    long header_fp;             \/* current location within header for reading *\/$/;"	m	struct:RDFFileInfo
header_len	rdoff/rdoff.h	/^    long header_len;$/;"	m	struct:RDFFileInfo
header_loc	rdoff/rdoff.h	/^    byte *header_loc;           \/* keep location of header *\/$/;"	m	struct:RDFFileInfo
header_ofs	rdoff/rdoff.h	/^    long header_ofs;$/;"	m	struct:RDFFileInfo
headerlength	output/outrdf2.c	/^static long headerlength;$/;"	v	file:
hello	test/binexe.asm	/^hello:	  db 'hello, world', 13, 10, '$'$/;"	d
hello	test/lnxhello.asm	/^hello:	db "Hello, World!", 10$/;"	d
hello	test/objexe.asm	/^hello:	  db 'hello, world', 13, 10, '$'$/;"	d
hello_len	test/lnxhello.asm	/^hello_len equ $-hello$/;"	d
help	ndisasm.c	/^static const char *help =$/;"	v	file:
helpstring	nasm.h	/^    const char *helpstring;$/;"	m	struct:ofmt
here	test/changed.asm	/^here:	jmp	.1$/;"	l
hint	eval.c	/^static struct eval_hints *hint;$/;"	v	file:
hintbase	nasm.h	/^    int hintbase, hinttype;     \/* hint as to real base register *\/$/;"	m
hinttype	nasm.h	/^    int hintbase, hinttype;     \/* hint as to real base register *\/$/;"	m
hlp_keywords	doc/rdsrc.pl	/^sub hlp_keywords {$/;"	s
hlp_menu	doc/rdsrc.pl	/^sub hlp_menu {$/;"	s
hlp_sectkw	doc/rdsrc.pl	/^sub hlp_sectkw {$/;"	s
html_index	doc/rdsrc.pl	/^sub html_index {$/;"	s
html_jumppoints	doc/rdsrc.pl	/^sub html_jumppoints {$/;"	s
html_preamble	doc/rdsrc.pl	/^sub html_preamble {$/;"	s
i	eval.c	/^static int i;                   \/* The t_type of tokval *\/$/;"	v	file:
i	parser.c	/^static int i;$/;"	v	file:
i	rdoff/rdoff.h	/^    struct ImportRec i;         \/* type == 2 \/ 7 *\/$/;"	m	union:RDFHeaderRec
icn	insnsn.c	/^static const char *icn[] = {$/;"	v	file:
ico	insnsn.c	/^static int ico[] = {$/;"	v	file:
id1	output/outieee.c	/^    long id1;$/;"	m	struct:ieeeFixupp	file:
id2	output/outieee.c	/^    long id2;$/;"	m	struct:ieeeFixupp	file:
ieeeExternal	output/outieee.c	/^static struct ieeeExternal {$/;"	s	file:
ieeeFixupp	output/outieee.c	/^struct ieeeFixupp {$/;"	s	file:
ieeeObjData	output/outieee.c	/^struct ieeeObjData {$/;"	s	file:
ieeePublic	output/outieee.c	/^static struct ieeePublic {$/;"	s	file:
ieeeSection	output/outieee.c	/^static struct ieeeSection {$/;"	s	file:
ieee_cleanup	output/outieee.c	/^static void ieee_cleanup(int debuginfo)$/;"	f	file:
ieee_data_new	output/outieee.c	/^static void ieee_data_new(struct ieeeSection *segto)$/;"	f	file:
ieee_deflabel	output/outieee.c	/^static void ieee_deflabel(char *name, long segment,$/;"	f	file:
ieee_directive	output/outieee.c	/^static int ieee_directive(char *directive, char *value, int pass)$/;"	f	file:
ieee_entry_ofs	output/outieee.c	/^static long ieee_entry_seg, ieee_entry_ofs;$/;"	v	file:
ieee_entry_seg	output/outieee.c	/^static long ieee_entry_seg, ieee_entry_ofs;$/;"	v	file:
ieee_filename	output/outieee.c	/^static void ieee_filename(char *inname, char *outname, efunc error)$/;"	f	file:
ieee_flconvert	float.c	/^static void ieee_flconvert(char *string, unsigned short *mant,$/;"	f	file:
ieee_index	output/outieee.c	/^    long ieee_index;            \/* the OBJ-file segment index *\/$/;"	m	struct:ieeeSection	file:
ieee_infile	output/outieee.c	/^static char ieee_infile[FILENAME_MAX];$/;"	v	file:
ieee_init	output/outieee.c	/^static void ieee_init(FILE * fp, efunc errfunc, ldfunc ldef, evalfunc eval)$/;"	f	file:
ieee_install_fixup	output/outieee.c	/^static void ieee_install_fixup(struct ieeeSection *seg,$/;"	f	file:
ieee_multiply	float.c	/^static int ieee_multiply(unsigned short *to, unsigned short *from)$/;"	f	file:
ieee_out	output/outieee.c	/^static void ieee_out(long segto, const void *data, unsigned long type,$/;"	f	file:
ieee_putascii	output/outieee.c	/^static void ieee_putascii(char *format, ...)$/;"	f	file:
ieee_putcs	output/outieee.c	/^static void ieee_putcs(int toclear)$/;"	f	file:
ieee_putld	output/outieee.c	/^static long ieee_putld(long start, long end, unsigned char *buf)$/;"	f	file:
ieee_putlr	output/outieee.c	/^static long ieee_putlr(struct ieeeFixupp *p)$/;"	f	file:
ieee_round	float.c	/^static int ieee_round(unsigned short *mant, int i)$/;"	f	file:
ieee_seg_needs_update	output/outieee.c	/^} *seghead, **segtail, *ieee_seg_needs_update;$/;"	v	file:
ieee_segbase	output/outieee.c	/^static long ieee_segbase(long segment)$/;"	f	file:
ieee_segment	output/outieee.c	/^static long ieee_segment(char *name, int pass, int *bits)$/;"	f	file:
ieee_set_info	output/outieee.c	/^static int ieee_set_info(enum geninfo type, char **val)$/;"	f	file:
ieee_shr	float.c	/^static void ieee_shr(unsigned short *mant, int i)$/;"	f	file:
ieee_unqualified_name	output/outieee.c	/^static void ieee_unqualified_name(char *dest, char *source)$/;"	f	file:
ieee_uppercase	output/outieee.c	/^static int ieee_uppercase;$/;"	v	file:
ieee_write_byte	output/outieee.c	/^static void ieee_write_byte(struct ieeeSection *seg, int data)$/;"	f	file:
ieee_write_dword	output/outieee.c	/^static void ieee_write_dword(struct ieeeSection *seg, long data)$/;"	f	file:
ieee_write_file	output/outieee.c	/^static void ieee_write_file(int debuginfo)$/;"	f	file:
ieee_write_fixup	output/outieee.c	/^static void ieee_write_fixup(long segment, long wrt,$/;"	f	file:
ieee_write_word	output/outieee.c	/^static void ieee_write_word(struct ieeeSection *seg, int data)$/;"	f	file:
if_condition	preproc.c	/^static int if_condition(Token * tline, int i)$/;"	f	file:
ifollows	output/outbin.c	/^    struct Section *ifollows;   \/* Points to previous section (implicit follows). *\/$/;"	m	struct:Section	file:
iline	preproc.c	/^    Token *iline;               \/* invocation line *\/$/;"	m	struct:MMacro	file:
imphead	output/outobj.c	/^} *imphead, **imptail;$/;"	v	file:
impindex	output/outobj.c	/^    unsigned int impindex;$/;"	m	struct:ImpDef	file:
impname	output/outobj.c	/^    char *impname;$/;"	m	struct:ImpDef	file:
imptail	output/outobj.c	/^} *imphead, **imptail;$/;"	v	file:
in_abs_seg	nasm.c	/^int in_abs_seg;                 \/* Flag we are in ABSOLUTE seg *\/$/;"	v
in_progress	preproc.c	/^    int in_progress;$/;"	m	struct:MMacro	file:
in_progress	preproc.c	/^    int in_progress;$/;"	m	struct:SMacro	file:
inc_fopen	preproc.c	/^static FILE *inc_fopen(char *file)$/;"	f	file:
include	lcc/lin-aout.c	/^char *include[] = { "-I" LCCDIR "include", "-I\/usr\/local\/include",$/;"	v
include	lcc/lin-elf.c	/^char *include[] = { "-I" LCCDIR "include", "-I\/usr\/local\/include",$/;"	v
index	output/outaout.c	/^    long index;$/;"	m	struct:Section	file:
index	output/outas86.c	/^    long index;$/;"	m	struct:Section	file:
index	output/outcoff.c	/^    long index;$/;"	m	struct:Section	file:
index	output/outelf.c	/^    long index;$/;"	m	struct:Section	file:
index	output/outieee.c	/^    int index[EXT_BLKSIZ];$/;"	m	struct:ExtBack	file:
index	output/outieee.c	/^    long index;                 \/* the NASM segment id *\/$/;"	m	struct:ieeeSection	file:
index	output/outieee.c	/^    long index;$/;"	m	struct:FileName	file:
index	output/outieee.c	/^    long index;$/;"	m	struct:ieeePublic	file:
index	output/outobj.c	/^        long index;$/;"	m	union:Group::<anonymous>	file:
index	output/outobj.c	/^    int index;                  \/* OBJ-file external index *\/$/;"	m	struct:External	file:
index	output/outobj.c	/^    int index;$/;"	m	struct:FileName	file:
index	output/outobj.c	/^    long index;                 \/* NASM segment id *\/$/;"	m	struct:Group	file:
index	output/outobj.c	/^    long index;                 \/* the NASM segment id *\/$/;"	m	struct:Segment	file:
indexdiag	doc/rdsrc.pl	/^sub indexdiag {$/;"	s
indexreg	nasm.h	/^    int basereg, indexreg, scale;       \/* registers and scale involved *\/$/;"	m
indexsort	doc/rdsrc.pl	/^sub indexsort {$/;"	s
infile	output/outbin.c	/^static char *infile, *outfile;$/;"	v	file:
infile	rdoff/rdfdump.c	/^FILE *infile;$/;"	v
info	output/outelf.c	/^    int offset, info;$/;"	m	struct:erel	file:
info	output/outelf.c	/^    struct symlininfo info;$/;"	m	struct:linelist	file:
infodir	doc/Makefile	/^infodir		= ${prefix}\/info$/;"	m
inhibiting	listing.c	/^    int inhibiting;$/;"	m	struct:MacroInhibit	file:
init	nasm.h	/^    void (*init) (FILE * fp, efunc error, ldfunc ldef, evalfunc eval);$/;"	m	struct:ofmt
init	nasm.h	/^    void (*init) (char *, efunc);$/;"	m
init	nasm.h	/^    void (*init) (struct ofmt * of, void *id, FILE * fp, efunc error);$/;"	m	struct:dfmt
init_bar	test/absolute.asm	/^init_bar:$/;"	l
init_block	labels.c	/^static void init_block(union label *blk)$/;"	f	file:
init_foo	test/absolute.asm	/^init_foo:$/;"	l
init_labels	labels.c	/^int init_labels(void)$/;"	f
init_seglocations	rdoff/segtab.c	/^void init_seglocations(segtab * root)$/;"	f
init_sync	sync.c	/^void init_sync(void)$/;"	f
initialised	labels.c	/^static int initialised = FALSE;$/;"	v	file:
initsegments	rdoff/ldrdf.c	/^void initsegments()$/;"	f
initsym	output/outcoff.c	/^static int initsym;$/;"	v	file:
inname	nasm.c	/^static char inname[FILENAME_MAX];$/;"	v	file:
insert_deps	mkdep.pl	/^sub insert_deps($) {$/;"	s
insn	nasm.h	/^} insn;$/;"	t
insn_names	insnsn.c	/^static const char *insn_names[] = {$/;"	v	file:
insn_size	assemble.c	/^long insn_size(long segment, long offset, int bits, unsigned long cp,$/;"	f
instrux	insnsd.c	/^static struct itemplate instrux[] = {$/;"	v	file:
instrux_AAA	insnsa.c	/^static struct itemplate instrux_AAA[] = {$/;"	v	file:
instrux_AAD	insnsa.c	/^static struct itemplate instrux_AAD[] = {$/;"	v	file:
instrux_AAM	insnsa.c	/^static struct itemplate instrux_AAM[] = {$/;"	v	file:
instrux_AAS	insnsa.c	/^static struct itemplate instrux_AAS[] = {$/;"	v	file:
instrux_ADC	insnsa.c	/^static struct itemplate instrux_ADC[] = {$/;"	v	file:
instrux_ADD	insnsa.c	/^static struct itemplate instrux_ADD[] = {$/;"	v	file:
instrux_ADDPD	insnsa.c	/^static struct itemplate instrux_ADDPD[] = {$/;"	v	file:
instrux_ADDPS	insnsa.c	/^static struct itemplate instrux_ADDPS[] = {$/;"	v	file:
instrux_ADDSD	insnsa.c	/^static struct itemplate instrux_ADDSD[] = {$/;"	v	file:
instrux_ADDSS	insnsa.c	/^static struct itemplate instrux_ADDSS[] = {$/;"	v	file:
instrux_ADDSUBPD	insnsa.c	/^static struct itemplate instrux_ADDSUBPD[] = {$/;"	v	file:
instrux_ADDSUBPS	insnsa.c	/^static struct itemplate instrux_ADDSUBPS[] = {$/;"	v	file:
instrux_AND	insnsa.c	/^static struct itemplate instrux_AND[] = {$/;"	v	file:
instrux_ANDNPD	insnsa.c	/^static struct itemplate instrux_ANDNPD[] = {$/;"	v	file:
instrux_ANDNPS	insnsa.c	/^static struct itemplate instrux_ANDNPS[] = {$/;"	v	file:
instrux_ANDPD	insnsa.c	/^static struct itemplate instrux_ANDPD[] = {$/;"	v	file:
instrux_ANDPS	insnsa.c	/^static struct itemplate instrux_ANDPS[] = {$/;"	v	file:
instrux_ARPL	insnsa.c	/^static struct itemplate instrux_ARPL[] = {$/;"	v	file:
instrux_BOUND	insnsa.c	/^static struct itemplate instrux_BOUND[] = {$/;"	v	file:
instrux_BSF	insnsa.c	/^static struct itemplate instrux_BSF[] = {$/;"	v	file:
instrux_BSR	insnsa.c	/^static struct itemplate instrux_BSR[] = {$/;"	v	file:
instrux_BSWAP	insnsa.c	/^static struct itemplate instrux_BSWAP[] = {$/;"	v	file:
instrux_BT	insnsa.c	/^static struct itemplate instrux_BT[] = {$/;"	v	file:
instrux_BTC	insnsa.c	/^static struct itemplate instrux_BTC[] = {$/;"	v	file:
instrux_BTR	insnsa.c	/^static struct itemplate instrux_BTR[] = {$/;"	v	file:
instrux_BTS	insnsa.c	/^static struct itemplate instrux_BTS[] = {$/;"	v	file:
instrux_CALL	insnsa.c	/^static struct itemplate instrux_CALL[] = {$/;"	v	file:
instrux_CBW	insnsa.c	/^static struct itemplate instrux_CBW[] = {$/;"	v	file:
instrux_CDQ	insnsa.c	/^static struct itemplate instrux_CDQ[] = {$/;"	v	file:
instrux_CLC	insnsa.c	/^static struct itemplate instrux_CLC[] = {$/;"	v	file:
instrux_CLD	insnsa.c	/^static struct itemplate instrux_CLD[] = {$/;"	v	file:
instrux_CLFLUSH	insnsa.c	/^static struct itemplate instrux_CLFLUSH[] = {$/;"	v	file:
instrux_CLI	insnsa.c	/^static struct itemplate instrux_CLI[] = {$/;"	v	file:
instrux_CLTS	insnsa.c	/^static struct itemplate instrux_CLTS[] = {$/;"	v	file:
instrux_CMC	insnsa.c	/^static struct itemplate instrux_CMC[] = {$/;"	v	file:
instrux_CMOVcc	insnsa.c	/^static struct itemplate instrux_CMOVcc[] = {$/;"	v	file:
instrux_CMP	insnsa.c	/^static struct itemplate instrux_CMP[] = {$/;"	v	file:
instrux_CMPEQPD	insnsa.c	/^static struct itemplate instrux_CMPEQPD[] = {$/;"	v	file:
instrux_CMPEQPS	insnsa.c	/^static struct itemplate instrux_CMPEQPS[] = {$/;"	v	file:
instrux_CMPEQSD	insnsa.c	/^static struct itemplate instrux_CMPEQSD[] = {$/;"	v	file:
instrux_CMPEQSS	insnsa.c	/^static struct itemplate instrux_CMPEQSS[] = {$/;"	v	file:
instrux_CMPLEPD	insnsa.c	/^static struct itemplate instrux_CMPLEPD[] = {$/;"	v	file:
instrux_CMPLEPS	insnsa.c	/^static struct itemplate instrux_CMPLEPS[] = {$/;"	v	file:
instrux_CMPLESD	insnsa.c	/^static struct itemplate instrux_CMPLESD[] = {$/;"	v	file:
instrux_CMPLESS	insnsa.c	/^static struct itemplate instrux_CMPLESS[] = {$/;"	v	file:
instrux_CMPLTPD	insnsa.c	/^static struct itemplate instrux_CMPLTPD[] = {$/;"	v	file:
instrux_CMPLTPS	insnsa.c	/^static struct itemplate instrux_CMPLTPS[] = {$/;"	v	file:
instrux_CMPLTSD	insnsa.c	/^static struct itemplate instrux_CMPLTSD[] = {$/;"	v	file:
instrux_CMPLTSS	insnsa.c	/^static struct itemplate instrux_CMPLTSS[] = {$/;"	v	file:
instrux_CMPNEQPD	insnsa.c	/^static struct itemplate instrux_CMPNEQPD[] = {$/;"	v	file:
instrux_CMPNEQPS	insnsa.c	/^static struct itemplate instrux_CMPNEQPS[] = {$/;"	v	file:
instrux_CMPNEQSD	insnsa.c	/^static struct itemplate instrux_CMPNEQSD[] = {$/;"	v	file:
instrux_CMPNEQSS	insnsa.c	/^static struct itemplate instrux_CMPNEQSS[] = {$/;"	v	file:
instrux_CMPNLEPD	insnsa.c	/^static struct itemplate instrux_CMPNLEPD[] = {$/;"	v	file:
instrux_CMPNLEPS	insnsa.c	/^static struct itemplate instrux_CMPNLEPS[] = {$/;"	v	file:
instrux_CMPNLESD	insnsa.c	/^static struct itemplate instrux_CMPNLESD[] = {$/;"	v	file:
instrux_CMPNLESS	insnsa.c	/^static struct itemplate instrux_CMPNLESS[] = {$/;"	v	file:
instrux_CMPNLTPD	insnsa.c	/^static struct itemplate instrux_CMPNLTPD[] = {$/;"	v	file:
instrux_CMPNLTPS	insnsa.c	/^static struct itemplate instrux_CMPNLTPS[] = {$/;"	v	file:
instrux_CMPNLTSD	insnsa.c	/^static struct itemplate instrux_CMPNLTSD[] = {$/;"	v	file:
instrux_CMPNLTSS	insnsa.c	/^static struct itemplate instrux_CMPNLTSS[] = {$/;"	v	file:
instrux_CMPORDPD	insnsa.c	/^static struct itemplate instrux_CMPORDPD[] = {$/;"	v	file:
instrux_CMPORDPS	insnsa.c	/^static struct itemplate instrux_CMPORDPS[] = {$/;"	v	file:
instrux_CMPORDSD	insnsa.c	/^static struct itemplate instrux_CMPORDSD[] = {$/;"	v	file:
instrux_CMPORDSS	insnsa.c	/^static struct itemplate instrux_CMPORDSS[] = {$/;"	v	file:
instrux_CMPPD	insnsa.c	/^static struct itemplate instrux_CMPPD[] = {$/;"	v	file:
instrux_CMPPS	insnsa.c	/^static struct itemplate instrux_CMPPS[] = {$/;"	v	file:
instrux_CMPSB	insnsa.c	/^static struct itemplate instrux_CMPSB[] = {$/;"	v	file:
instrux_CMPSD	insnsa.c	/^static struct itemplate instrux_CMPSD[] = {$/;"	v	file:
instrux_CMPSS	insnsa.c	/^static struct itemplate instrux_CMPSS[] = {$/;"	v	file:
instrux_CMPSW	insnsa.c	/^static struct itemplate instrux_CMPSW[] = {$/;"	v	file:
instrux_CMPUNORDPD	insnsa.c	/^static struct itemplate instrux_CMPUNORDPD[] = {$/;"	v	file:
instrux_CMPUNORDPS	insnsa.c	/^static struct itemplate instrux_CMPUNORDPS[] = {$/;"	v	file:
instrux_CMPUNORDSD	insnsa.c	/^static struct itemplate instrux_CMPUNORDSD[] = {$/;"	v	file:
instrux_CMPUNORDSS	insnsa.c	/^static struct itemplate instrux_CMPUNORDSS[] = {$/;"	v	file:
instrux_CMPXCHG	insnsa.c	/^static struct itemplate instrux_CMPXCHG[] = {$/;"	v	file:
instrux_CMPXCHG486	insnsa.c	/^static struct itemplate instrux_CMPXCHG486[] = {$/;"	v	file:
instrux_CMPXCHG8B	insnsa.c	/^static struct itemplate instrux_CMPXCHG8B[] = {$/;"	v	file:
instrux_COMISD	insnsa.c	/^static struct itemplate instrux_COMISD[] = {$/;"	v	file:
instrux_COMISS	insnsa.c	/^static struct itemplate instrux_COMISS[] = {$/;"	v	file:
instrux_CPUID	insnsa.c	/^static struct itemplate instrux_CPUID[] = {$/;"	v	file:
instrux_CVTDQ2PD	insnsa.c	/^static struct itemplate instrux_CVTDQ2PD[] = {$/;"	v	file:
instrux_CVTDQ2PS	insnsa.c	/^static struct itemplate instrux_CVTDQ2PS[] = {$/;"	v	file:
instrux_CVTPD2DQ	insnsa.c	/^static struct itemplate instrux_CVTPD2DQ[] = {$/;"	v	file:
instrux_CVTPD2PI	insnsa.c	/^static struct itemplate instrux_CVTPD2PI[] = {$/;"	v	file:
instrux_CVTPD2PS	insnsa.c	/^static struct itemplate instrux_CVTPD2PS[] = {$/;"	v	file:
instrux_CVTPI2PD	insnsa.c	/^static struct itemplate instrux_CVTPI2PD[] = {$/;"	v	file:
instrux_CVTPI2PS	insnsa.c	/^static struct itemplate instrux_CVTPI2PS[] = {$/;"	v	file:
instrux_CVTPS2DQ	insnsa.c	/^static struct itemplate instrux_CVTPS2DQ[] = {$/;"	v	file:
instrux_CVTPS2PD	insnsa.c	/^static struct itemplate instrux_CVTPS2PD[] = {$/;"	v	file:
instrux_CVTPS2PI	insnsa.c	/^static struct itemplate instrux_CVTPS2PI[] = {$/;"	v	file:
instrux_CVTSD2SI	insnsa.c	/^static struct itemplate instrux_CVTSD2SI[] = {$/;"	v	file:
instrux_CVTSD2SS	insnsa.c	/^static struct itemplate instrux_CVTSD2SS[] = {$/;"	v	file:
instrux_CVTSI2SD	insnsa.c	/^static struct itemplate instrux_CVTSI2SD[] = {$/;"	v	file:
instrux_CVTSI2SS	insnsa.c	/^static struct itemplate instrux_CVTSI2SS[] = {$/;"	v	file:
instrux_CVTSS2SD	insnsa.c	/^static struct itemplate instrux_CVTSS2SD[] = {$/;"	v	file:
instrux_CVTSS2SI	insnsa.c	/^static struct itemplate instrux_CVTSS2SI[] = {$/;"	v	file:
instrux_CVTTPD2DQ	insnsa.c	/^static struct itemplate instrux_CVTTPD2DQ[] = {$/;"	v	file:
instrux_CVTTPD2PI	insnsa.c	/^static struct itemplate instrux_CVTTPD2PI[] = {$/;"	v	file:
instrux_CVTTPS2DQ	insnsa.c	/^static struct itemplate instrux_CVTTPS2DQ[] = {$/;"	v	file:
instrux_CVTTPS2PI	insnsa.c	/^static struct itemplate instrux_CVTTPS2PI[] = {$/;"	v	file:
instrux_CVTTSD2SI	insnsa.c	/^static struct itemplate instrux_CVTTSD2SI[] = {$/;"	v	file:
instrux_CVTTSS2SI	insnsa.c	/^static struct itemplate instrux_CVTTSS2SI[] = {$/;"	v	file:
instrux_CWD	insnsa.c	/^static struct itemplate instrux_CWD[] = {$/;"	v	file:
instrux_CWDE	insnsa.c	/^static struct itemplate instrux_CWDE[] = {$/;"	v	file:
instrux_DAA	insnsa.c	/^static struct itemplate instrux_DAA[] = {$/;"	v	file:
instrux_DAS	insnsa.c	/^static struct itemplate instrux_DAS[] = {$/;"	v	file:
instrux_DB	insnsa.c	/^static struct itemplate instrux_DB[] = {$/;"	v	file:
instrux_DD	insnsa.c	/^static struct itemplate instrux_DD[] = {$/;"	v	file:
instrux_DEC	insnsa.c	/^static struct itemplate instrux_DEC[] = {$/;"	v	file:
instrux_DIV	insnsa.c	/^static struct itemplate instrux_DIV[] = {$/;"	v	file:
instrux_DIVPD	insnsa.c	/^static struct itemplate instrux_DIVPD[] = {$/;"	v	file:
instrux_DIVPS	insnsa.c	/^static struct itemplate instrux_DIVPS[] = {$/;"	v	file:
instrux_DIVSD	insnsa.c	/^static struct itemplate instrux_DIVSD[] = {$/;"	v	file:
instrux_DIVSS	insnsa.c	/^static struct itemplate instrux_DIVSS[] = {$/;"	v	file:
instrux_DQ	insnsa.c	/^static struct itemplate instrux_DQ[] = {$/;"	v	file:
instrux_DT	insnsa.c	/^static struct itemplate instrux_DT[] = {$/;"	v	file:
instrux_DW	insnsa.c	/^static struct itemplate instrux_DW[] = {$/;"	v	file:
instrux_EMMS	insnsa.c	/^static struct itemplate instrux_EMMS[] = {$/;"	v	file:
instrux_ENTER	insnsa.c	/^static struct itemplate instrux_ENTER[] = {$/;"	v	file:
instrux_EQU	insnsa.c	/^static struct itemplate instrux_EQU[] = {$/;"	v	file:
instrux_F2XM1	insnsa.c	/^static struct itemplate instrux_F2XM1[] = {$/;"	v	file:
instrux_FABS	insnsa.c	/^static struct itemplate instrux_FABS[] = {$/;"	v	file:
instrux_FADD	insnsa.c	/^static struct itemplate instrux_FADD[] = {$/;"	v	file:
instrux_FADDP	insnsa.c	/^static struct itemplate instrux_FADDP[] = {$/;"	v	file:
instrux_FBLD	insnsa.c	/^static struct itemplate instrux_FBLD[] = {$/;"	v	file:
instrux_FBSTP	insnsa.c	/^static struct itemplate instrux_FBSTP[] = {$/;"	v	file:
instrux_FCHS	insnsa.c	/^static struct itemplate instrux_FCHS[] = {$/;"	v	file:
instrux_FCLEX	insnsa.c	/^static struct itemplate instrux_FCLEX[] = {$/;"	v	file:
instrux_FCMOVB	insnsa.c	/^static struct itemplate instrux_FCMOVB[] = {$/;"	v	file:
instrux_FCMOVBE	insnsa.c	/^static struct itemplate instrux_FCMOVBE[] = {$/;"	v	file:
instrux_FCMOVE	insnsa.c	/^static struct itemplate instrux_FCMOVE[] = {$/;"	v	file:
instrux_FCMOVNB	insnsa.c	/^static struct itemplate instrux_FCMOVNB[] = {$/;"	v	file:
instrux_FCMOVNBE	insnsa.c	/^static struct itemplate instrux_FCMOVNBE[] = {$/;"	v	file:
instrux_FCMOVNE	insnsa.c	/^static struct itemplate instrux_FCMOVNE[] = {$/;"	v	file:
instrux_FCMOVNU	insnsa.c	/^static struct itemplate instrux_FCMOVNU[] = {$/;"	v	file:
instrux_FCMOVU	insnsa.c	/^static struct itemplate instrux_FCMOVU[] = {$/;"	v	file:
instrux_FCOM	insnsa.c	/^static struct itemplate instrux_FCOM[] = {$/;"	v	file:
instrux_FCOMI	insnsa.c	/^static struct itemplate instrux_FCOMI[] = {$/;"	v	file:
instrux_FCOMIP	insnsa.c	/^static struct itemplate instrux_FCOMIP[] = {$/;"	v	file:
instrux_FCOMP	insnsa.c	/^static struct itemplate instrux_FCOMP[] = {$/;"	v	file:
instrux_FCOMPP	insnsa.c	/^static struct itemplate instrux_FCOMPP[] = {$/;"	v	file:
instrux_FCOS	insnsa.c	/^static struct itemplate instrux_FCOS[] = {$/;"	v	file:
instrux_FDECSTP	insnsa.c	/^static struct itemplate instrux_FDECSTP[] = {$/;"	v	file:
instrux_FDISI	insnsa.c	/^static struct itemplate instrux_FDISI[] = {$/;"	v	file:
instrux_FDIV	insnsa.c	/^static struct itemplate instrux_FDIV[] = {$/;"	v	file:
instrux_FDIVP	insnsa.c	/^static struct itemplate instrux_FDIVP[] = {$/;"	v	file:
instrux_FDIVR	insnsa.c	/^static struct itemplate instrux_FDIVR[] = {$/;"	v	file:
instrux_FDIVRP	insnsa.c	/^static struct itemplate instrux_FDIVRP[] = {$/;"	v	file:
instrux_FEMMS	insnsa.c	/^static struct itemplate instrux_FEMMS[] = {$/;"	v	file:
instrux_FENI	insnsa.c	/^static struct itemplate instrux_FENI[] = {$/;"	v	file:
instrux_FFREE	insnsa.c	/^static struct itemplate instrux_FFREE[] = {$/;"	v	file:
instrux_FFREEP	insnsa.c	/^static struct itemplate instrux_FFREEP[] = {$/;"	v	file:
instrux_FIADD	insnsa.c	/^static struct itemplate instrux_FIADD[] = {$/;"	v	file:
instrux_FICOM	insnsa.c	/^static struct itemplate instrux_FICOM[] = {$/;"	v	file:
instrux_FICOMP	insnsa.c	/^static struct itemplate instrux_FICOMP[] = {$/;"	v	file:
instrux_FIDIV	insnsa.c	/^static struct itemplate instrux_FIDIV[] = {$/;"	v	file:
instrux_FIDIVR	insnsa.c	/^static struct itemplate instrux_FIDIVR[] = {$/;"	v	file:
instrux_FILD	insnsa.c	/^static struct itemplate instrux_FILD[] = {$/;"	v	file:
instrux_FIMUL	insnsa.c	/^static struct itemplate instrux_FIMUL[] = {$/;"	v	file:
instrux_FINCSTP	insnsa.c	/^static struct itemplate instrux_FINCSTP[] = {$/;"	v	file:
instrux_FINIT	insnsa.c	/^static struct itemplate instrux_FINIT[] = {$/;"	v	file:
instrux_FIST	insnsa.c	/^static struct itemplate instrux_FIST[] = {$/;"	v	file:
instrux_FISTP	insnsa.c	/^static struct itemplate instrux_FISTP[] = {$/;"	v	file:
instrux_FISTTP	insnsa.c	/^static struct itemplate instrux_FISTTP[] = {$/;"	v	file:
instrux_FISUB	insnsa.c	/^static struct itemplate instrux_FISUB[] = {$/;"	v	file:
instrux_FISUBR	insnsa.c	/^static struct itemplate instrux_FISUBR[] = {$/;"	v	file:
instrux_FLD	insnsa.c	/^static struct itemplate instrux_FLD[] = {$/;"	v	file:
instrux_FLD1	insnsa.c	/^static struct itemplate instrux_FLD1[] = {$/;"	v	file:
instrux_FLDCW	insnsa.c	/^static struct itemplate instrux_FLDCW[] = {$/;"	v	file:
instrux_FLDENV	insnsa.c	/^static struct itemplate instrux_FLDENV[] = {$/;"	v	file:
instrux_FLDL2E	insnsa.c	/^static struct itemplate instrux_FLDL2E[] = {$/;"	v	file:
instrux_FLDL2T	insnsa.c	/^static struct itemplate instrux_FLDL2T[] = {$/;"	v	file:
instrux_FLDLG2	insnsa.c	/^static struct itemplate instrux_FLDLG2[] = {$/;"	v	file:
instrux_FLDLN2	insnsa.c	/^static struct itemplate instrux_FLDLN2[] = {$/;"	v	file:
instrux_FLDPI	insnsa.c	/^static struct itemplate instrux_FLDPI[] = {$/;"	v	file:
instrux_FLDZ	insnsa.c	/^static struct itemplate instrux_FLDZ[] = {$/;"	v	file:
instrux_FMUL	insnsa.c	/^static struct itemplate instrux_FMUL[] = {$/;"	v	file:
instrux_FMULP	insnsa.c	/^static struct itemplate instrux_FMULP[] = {$/;"	v	file:
instrux_FNCLEX	insnsa.c	/^static struct itemplate instrux_FNCLEX[] = {$/;"	v	file:
instrux_FNDISI	insnsa.c	/^static struct itemplate instrux_FNDISI[] = {$/;"	v	file:
instrux_FNENI	insnsa.c	/^static struct itemplate instrux_FNENI[] = {$/;"	v	file:
instrux_FNINIT	insnsa.c	/^static struct itemplate instrux_FNINIT[] = {$/;"	v	file:
instrux_FNOP	insnsa.c	/^static struct itemplate instrux_FNOP[] = {$/;"	v	file:
instrux_FNSAVE	insnsa.c	/^static struct itemplate instrux_FNSAVE[] = {$/;"	v	file:
instrux_FNSTCW	insnsa.c	/^static struct itemplate instrux_FNSTCW[] = {$/;"	v	file:
instrux_FNSTENV	insnsa.c	/^static struct itemplate instrux_FNSTENV[] = {$/;"	v	file:
instrux_FNSTSW	insnsa.c	/^static struct itemplate instrux_FNSTSW[] = {$/;"	v	file:
instrux_FPATAN	insnsa.c	/^static struct itemplate instrux_FPATAN[] = {$/;"	v	file:
instrux_FPREM	insnsa.c	/^static struct itemplate instrux_FPREM[] = {$/;"	v	file:
instrux_FPREM1	insnsa.c	/^static struct itemplate instrux_FPREM1[] = {$/;"	v	file:
instrux_FPTAN	insnsa.c	/^static struct itemplate instrux_FPTAN[] = {$/;"	v	file:
instrux_FRNDINT	insnsa.c	/^static struct itemplate instrux_FRNDINT[] = {$/;"	v	file:
instrux_FRSTOR	insnsa.c	/^static struct itemplate instrux_FRSTOR[] = {$/;"	v	file:
instrux_FSAVE	insnsa.c	/^static struct itemplate instrux_FSAVE[] = {$/;"	v	file:
instrux_FSCALE	insnsa.c	/^static struct itemplate instrux_FSCALE[] = {$/;"	v	file:
instrux_FSETPM	insnsa.c	/^static struct itemplate instrux_FSETPM[] = {$/;"	v	file:
instrux_FSIN	insnsa.c	/^static struct itemplate instrux_FSIN[] = {$/;"	v	file:
instrux_FSINCOS	insnsa.c	/^static struct itemplate instrux_FSINCOS[] = {$/;"	v	file:
instrux_FSQRT	insnsa.c	/^static struct itemplate instrux_FSQRT[] = {$/;"	v	file:
instrux_FST	insnsa.c	/^static struct itemplate instrux_FST[] = {$/;"	v	file:
instrux_FSTCW	insnsa.c	/^static struct itemplate instrux_FSTCW[] = {$/;"	v	file:
instrux_FSTENV	insnsa.c	/^static struct itemplate instrux_FSTENV[] = {$/;"	v	file:
instrux_FSTP	insnsa.c	/^static struct itemplate instrux_FSTP[] = {$/;"	v	file:
instrux_FSTSW	insnsa.c	/^static struct itemplate instrux_FSTSW[] = {$/;"	v	file:
instrux_FSUB	insnsa.c	/^static struct itemplate instrux_FSUB[] = {$/;"	v	file:
instrux_FSUBP	insnsa.c	/^static struct itemplate instrux_FSUBP[] = {$/;"	v	file:
instrux_FSUBR	insnsa.c	/^static struct itemplate instrux_FSUBR[] = {$/;"	v	file:
instrux_FSUBRP	insnsa.c	/^static struct itemplate instrux_FSUBRP[] = {$/;"	v	file:
instrux_FTST	insnsa.c	/^static struct itemplate instrux_FTST[] = {$/;"	v	file:
instrux_FUCOM	insnsa.c	/^static struct itemplate instrux_FUCOM[] = {$/;"	v	file:
instrux_FUCOMI	insnsa.c	/^static struct itemplate instrux_FUCOMI[] = {$/;"	v	file:
instrux_FUCOMIP	insnsa.c	/^static struct itemplate instrux_FUCOMIP[] = {$/;"	v	file:
instrux_FUCOMP	insnsa.c	/^static struct itemplate instrux_FUCOMP[] = {$/;"	v	file:
instrux_FUCOMPP	insnsa.c	/^static struct itemplate instrux_FUCOMPP[] = {$/;"	v	file:
instrux_FWAIT	insnsa.c	/^static struct itemplate instrux_FWAIT[] = {$/;"	v	file:
instrux_FXAM	insnsa.c	/^static struct itemplate instrux_FXAM[] = {$/;"	v	file:
instrux_FXCH	insnsa.c	/^static struct itemplate instrux_FXCH[] = {$/;"	v	file:
instrux_FXRSTOR	insnsa.c	/^static struct itemplate instrux_FXRSTOR[] = {$/;"	v	file:
instrux_FXSAVE	insnsa.c	/^static struct itemplate instrux_FXSAVE[] = {$/;"	v	file:
instrux_FXTRACT	insnsa.c	/^static struct itemplate instrux_FXTRACT[] = {$/;"	v	file:
instrux_FYL2X	insnsa.c	/^static struct itemplate instrux_FYL2X[] = {$/;"	v	file:
instrux_FYL2XP1	insnsa.c	/^static struct itemplate instrux_FYL2XP1[] = {$/;"	v	file:
instrux_HADDPD	insnsa.c	/^static struct itemplate instrux_HADDPD[] = {$/;"	v	file:
instrux_HADDPS	insnsa.c	/^static struct itemplate instrux_HADDPS[] = {$/;"	v	file:
instrux_HLT	insnsa.c	/^static struct itemplate instrux_HLT[] = {$/;"	v	file:
instrux_HSUBPD	insnsa.c	/^static struct itemplate instrux_HSUBPD[] = {$/;"	v	file:
instrux_HSUBPS	insnsa.c	/^static struct itemplate instrux_HSUBPS[] = {$/;"	v	file:
instrux_IBTS	insnsa.c	/^static struct itemplate instrux_IBTS[] = {$/;"	v	file:
instrux_ICEBP	insnsa.c	/^static struct itemplate instrux_ICEBP[] = {$/;"	v	file:
instrux_IDIV	insnsa.c	/^static struct itemplate instrux_IDIV[] = {$/;"	v	file:
instrux_IMUL	insnsa.c	/^static struct itemplate instrux_IMUL[] = {$/;"	v	file:
instrux_IN	insnsa.c	/^static struct itemplate instrux_IN[] = {$/;"	v	file:
instrux_INC	insnsa.c	/^static struct itemplate instrux_INC[] = {$/;"	v	file:
instrux_INCBIN	insnsa.c	/^static struct itemplate instrux_INCBIN[] = {$/;"	v	file:
instrux_INSB	insnsa.c	/^static struct itemplate instrux_INSB[] = {$/;"	v	file:
instrux_INSD	insnsa.c	/^static struct itemplate instrux_INSD[] = {$/;"	v	file:
instrux_INSW	insnsa.c	/^static struct itemplate instrux_INSW[] = {$/;"	v	file:
instrux_INT	insnsa.c	/^static struct itemplate instrux_INT[] = {$/;"	v	file:
instrux_INT01	insnsa.c	/^static struct itemplate instrux_INT01[] = {$/;"	v	file:
instrux_INT03	insnsa.c	/^static struct itemplate instrux_INT03[] = {$/;"	v	file:
instrux_INT1	insnsa.c	/^static struct itemplate instrux_INT1[] = {$/;"	v	file:
instrux_INT3	insnsa.c	/^static struct itemplate instrux_INT3[] = {$/;"	v	file:
instrux_INTO	insnsa.c	/^static struct itemplate instrux_INTO[] = {$/;"	v	file:
instrux_INVD	insnsa.c	/^static struct itemplate instrux_INVD[] = {$/;"	v	file:
instrux_INVLPG	insnsa.c	/^static struct itemplate instrux_INVLPG[] = {$/;"	v	file:
instrux_IRET	insnsa.c	/^static struct itemplate instrux_IRET[] = {$/;"	v	file:
instrux_IRETD	insnsa.c	/^static struct itemplate instrux_IRETD[] = {$/;"	v	file:
instrux_IRETW	insnsa.c	/^static struct itemplate instrux_IRETW[] = {$/;"	v	file:
instrux_JCXZ	insnsa.c	/^static struct itemplate instrux_JCXZ[] = {$/;"	v	file:
instrux_JECXZ	insnsa.c	/^static struct itemplate instrux_JECXZ[] = {$/;"	v	file:
instrux_JMP	insnsa.c	/^static struct itemplate instrux_JMP[] = {$/;"	v	file:
instrux_JMPE	insnsa.c	/^static struct itemplate instrux_JMPE[] = {$/;"	v	file:
instrux_Jcc	insnsa.c	/^static struct itemplate instrux_Jcc[] = {$/;"	v	file:
instrux_LAHF	insnsa.c	/^static struct itemplate instrux_LAHF[] = {$/;"	v	file:
instrux_LAR	insnsa.c	/^static struct itemplate instrux_LAR[] = {$/;"	v	file:
instrux_LDDQU	insnsa.c	/^static struct itemplate instrux_LDDQU[] = {$/;"	v	file:
instrux_LDMXCSR	insnsa.c	/^static struct itemplate instrux_LDMXCSR[] = {$/;"	v	file:
instrux_LDS	insnsa.c	/^static struct itemplate instrux_LDS[] = {$/;"	v	file:
instrux_LEA	insnsa.c	/^static struct itemplate instrux_LEA[] = {$/;"	v	file:
instrux_LEAVE	insnsa.c	/^static struct itemplate instrux_LEAVE[] = {$/;"	v	file:
instrux_LES	insnsa.c	/^static struct itemplate instrux_LES[] = {$/;"	v	file:
instrux_LFENCE	insnsa.c	/^static struct itemplate instrux_LFENCE[] = {$/;"	v	file:
instrux_LFS	insnsa.c	/^static struct itemplate instrux_LFS[] = {$/;"	v	file:
instrux_LGDT	insnsa.c	/^static struct itemplate instrux_LGDT[] = {$/;"	v	file:
instrux_LGS	insnsa.c	/^static struct itemplate instrux_LGS[] = {$/;"	v	file:
instrux_LIDT	insnsa.c	/^static struct itemplate instrux_LIDT[] = {$/;"	v	file:
instrux_LLDT	insnsa.c	/^static struct itemplate instrux_LLDT[] = {$/;"	v	file:
instrux_LMSW	insnsa.c	/^static struct itemplate instrux_LMSW[] = {$/;"	v	file:
instrux_LOADALL	insnsa.c	/^static struct itemplate instrux_LOADALL[] = {$/;"	v	file:
instrux_LOADALL286	insnsa.c	/^static struct itemplate instrux_LOADALL286[] = {$/;"	v	file:
instrux_LODSB	insnsa.c	/^static struct itemplate instrux_LODSB[] = {$/;"	v	file:
instrux_LODSD	insnsa.c	/^static struct itemplate instrux_LODSD[] = {$/;"	v	file:
instrux_LODSW	insnsa.c	/^static struct itemplate instrux_LODSW[] = {$/;"	v	file:
instrux_LOOP	insnsa.c	/^static struct itemplate instrux_LOOP[] = {$/;"	v	file:
instrux_LOOPE	insnsa.c	/^static struct itemplate instrux_LOOPE[] = {$/;"	v	file:
instrux_LOOPNE	insnsa.c	/^static struct itemplate instrux_LOOPNE[] = {$/;"	v	file:
instrux_LOOPNZ	insnsa.c	/^static struct itemplate instrux_LOOPNZ[] = {$/;"	v	file:
instrux_LOOPZ	insnsa.c	/^static struct itemplate instrux_LOOPZ[] = {$/;"	v	file:
instrux_LSL	insnsa.c	/^static struct itemplate instrux_LSL[] = {$/;"	v	file:
instrux_LSS	insnsa.c	/^static struct itemplate instrux_LSS[] = {$/;"	v	file:
instrux_LTR	insnsa.c	/^static struct itemplate instrux_LTR[] = {$/;"	v	file:
instrux_MASKMOVDQU	insnsa.c	/^static struct itemplate instrux_MASKMOVDQU[] = {$/;"	v	file:
instrux_MASKMOVQ	insnsa.c	/^static struct itemplate instrux_MASKMOVQ[] = {$/;"	v	file:
instrux_MAXPD	insnsa.c	/^static struct itemplate instrux_MAXPD[] = {$/;"	v	file:
instrux_MAXPS	insnsa.c	/^static struct itemplate instrux_MAXPS[] = {$/;"	v	file:
instrux_MAXSD	insnsa.c	/^static struct itemplate instrux_MAXSD[] = {$/;"	v	file:
instrux_MAXSS	insnsa.c	/^static struct itemplate instrux_MAXSS[] = {$/;"	v	file:
instrux_MFENCE	insnsa.c	/^static struct itemplate instrux_MFENCE[] = {$/;"	v	file:
instrux_MINPD	insnsa.c	/^static struct itemplate instrux_MINPD[] = {$/;"	v	file:
instrux_MINPS	insnsa.c	/^static struct itemplate instrux_MINPS[] = {$/;"	v	file:
instrux_MINSD	insnsa.c	/^static struct itemplate instrux_MINSD[] = {$/;"	v	file:
instrux_MINSS	insnsa.c	/^static struct itemplate instrux_MINSS[] = {$/;"	v	file:
instrux_MONITOR	insnsa.c	/^static struct itemplate instrux_MONITOR[] = {$/;"	v	file:
instrux_MOV	insnsa.c	/^static struct itemplate instrux_MOV[] = {$/;"	v	file:
instrux_MOVAPD	insnsa.c	/^static struct itemplate instrux_MOVAPD[] = {$/;"	v	file:
instrux_MOVAPS	insnsa.c	/^static struct itemplate instrux_MOVAPS[] = {$/;"	v	file:
instrux_MOVD	insnsa.c	/^static struct itemplate instrux_MOVD[] = {$/;"	v	file:
instrux_MOVDDUP	insnsa.c	/^static struct itemplate instrux_MOVDDUP[] = {$/;"	v	file:
instrux_MOVDQ2Q	insnsa.c	/^static struct itemplate instrux_MOVDQ2Q[] = {$/;"	v	file:
instrux_MOVDQA	insnsa.c	/^static struct itemplate instrux_MOVDQA[] = {$/;"	v	file:
instrux_MOVDQU	insnsa.c	/^static struct itemplate instrux_MOVDQU[] = {$/;"	v	file:
instrux_MOVHLPS	insnsa.c	/^static struct itemplate instrux_MOVHLPS[] = {$/;"	v	file:
instrux_MOVHPD	insnsa.c	/^static struct itemplate instrux_MOVHPD[] = {$/;"	v	file:
instrux_MOVHPS	insnsa.c	/^static struct itemplate instrux_MOVHPS[] = {$/;"	v	file:
instrux_MOVLHPS	insnsa.c	/^static struct itemplate instrux_MOVLHPS[] = {$/;"	v	file:
instrux_MOVLPD	insnsa.c	/^static struct itemplate instrux_MOVLPD[] = {$/;"	v	file:
instrux_MOVLPS	insnsa.c	/^static struct itemplate instrux_MOVLPS[] = {$/;"	v	file:
instrux_MOVMSKPD	insnsa.c	/^static struct itemplate instrux_MOVMSKPD[] = {$/;"	v	file:
instrux_MOVMSKPS	insnsa.c	/^static struct itemplate instrux_MOVMSKPS[] = {$/;"	v	file:
instrux_MOVNTDQ	insnsa.c	/^static struct itemplate instrux_MOVNTDQ[] = {$/;"	v	file:
instrux_MOVNTI	insnsa.c	/^static struct itemplate instrux_MOVNTI[] = {$/;"	v	file:
instrux_MOVNTPD	insnsa.c	/^static struct itemplate instrux_MOVNTPD[] = {$/;"	v	file:
instrux_MOVNTPS	insnsa.c	/^static struct itemplate instrux_MOVNTPS[] = {$/;"	v	file:
instrux_MOVNTQ	insnsa.c	/^static struct itemplate instrux_MOVNTQ[] = {$/;"	v	file:
instrux_MOVQ	insnsa.c	/^static struct itemplate instrux_MOVQ[] = {$/;"	v	file:
instrux_MOVQ2DQ	insnsa.c	/^static struct itemplate instrux_MOVQ2DQ[] = {$/;"	v	file:
instrux_MOVSB	insnsa.c	/^static struct itemplate instrux_MOVSB[] = {$/;"	v	file:
instrux_MOVSD	insnsa.c	/^static struct itemplate instrux_MOVSD[] = {$/;"	v	file:
instrux_MOVSHDUP	insnsa.c	/^static struct itemplate instrux_MOVSHDUP[] = {$/;"	v	file:
instrux_MOVSLDUP	insnsa.c	/^static struct itemplate instrux_MOVSLDUP[] = {$/;"	v	file:
instrux_MOVSS	insnsa.c	/^static struct itemplate instrux_MOVSS[] = {$/;"	v	file:
instrux_MOVSW	insnsa.c	/^static struct itemplate instrux_MOVSW[] = {$/;"	v	file:
instrux_MOVSX	insnsa.c	/^static struct itemplate instrux_MOVSX[] = {$/;"	v	file:
instrux_MOVUPD	insnsa.c	/^static struct itemplate instrux_MOVUPD[] = {$/;"	v	file:
instrux_MOVUPS	insnsa.c	/^static struct itemplate instrux_MOVUPS[] = {$/;"	v	file:
instrux_MOVZX	insnsa.c	/^static struct itemplate instrux_MOVZX[] = {$/;"	v	file:
instrux_MUL	insnsa.c	/^static struct itemplate instrux_MUL[] = {$/;"	v	file:
instrux_MULPD	insnsa.c	/^static struct itemplate instrux_MULPD[] = {$/;"	v	file:
instrux_MULPS	insnsa.c	/^static struct itemplate instrux_MULPS[] = {$/;"	v	file:
instrux_MULSD	insnsa.c	/^static struct itemplate instrux_MULSD[] = {$/;"	v	file:
instrux_MULSS	insnsa.c	/^static struct itemplate instrux_MULSS[] = {$/;"	v	file:
instrux_MWAIT	insnsa.c	/^static struct itemplate instrux_MWAIT[] = {$/;"	v	file:
instrux_NEG	insnsa.c	/^static struct itemplate instrux_NEG[] = {$/;"	v	file:
instrux_NOP	insnsa.c	/^static struct itemplate instrux_NOP[] = {$/;"	v	file:
instrux_NOT	insnsa.c	/^static struct itemplate instrux_NOT[] = {$/;"	v	file:
instrux_OR	insnsa.c	/^static struct itemplate instrux_OR[] = {$/;"	v	file:
instrux_ORPD	insnsa.c	/^static struct itemplate instrux_ORPD[] = {$/;"	v	file:
instrux_ORPS	insnsa.c	/^static struct itemplate instrux_ORPS[] = {$/;"	v	file:
instrux_OUT	insnsa.c	/^static struct itemplate instrux_OUT[] = {$/;"	v	file:
instrux_OUTSB	insnsa.c	/^static struct itemplate instrux_OUTSB[] = {$/;"	v	file:
instrux_OUTSD	insnsa.c	/^static struct itemplate instrux_OUTSD[] = {$/;"	v	file:
instrux_OUTSW	insnsa.c	/^static struct itemplate instrux_OUTSW[] = {$/;"	v	file:
instrux_PACKSSDW	insnsa.c	/^static struct itemplate instrux_PACKSSDW[] = {$/;"	v	file:
instrux_PACKSSWB	insnsa.c	/^static struct itemplate instrux_PACKSSWB[] = {$/;"	v	file:
instrux_PACKUSWB	insnsa.c	/^static struct itemplate instrux_PACKUSWB[] = {$/;"	v	file:
instrux_PADDB	insnsa.c	/^static struct itemplate instrux_PADDB[] = {$/;"	v	file:
instrux_PADDD	insnsa.c	/^static struct itemplate instrux_PADDD[] = {$/;"	v	file:
instrux_PADDQ	insnsa.c	/^static struct itemplate instrux_PADDQ[] = {$/;"	v	file:
instrux_PADDSB	insnsa.c	/^static struct itemplate instrux_PADDSB[] = {$/;"	v	file:
instrux_PADDSIW	insnsa.c	/^static struct itemplate instrux_PADDSIW[] = {$/;"	v	file:
instrux_PADDSW	insnsa.c	/^static struct itemplate instrux_PADDSW[] = {$/;"	v	file:
instrux_PADDUSB	insnsa.c	/^static struct itemplate instrux_PADDUSB[] = {$/;"	v	file:
instrux_PADDUSW	insnsa.c	/^static struct itemplate instrux_PADDUSW[] = {$/;"	v	file:
instrux_PADDW	insnsa.c	/^static struct itemplate instrux_PADDW[] = {$/;"	v	file:
instrux_PAND	insnsa.c	/^static struct itemplate instrux_PAND[] = {$/;"	v	file:
instrux_PANDN	insnsa.c	/^static struct itemplate instrux_PANDN[] = {$/;"	v	file:
instrux_PAUSE	insnsa.c	/^static struct itemplate instrux_PAUSE[] = {$/;"	v	file:
instrux_PAVEB	insnsa.c	/^static struct itemplate instrux_PAVEB[] = {$/;"	v	file:
instrux_PAVGB	insnsa.c	/^static struct itemplate instrux_PAVGB[] = {$/;"	v	file:
instrux_PAVGUSB	insnsa.c	/^static struct itemplate instrux_PAVGUSB[] = {$/;"	v	file:
instrux_PAVGW	insnsa.c	/^static struct itemplate instrux_PAVGW[] = {$/;"	v	file:
instrux_PCMPEQB	insnsa.c	/^static struct itemplate instrux_PCMPEQB[] = {$/;"	v	file:
instrux_PCMPEQD	insnsa.c	/^static struct itemplate instrux_PCMPEQD[] = {$/;"	v	file:
instrux_PCMPEQW	insnsa.c	/^static struct itemplate instrux_PCMPEQW[] = {$/;"	v	file:
instrux_PCMPGTB	insnsa.c	/^static struct itemplate instrux_PCMPGTB[] = {$/;"	v	file:
instrux_PCMPGTD	insnsa.c	/^static struct itemplate instrux_PCMPGTD[] = {$/;"	v	file:
instrux_PCMPGTW	insnsa.c	/^static struct itemplate instrux_PCMPGTW[] = {$/;"	v	file:
instrux_PDISTIB	insnsa.c	/^static struct itemplate instrux_PDISTIB[] = {$/;"	v	file:
instrux_PEXTRW	insnsa.c	/^static struct itemplate instrux_PEXTRW[] = {$/;"	v	file:
instrux_PF2ID	insnsa.c	/^static struct itemplate instrux_PF2ID[] = {$/;"	v	file:
instrux_PF2IW	insnsa.c	/^static struct itemplate instrux_PF2IW[] = {$/;"	v	file:
instrux_PFACC	insnsa.c	/^static struct itemplate instrux_PFACC[] = {$/;"	v	file:
instrux_PFADD	insnsa.c	/^static struct itemplate instrux_PFADD[] = {$/;"	v	file:
instrux_PFCMPEQ	insnsa.c	/^static struct itemplate instrux_PFCMPEQ[] = {$/;"	v	file:
instrux_PFCMPGE	insnsa.c	/^static struct itemplate instrux_PFCMPGE[] = {$/;"	v	file:
instrux_PFCMPGT	insnsa.c	/^static struct itemplate instrux_PFCMPGT[] = {$/;"	v	file:
instrux_PFMAX	insnsa.c	/^static struct itemplate instrux_PFMAX[] = {$/;"	v	file:
instrux_PFMIN	insnsa.c	/^static struct itemplate instrux_PFMIN[] = {$/;"	v	file:
instrux_PFMUL	insnsa.c	/^static struct itemplate instrux_PFMUL[] = {$/;"	v	file:
instrux_PFNACC	insnsa.c	/^static struct itemplate instrux_PFNACC[] = {$/;"	v	file:
instrux_PFPNACC	insnsa.c	/^static struct itemplate instrux_PFPNACC[] = {$/;"	v	file:
instrux_PFRCP	insnsa.c	/^static struct itemplate instrux_PFRCP[] = {$/;"	v	file:
instrux_PFRCPIT1	insnsa.c	/^static struct itemplate instrux_PFRCPIT1[] = {$/;"	v	file:
instrux_PFRCPIT2	insnsa.c	/^static struct itemplate instrux_PFRCPIT2[] = {$/;"	v	file:
instrux_PFRSQIT1	insnsa.c	/^static struct itemplate instrux_PFRSQIT1[] = {$/;"	v	file:
instrux_PFRSQRT	insnsa.c	/^static struct itemplate instrux_PFRSQRT[] = {$/;"	v	file:
instrux_PFSUB	insnsa.c	/^static struct itemplate instrux_PFSUB[] = {$/;"	v	file:
instrux_PFSUBR	insnsa.c	/^static struct itemplate instrux_PFSUBR[] = {$/;"	v	file:
instrux_PI2FD	insnsa.c	/^static struct itemplate instrux_PI2FD[] = {$/;"	v	file:
instrux_PI2FW	insnsa.c	/^static struct itemplate instrux_PI2FW[] = {$/;"	v	file:
instrux_PINSRW	insnsa.c	/^static struct itemplate instrux_PINSRW[] = {$/;"	v	file:
instrux_PMACHRIW	insnsa.c	/^static struct itemplate instrux_PMACHRIW[] = {$/;"	v	file:
instrux_PMADDWD	insnsa.c	/^static struct itemplate instrux_PMADDWD[] = {$/;"	v	file:
instrux_PMAGW	insnsa.c	/^static struct itemplate instrux_PMAGW[] = {$/;"	v	file:
instrux_PMAXSW	insnsa.c	/^static struct itemplate instrux_PMAXSW[] = {$/;"	v	file:
instrux_PMAXUB	insnsa.c	/^static struct itemplate instrux_PMAXUB[] = {$/;"	v	file:
instrux_PMINSW	insnsa.c	/^static struct itemplate instrux_PMINSW[] = {$/;"	v	file:
instrux_PMINUB	insnsa.c	/^static struct itemplate instrux_PMINUB[] = {$/;"	v	file:
instrux_PMOVMSKB	insnsa.c	/^static struct itemplate instrux_PMOVMSKB[] = {$/;"	v	file:
instrux_PMULHRIW	insnsa.c	/^static struct itemplate instrux_PMULHRIW[] = {$/;"	v	file:
instrux_PMULHRWA	insnsa.c	/^static struct itemplate instrux_PMULHRWA[] = {$/;"	v	file:
instrux_PMULHRWC	insnsa.c	/^static struct itemplate instrux_PMULHRWC[] = {$/;"	v	file:
instrux_PMULHUW	insnsa.c	/^static struct itemplate instrux_PMULHUW[] = {$/;"	v	file:
instrux_PMULHW	insnsa.c	/^static struct itemplate instrux_PMULHW[] = {$/;"	v	file:
instrux_PMULLW	insnsa.c	/^static struct itemplate instrux_PMULLW[] = {$/;"	v	file:
instrux_PMULUDQ	insnsa.c	/^static struct itemplate instrux_PMULUDQ[] = {$/;"	v	file:
instrux_PMVGEZB	insnsa.c	/^static struct itemplate instrux_PMVGEZB[] = {$/;"	v	file:
instrux_PMVLZB	insnsa.c	/^static struct itemplate instrux_PMVLZB[] = {$/;"	v	file:
instrux_PMVNZB	insnsa.c	/^static struct itemplate instrux_PMVNZB[] = {$/;"	v	file:
instrux_PMVZB	insnsa.c	/^static struct itemplate instrux_PMVZB[] = {$/;"	v	file:
instrux_POP	insnsa.c	/^static struct itemplate instrux_POP[] = {$/;"	v	file:
instrux_POPA	insnsa.c	/^static struct itemplate instrux_POPA[] = {$/;"	v	file:
instrux_POPAD	insnsa.c	/^static struct itemplate instrux_POPAD[] = {$/;"	v	file:
instrux_POPAW	insnsa.c	/^static struct itemplate instrux_POPAW[] = {$/;"	v	file:
instrux_POPF	insnsa.c	/^static struct itemplate instrux_POPF[] = {$/;"	v	file:
instrux_POPFD	insnsa.c	/^static struct itemplate instrux_POPFD[] = {$/;"	v	file:
instrux_POPFW	insnsa.c	/^static struct itemplate instrux_POPFW[] = {$/;"	v	file:
instrux_POR	insnsa.c	/^static struct itemplate instrux_POR[] = {$/;"	v	file:
instrux_PREFETCH	insnsa.c	/^static struct itemplate instrux_PREFETCH[] = {$/;"	v	file:
instrux_PREFETCHNTA	insnsa.c	/^static struct itemplate instrux_PREFETCHNTA[] = {$/;"	v	file:
instrux_PREFETCHT0	insnsa.c	/^static struct itemplate instrux_PREFETCHT0[] = {$/;"	v	file:
instrux_PREFETCHT1	insnsa.c	/^static struct itemplate instrux_PREFETCHT1[] = {$/;"	v	file:
instrux_PREFETCHT2	insnsa.c	/^static struct itemplate instrux_PREFETCHT2[] = {$/;"	v	file:
instrux_PREFETCHW	insnsa.c	/^static struct itemplate instrux_PREFETCHW[] = {$/;"	v	file:
instrux_PSADBW	insnsa.c	/^static struct itemplate instrux_PSADBW[] = {$/;"	v	file:
instrux_PSHUFD	insnsa.c	/^static struct itemplate instrux_PSHUFD[] = {$/;"	v	file:
instrux_PSHUFHW	insnsa.c	/^static struct itemplate instrux_PSHUFHW[] = {$/;"	v	file:
instrux_PSHUFLW	insnsa.c	/^static struct itemplate instrux_PSHUFLW[] = {$/;"	v	file:
instrux_PSHUFW	insnsa.c	/^static struct itemplate instrux_PSHUFW[] = {$/;"	v	file:
instrux_PSLLD	insnsa.c	/^static struct itemplate instrux_PSLLD[] = {$/;"	v	file:
instrux_PSLLDQ	insnsa.c	/^static struct itemplate instrux_PSLLDQ[] = {$/;"	v	file:
instrux_PSLLQ	insnsa.c	/^static struct itemplate instrux_PSLLQ[] = {$/;"	v	file:
instrux_PSLLW	insnsa.c	/^static struct itemplate instrux_PSLLW[] = {$/;"	v	file:
instrux_PSRAD	insnsa.c	/^static struct itemplate instrux_PSRAD[] = {$/;"	v	file:
instrux_PSRAW	insnsa.c	/^static struct itemplate instrux_PSRAW[] = {$/;"	v	file:
instrux_PSRLD	insnsa.c	/^static struct itemplate instrux_PSRLD[] = {$/;"	v	file:
instrux_PSRLDQ	insnsa.c	/^static struct itemplate instrux_PSRLDQ[] = {$/;"	v	file:
instrux_PSRLQ	insnsa.c	/^static struct itemplate instrux_PSRLQ[] = {$/;"	v	file:
instrux_PSRLW	insnsa.c	/^static struct itemplate instrux_PSRLW[] = {$/;"	v	file:
instrux_PSUBB	insnsa.c	/^static struct itemplate instrux_PSUBB[] = {$/;"	v	file:
instrux_PSUBD	insnsa.c	/^static struct itemplate instrux_PSUBD[] = {$/;"	v	file:
instrux_PSUBQ	insnsa.c	/^static struct itemplate instrux_PSUBQ[] = {$/;"	v	file:
instrux_PSUBSB	insnsa.c	/^static struct itemplate instrux_PSUBSB[] = {$/;"	v	file:
instrux_PSUBSIW	insnsa.c	/^static struct itemplate instrux_PSUBSIW[] = {$/;"	v	file:
instrux_PSUBSW	insnsa.c	/^static struct itemplate instrux_PSUBSW[] = {$/;"	v	file:
instrux_PSUBUSB	insnsa.c	/^static struct itemplate instrux_PSUBUSB[] = {$/;"	v	file:
instrux_PSUBUSW	insnsa.c	/^static struct itemplate instrux_PSUBUSW[] = {$/;"	v	file:
instrux_PSUBW	insnsa.c	/^static struct itemplate instrux_PSUBW[] = {$/;"	v	file:
instrux_PSWAPD	insnsa.c	/^static struct itemplate instrux_PSWAPD[] = {$/;"	v	file:
instrux_PUNPCKHBW	insnsa.c	/^static struct itemplate instrux_PUNPCKHBW[] = {$/;"	v	file:
instrux_PUNPCKHDQ	insnsa.c	/^static struct itemplate instrux_PUNPCKHDQ[] = {$/;"	v	file:
instrux_PUNPCKHQDQ	insnsa.c	/^static struct itemplate instrux_PUNPCKHQDQ[] = {$/;"	v	file:
instrux_PUNPCKHWD	insnsa.c	/^static struct itemplate instrux_PUNPCKHWD[] = {$/;"	v	file:
instrux_PUNPCKLBW	insnsa.c	/^static struct itemplate instrux_PUNPCKLBW[] = {$/;"	v	file:
instrux_PUNPCKLDQ	insnsa.c	/^static struct itemplate instrux_PUNPCKLDQ[] = {$/;"	v	file:
instrux_PUNPCKLQDQ	insnsa.c	/^static struct itemplate instrux_PUNPCKLQDQ[] = {$/;"	v	file:
instrux_PUNPCKLWD	insnsa.c	/^static struct itemplate instrux_PUNPCKLWD[] = {$/;"	v	file:
instrux_PUSH	insnsa.c	/^static struct itemplate instrux_PUSH[] = {$/;"	v	file:
instrux_PUSHA	insnsa.c	/^static struct itemplate instrux_PUSHA[] = {$/;"	v	file:
instrux_PUSHAD	insnsa.c	/^static struct itemplate instrux_PUSHAD[] = {$/;"	v	file:
instrux_PUSHAW	insnsa.c	/^static struct itemplate instrux_PUSHAW[] = {$/;"	v	file:
instrux_PUSHF	insnsa.c	/^static struct itemplate instrux_PUSHF[] = {$/;"	v	file:
instrux_PUSHFD	insnsa.c	/^static struct itemplate instrux_PUSHFD[] = {$/;"	v	file:
instrux_PUSHFW	insnsa.c	/^static struct itemplate instrux_PUSHFW[] = {$/;"	v	file:
instrux_PXOR	insnsa.c	/^static struct itemplate instrux_PXOR[] = {$/;"	v	file:
instrux_RCL	insnsa.c	/^static struct itemplate instrux_RCL[] = {$/;"	v	file:
instrux_RCPPS	insnsa.c	/^static struct itemplate instrux_RCPPS[] = {$/;"	v	file:
instrux_RCPSS	insnsa.c	/^static struct itemplate instrux_RCPSS[] = {$/;"	v	file:
instrux_RCR	insnsa.c	/^static struct itemplate instrux_RCR[] = {$/;"	v	file:
instrux_RDMSR	insnsa.c	/^static struct itemplate instrux_RDMSR[] = {$/;"	v	file:
instrux_RDPMC	insnsa.c	/^static struct itemplate instrux_RDPMC[] = {$/;"	v	file:
instrux_RDSHR	insnsa.c	/^static struct itemplate instrux_RDSHR[] = {$/;"	v	file:
instrux_RDTSC	insnsa.c	/^static struct itemplate instrux_RDTSC[] = {$/;"	v	file:
instrux_RESB	insnsa.c	/^static struct itemplate instrux_RESB[] = {$/;"	v	file:
instrux_RESD	insnsa.c	/^static struct itemplate instrux_RESD[] = {$/;"	v	file:
instrux_RESQ	insnsa.c	/^static struct itemplate instrux_RESQ[] = {$/;"	v	file:
instrux_REST	insnsa.c	/^static struct itemplate instrux_REST[] = {$/;"	v	file:
instrux_RESW	insnsa.c	/^static struct itemplate instrux_RESW[] = {$/;"	v	file:
instrux_RET	insnsa.c	/^static struct itemplate instrux_RET[] = {$/;"	v	file:
instrux_RETF	insnsa.c	/^static struct itemplate instrux_RETF[] = {$/;"	v	file:
instrux_RETN	insnsa.c	/^static struct itemplate instrux_RETN[] = {$/;"	v	file:
instrux_ROL	insnsa.c	/^static struct itemplate instrux_ROL[] = {$/;"	v	file:
instrux_ROR	insnsa.c	/^static struct itemplate instrux_ROR[] = {$/;"	v	file:
instrux_RSDC	insnsa.c	/^static struct itemplate instrux_RSDC[] = {$/;"	v	file:
instrux_RSLDT	insnsa.c	/^static struct itemplate instrux_RSLDT[] = {$/;"	v	file:
instrux_RSM	insnsa.c	/^static struct itemplate instrux_RSM[] = {$/;"	v	file:
instrux_RSQRTPS	insnsa.c	/^static struct itemplate instrux_RSQRTPS[] = {$/;"	v	file:
instrux_RSQRTSS	insnsa.c	/^static struct itemplate instrux_RSQRTSS[] = {$/;"	v	file:
instrux_RSTS	insnsa.c	/^static struct itemplate instrux_RSTS[] = {$/;"	v	file:
instrux_SAHF	insnsa.c	/^static struct itemplate instrux_SAHF[] = {$/;"	v	file:
instrux_SAL	insnsa.c	/^static struct itemplate instrux_SAL[] = {$/;"	v	file:
instrux_SALC	insnsa.c	/^static struct itemplate instrux_SALC[] = {$/;"	v	file:
instrux_SAR	insnsa.c	/^static struct itemplate instrux_SAR[] = {$/;"	v	file:
instrux_SBB	insnsa.c	/^static struct itemplate instrux_SBB[] = {$/;"	v	file:
instrux_SCASB	insnsa.c	/^static struct itemplate instrux_SCASB[] = {$/;"	v	file:
instrux_SCASD	insnsa.c	/^static struct itemplate instrux_SCASD[] = {$/;"	v	file:
instrux_SCASW	insnsa.c	/^static struct itemplate instrux_SCASW[] = {$/;"	v	file:
instrux_SETcc	insnsa.c	/^static struct itemplate instrux_SETcc[] = {$/;"	v	file:
instrux_SFENCE	insnsa.c	/^static struct itemplate instrux_SFENCE[] = {$/;"	v	file:
instrux_SGDT	insnsa.c	/^static struct itemplate instrux_SGDT[] = {$/;"	v	file:
instrux_SHL	insnsa.c	/^static struct itemplate instrux_SHL[] = {$/;"	v	file:
instrux_SHLD	insnsa.c	/^static struct itemplate instrux_SHLD[] = {$/;"	v	file:
instrux_SHR	insnsa.c	/^static struct itemplate instrux_SHR[] = {$/;"	v	file:
instrux_SHRD	insnsa.c	/^static struct itemplate instrux_SHRD[] = {$/;"	v	file:
instrux_SHUFPD	insnsa.c	/^static struct itemplate instrux_SHUFPD[] = {$/;"	v	file:
instrux_SHUFPS	insnsa.c	/^static struct itemplate instrux_SHUFPS[] = {$/;"	v	file:
instrux_SIDT	insnsa.c	/^static struct itemplate instrux_SIDT[] = {$/;"	v	file:
instrux_SLDT	insnsa.c	/^static struct itemplate instrux_SLDT[] = {$/;"	v	file:
instrux_SMI	insnsa.c	/^static struct itemplate instrux_SMI[] = {$/;"	v	file:
instrux_SMINT	insnsa.c	/^static struct itemplate instrux_SMINT[] = {$/;"	v	file:
instrux_SMINTOLD	insnsa.c	/^static struct itemplate instrux_SMINTOLD[] = {$/;"	v	file:
instrux_SMSW	insnsa.c	/^static struct itemplate instrux_SMSW[] = {$/;"	v	file:
instrux_SQRTPD	insnsa.c	/^static struct itemplate instrux_SQRTPD[] = {$/;"	v	file:
instrux_SQRTPS	insnsa.c	/^static struct itemplate instrux_SQRTPS[] = {$/;"	v	file:
instrux_SQRTSD	insnsa.c	/^static struct itemplate instrux_SQRTSD[] = {$/;"	v	file:
instrux_SQRTSS	insnsa.c	/^static struct itemplate instrux_SQRTSS[] = {$/;"	v	file:
instrux_STC	insnsa.c	/^static struct itemplate instrux_STC[] = {$/;"	v	file:
instrux_STD	insnsa.c	/^static struct itemplate instrux_STD[] = {$/;"	v	file:
instrux_STI	insnsa.c	/^static struct itemplate instrux_STI[] = {$/;"	v	file:
instrux_STMXCSR	insnsa.c	/^static struct itemplate instrux_STMXCSR[] = {$/;"	v	file:
instrux_STOSB	insnsa.c	/^static struct itemplate instrux_STOSB[] = {$/;"	v	file:
instrux_STOSD	insnsa.c	/^static struct itemplate instrux_STOSD[] = {$/;"	v	file:
instrux_STOSW	insnsa.c	/^static struct itemplate instrux_STOSW[] = {$/;"	v	file:
instrux_STR	insnsa.c	/^static struct itemplate instrux_STR[] = {$/;"	v	file:
instrux_SUB	insnsa.c	/^static struct itemplate instrux_SUB[] = {$/;"	v	file:
instrux_SUBPD	insnsa.c	/^static struct itemplate instrux_SUBPD[] = {$/;"	v	file:
instrux_SUBPS	insnsa.c	/^static struct itemplate instrux_SUBPS[] = {$/;"	v	file:
instrux_SUBSD	insnsa.c	/^static struct itemplate instrux_SUBSD[] = {$/;"	v	file:
instrux_SUBSS	insnsa.c	/^static struct itemplate instrux_SUBSS[] = {$/;"	v	file:
instrux_SVDC	insnsa.c	/^static struct itemplate instrux_SVDC[] = {$/;"	v	file:
instrux_SVLDT	insnsa.c	/^static struct itemplate instrux_SVLDT[] = {$/;"	v	file:
instrux_SVTS	insnsa.c	/^static struct itemplate instrux_SVTS[] = {$/;"	v	file:
instrux_SYSCALL	insnsa.c	/^static struct itemplate instrux_SYSCALL[] = {$/;"	v	file:
instrux_SYSENTER	insnsa.c	/^static struct itemplate instrux_SYSENTER[] = {$/;"	v	file:
instrux_SYSEXIT	insnsa.c	/^static struct itemplate instrux_SYSEXIT[] = {$/;"	v	file:
instrux_SYSRET	insnsa.c	/^static struct itemplate instrux_SYSRET[] = {$/;"	v	file:
instrux_TEST	insnsa.c	/^static struct itemplate instrux_TEST[] = {$/;"	v	file:
instrux_UCOMISD	insnsa.c	/^static struct itemplate instrux_UCOMISD[] = {$/;"	v	file:
instrux_UCOMISS	insnsa.c	/^static struct itemplate instrux_UCOMISS[] = {$/;"	v	file:
instrux_UD0	insnsa.c	/^static struct itemplate instrux_UD0[] = {$/;"	v	file:
instrux_UD1	insnsa.c	/^static struct itemplate instrux_UD1[] = {$/;"	v	file:
instrux_UD2	insnsa.c	/^static struct itemplate instrux_UD2[] = {$/;"	v	file:
instrux_UMOV	insnsa.c	/^static struct itemplate instrux_UMOV[] = {$/;"	v	file:
instrux_UNPCKHPD	insnsa.c	/^static struct itemplate instrux_UNPCKHPD[] = {$/;"	v	file:
instrux_UNPCKHPS	insnsa.c	/^static struct itemplate instrux_UNPCKHPS[] = {$/;"	v	file:
instrux_UNPCKLPD	insnsa.c	/^static struct itemplate instrux_UNPCKLPD[] = {$/;"	v	file:
instrux_UNPCKLPS	insnsa.c	/^static struct itemplate instrux_UNPCKLPS[] = {$/;"	v	file:
instrux_VERR	insnsa.c	/^static struct itemplate instrux_VERR[] = {$/;"	v	file:
instrux_VERW	insnsa.c	/^static struct itemplate instrux_VERW[] = {$/;"	v	file:
instrux_WAIT	insnsa.c	/^static struct itemplate instrux_WAIT[] = {$/;"	v	file:
instrux_WBINVD	insnsa.c	/^static struct itemplate instrux_WBINVD[] = {$/;"	v	file:
instrux_WRMSR	insnsa.c	/^static struct itemplate instrux_WRMSR[] = {$/;"	v	file:
instrux_WRSHR	insnsa.c	/^static struct itemplate instrux_WRSHR[] = {$/;"	v	file:
instrux_XADD	insnsa.c	/^static struct itemplate instrux_XADD[] = {$/;"	v	file:
instrux_XBTS	insnsa.c	/^static struct itemplate instrux_XBTS[] = {$/;"	v	file:
instrux_XCHG	insnsa.c	/^static struct itemplate instrux_XCHG[] = {$/;"	v	file:
instrux_XLAT	insnsa.c	/^static struct itemplate instrux_XLAT[] = {$/;"	v	file:
instrux_XLATB	insnsa.c	/^static struct itemplate instrux_XLATB[] = {$/;"	v	file:
instrux_XOR	insnsa.c	/^static struct itemplate instrux_XOR[] = {$/;"	v	file:
instrux_XORPD	insnsa.c	/^static struct itemplate instrux_XORPD[] = {$/;"	v	file:
instrux_XORPS	insnsa.c	/^static struct itemplate instrux_XORPS[] = {$/;"	v	file:
instrux_XSTORE	insnsa.c	/^static struct itemplate instrux_XSTORE[] = {$/;"	v	file:
int16	output/outrdf.c	/^typedef short int16;            \/* not sure if this will be required to be altered$/;"	t	file:
int2base	doc/genps.pl	/^sub int2base($$) {$/;"	s
integer	test/elfso.asm	/^integer	  resd 1		; [3]$/;"	l
integer	test/elftest.asm	/^integer	  resd 1		; [3]$/;"	l
intname	output/outobj.c	/^    char *intname;$/;"	m	struct:ExpDef	file:
inverse_ccs	preproc.c	/^static int inverse_ccs[] = {$/;"	v	file:
ipath	preproc.c	/^static IncPath *ipath = NULL;$/;"	v	file:
is_comma_next	parser.c	/^static int is_comma_next(void)$/;"	f	file:
is_condition	preproc.c	/^static int is_condition(int arg)$/;"	f	file:
is_extern	labels.c	/^int is_extern(char *label)$/;"	f
is_global	labels.c	/^        int is_global, is_norm;$/;"	m	struct:label::<anonymous>	file:
is_global	output/outcoff.c	/^    int is_global;              \/* is it a global symbol or not? *\/$/;"	m	struct:Symbol	file:
is_just_unknown	nasmlib.c	/^int is_just_unknown(expr * vect)$/;"	f
is_mmacro	preproc.c	/^static MMacro *is_mmacro(Token * tline, Token *** params_array)$/;"	f	file:
is_norm	labels.c	/^        int is_global, is_norm;$/;"	m	struct:label::<anonymous>	file:
is_pic	output/outaout.c	/^static int is_pic;$/;"	v	file:
is_really_simple	nasmlib.c	/^int is_really_simple(expr * vect)$/;"	f
is_reloc	nasmlib.c	/^int is_reloc(expr * vect)$/;"	f
is_saa	output/outelf.c	/^    int is_saa;$/;"	m	struct:ELF_SECTDATA	file:
is_sbyte	assemble.c	/^static int is_sbyte(insn * ins, int op, int size)$/;"	f	file:
is_simple	nasmlib.c	/^int is_simple(expr * vect)$/;"	f
is_suppressed_warning	nasm.c	/^static int is_suppressed_warning(int severity)$/;"	f	file:
is_unknown	nasmlib.c	/^int is_unknown(expr * vect)$/;"	f
isidchar	nasm.h	335;"	d
isidstart	nasm.h	333;"	d
islocal	labels.c	23;"	d	file:
islocalchar	labels.c	27;"	d	file:
isnumchar	nasm.h	341;"	d
isnumstart	nasm.h	340;"	d
istk	preproc.c	/^static Include *istk;$/;"	v	file:
itable	insnsd.c	/^struct itemplate **itable[] = {$/;"	v
itable_00	insnsd.c	/^static struct itemplate *itable_00[] = {$/;"	v	file:
itable_01	insnsd.c	/^static struct itemplate *itable_01[] = {$/;"	v	file:
itable_02	insnsd.c	/^static struct itemplate *itable_02[] = {$/;"	v	file:
itable_03	insnsd.c	/^static struct itemplate *itable_03[] = {$/;"	v	file:
itable_04	insnsd.c	/^static struct itemplate *itable_04[] = {$/;"	v	file:
itable_05	insnsd.c	/^static struct itemplate *itable_05[] = {$/;"	v	file:
itable_06	insnsd.c	/^static struct itemplate *itable_06[] = {$/;"	v	file:
itable_07	insnsd.c	/^static struct itemplate *itable_07[] = {$/;"	v	file:
itable_08	insnsd.c	/^static struct itemplate *itable_08[] = {$/;"	v	file:
itable_09	insnsd.c	/^static struct itemplate *itable_09[] = {$/;"	v	file:
itable_0A	insnsd.c	/^static struct itemplate *itable_0A[] = {$/;"	v	file:
itable_0B	insnsd.c	/^static struct itemplate *itable_0B[] = {$/;"	v	file:
itable_0C	insnsd.c	/^static struct itemplate *itable_0C[] = {$/;"	v	file:
itable_0D	insnsd.c	/^static struct itemplate *itable_0D[] = {$/;"	v	file:
itable_0E	insnsd.c	/^static struct itemplate *itable_0E[] = {$/;"	v	file:
itable_0F	insnsd.c	/^static struct itemplate *itable_0F[] = {$/;"	v	file:
itable_10	insnsd.c	/^static struct itemplate *itable_10[] = {$/;"	v	file:
itable_11	insnsd.c	/^static struct itemplate *itable_11[] = {$/;"	v	file:
itable_12	insnsd.c	/^static struct itemplate *itable_12[] = {$/;"	v	file:
itable_13	insnsd.c	/^static struct itemplate *itable_13[] = {$/;"	v	file:
itable_14	insnsd.c	/^static struct itemplate *itable_14[] = {$/;"	v	file:
itable_15	insnsd.c	/^static struct itemplate *itable_15[] = {$/;"	v	file:
itable_16	insnsd.c	/^static struct itemplate *itable_16[] = {$/;"	v	file:
itable_17	insnsd.c	/^static struct itemplate *itable_17[] = {$/;"	v	file:
itable_18	insnsd.c	/^static struct itemplate *itable_18[] = {$/;"	v	file:
itable_19	insnsd.c	/^static struct itemplate *itable_19[] = {$/;"	v	file:
itable_1A	insnsd.c	/^static struct itemplate *itable_1A[] = {$/;"	v	file:
itable_1B	insnsd.c	/^static struct itemplate *itable_1B[] = {$/;"	v	file:
itable_1C	insnsd.c	/^static struct itemplate *itable_1C[] = {$/;"	v	file:
itable_1D	insnsd.c	/^static struct itemplate *itable_1D[] = {$/;"	v	file:
itable_1E	insnsd.c	/^static struct itemplate *itable_1E[] = {$/;"	v	file:
itable_1F	insnsd.c	/^static struct itemplate *itable_1F[] = {$/;"	v	file:
itable_20	insnsd.c	/^static struct itemplate *itable_20[] = {$/;"	v	file:
itable_21	insnsd.c	/^static struct itemplate *itable_21[] = {$/;"	v	file:
itable_22	insnsd.c	/^static struct itemplate *itable_22[] = {$/;"	v	file:
itable_23	insnsd.c	/^static struct itemplate *itable_23[] = {$/;"	v	file:
itable_24	insnsd.c	/^static struct itemplate *itable_24[] = {$/;"	v	file:
itable_25	insnsd.c	/^static struct itemplate *itable_25[] = {$/;"	v	file:
itable_26	insnsd.c	/^static struct itemplate *itable_26[] = {$/;"	v	file:
itable_27	insnsd.c	/^static struct itemplate *itable_27[] = {$/;"	v	file:
itable_28	insnsd.c	/^static struct itemplate *itable_28[] = {$/;"	v	file:
itable_29	insnsd.c	/^static struct itemplate *itable_29[] = {$/;"	v	file:
itable_2A	insnsd.c	/^static struct itemplate *itable_2A[] = {$/;"	v	file:
itable_2B	insnsd.c	/^static struct itemplate *itable_2B[] = {$/;"	v	file:
itable_2C	insnsd.c	/^static struct itemplate *itable_2C[] = {$/;"	v	file:
itable_2D	insnsd.c	/^static struct itemplate *itable_2D[] = {$/;"	v	file:
itable_2E	insnsd.c	/^static struct itemplate *itable_2E[] = {$/;"	v	file:
itable_2F	insnsd.c	/^static struct itemplate *itable_2F[] = {$/;"	v	file:
itable_30	insnsd.c	/^static struct itemplate *itable_30[] = {$/;"	v	file:
itable_31	insnsd.c	/^static struct itemplate *itable_31[] = {$/;"	v	file:
itable_32	insnsd.c	/^static struct itemplate *itable_32[] = {$/;"	v	file:
itable_33	insnsd.c	/^static struct itemplate *itable_33[] = {$/;"	v	file:
itable_34	insnsd.c	/^static struct itemplate *itable_34[] = {$/;"	v	file:
itable_35	insnsd.c	/^static struct itemplate *itable_35[] = {$/;"	v	file:
itable_36	insnsd.c	/^static struct itemplate *itable_36[] = {$/;"	v	file:
itable_37	insnsd.c	/^static struct itemplate *itable_37[] = {$/;"	v	file:
itable_38	insnsd.c	/^static struct itemplate *itable_38[] = {$/;"	v	file:
itable_39	insnsd.c	/^static struct itemplate *itable_39[] = {$/;"	v	file:
itable_3A	insnsd.c	/^static struct itemplate *itable_3A[] = {$/;"	v	file:
itable_3B	insnsd.c	/^static struct itemplate *itable_3B[] = {$/;"	v	file:
itable_3C	insnsd.c	/^static struct itemplate *itable_3C[] = {$/;"	v	file:
itable_3D	insnsd.c	/^static struct itemplate *itable_3D[] = {$/;"	v	file:
itable_3E	insnsd.c	/^static struct itemplate *itable_3E[] = {$/;"	v	file:
itable_3F	insnsd.c	/^static struct itemplate *itable_3F[] = {$/;"	v	file:
itable_40	insnsd.c	/^static struct itemplate *itable_40[] = {$/;"	v	file:
itable_41	insnsd.c	/^static struct itemplate *itable_41[] = {$/;"	v	file:
itable_42	insnsd.c	/^static struct itemplate *itable_42[] = {$/;"	v	file:
itable_43	insnsd.c	/^static struct itemplate *itable_43[] = {$/;"	v	file:
itable_44	insnsd.c	/^static struct itemplate *itable_44[] = {$/;"	v	file:
itable_45	insnsd.c	/^static struct itemplate *itable_45[] = {$/;"	v	file:
itable_46	insnsd.c	/^static struct itemplate *itable_46[] = {$/;"	v	file:
itable_47	insnsd.c	/^static struct itemplate *itable_47[] = {$/;"	v	file:
itable_48	insnsd.c	/^static struct itemplate *itable_48[] = {$/;"	v	file:
itable_49	insnsd.c	/^static struct itemplate *itable_49[] = {$/;"	v	file:
itable_4A	insnsd.c	/^static struct itemplate *itable_4A[] = {$/;"	v	file:
itable_4B	insnsd.c	/^static struct itemplate *itable_4B[] = {$/;"	v	file:
itable_4C	insnsd.c	/^static struct itemplate *itable_4C[] = {$/;"	v	file:
itable_4D	insnsd.c	/^static struct itemplate *itable_4D[] = {$/;"	v	file:
itable_4E	insnsd.c	/^static struct itemplate *itable_4E[] = {$/;"	v	file:
itable_4F	insnsd.c	/^static struct itemplate *itable_4F[] = {$/;"	v	file:
itable_50	insnsd.c	/^static struct itemplate *itable_50[] = {$/;"	v	file:
itable_51	insnsd.c	/^static struct itemplate *itable_51[] = {$/;"	v	file:
itable_52	insnsd.c	/^static struct itemplate *itable_52[] = {$/;"	v	file:
itable_53	insnsd.c	/^static struct itemplate *itable_53[] = {$/;"	v	file:
itable_54	insnsd.c	/^static struct itemplate *itable_54[] = {$/;"	v	file:
itable_55	insnsd.c	/^static struct itemplate *itable_55[] = {$/;"	v	file:
itable_56	insnsd.c	/^static struct itemplate *itable_56[] = {$/;"	v	file:
itable_57	insnsd.c	/^static struct itemplate *itable_57[] = {$/;"	v	file:
itable_58	insnsd.c	/^static struct itemplate *itable_58[] = {$/;"	v	file:
itable_59	insnsd.c	/^static struct itemplate *itable_59[] = {$/;"	v	file:
itable_5A	insnsd.c	/^static struct itemplate *itable_5A[] = {$/;"	v	file:
itable_5B	insnsd.c	/^static struct itemplate *itable_5B[] = {$/;"	v	file:
itable_5C	insnsd.c	/^static struct itemplate *itable_5C[] = {$/;"	v	file:
itable_5D	insnsd.c	/^static struct itemplate *itable_5D[] = {$/;"	v	file:
itable_5E	insnsd.c	/^static struct itemplate *itable_5E[] = {$/;"	v	file:
itable_5F	insnsd.c	/^static struct itemplate *itable_5F[] = {$/;"	v	file:
itable_60	insnsd.c	/^static struct itemplate *itable_60[] = {$/;"	v	file:
itable_61	insnsd.c	/^static struct itemplate *itable_61[] = {$/;"	v	file:
itable_62	insnsd.c	/^static struct itemplate *itable_62[] = {$/;"	v	file:
itable_63	insnsd.c	/^static struct itemplate *itable_63[] = {$/;"	v	file:
itable_64	insnsd.c	/^static struct itemplate *itable_64[] = {$/;"	v	file:
itable_65	insnsd.c	/^static struct itemplate *itable_65[] = {$/;"	v	file:
itable_66	insnsd.c	/^static struct itemplate *itable_66[] = {$/;"	v	file:
itable_67	insnsd.c	/^static struct itemplate *itable_67[] = {$/;"	v	file:
itable_68	insnsd.c	/^static struct itemplate *itable_68[] = {$/;"	v	file:
itable_69	insnsd.c	/^static struct itemplate *itable_69[] = {$/;"	v	file:
itable_6A	insnsd.c	/^static struct itemplate *itable_6A[] = {$/;"	v	file:
itable_6B	insnsd.c	/^static struct itemplate *itable_6B[] = {$/;"	v	file:
itable_6C	insnsd.c	/^static struct itemplate *itable_6C[] = {$/;"	v	file:
itable_6D	insnsd.c	/^static struct itemplate *itable_6D[] = {$/;"	v	file:
itable_6E	insnsd.c	/^static struct itemplate *itable_6E[] = {$/;"	v	file:
itable_6F	insnsd.c	/^static struct itemplate *itable_6F[] = {$/;"	v	file:
itable_70	insnsd.c	/^static struct itemplate *itable_70[] = {$/;"	v	file:
itable_71	insnsd.c	/^static struct itemplate *itable_71[] = {$/;"	v	file:
itable_72	insnsd.c	/^static struct itemplate *itable_72[] = {$/;"	v	file:
itable_73	insnsd.c	/^static struct itemplate *itable_73[] = {$/;"	v	file:
itable_74	insnsd.c	/^static struct itemplate *itable_74[] = {$/;"	v	file:
itable_75	insnsd.c	/^static struct itemplate *itable_75[] = {$/;"	v	file:
itable_76	insnsd.c	/^static struct itemplate *itable_76[] = {$/;"	v	file:
itable_77	insnsd.c	/^static struct itemplate *itable_77[] = {$/;"	v	file:
itable_78	insnsd.c	/^static struct itemplate *itable_78[] = {$/;"	v	file:
itable_79	insnsd.c	/^static struct itemplate *itable_79[] = {$/;"	v	file:
itable_7A	insnsd.c	/^static struct itemplate *itable_7A[] = {$/;"	v	file:
itable_7B	insnsd.c	/^static struct itemplate *itable_7B[] = {$/;"	v	file:
itable_7C	insnsd.c	/^static struct itemplate *itable_7C[] = {$/;"	v	file:
itable_7D	insnsd.c	/^static struct itemplate *itable_7D[] = {$/;"	v	file:
itable_7E	insnsd.c	/^static struct itemplate *itable_7E[] = {$/;"	v	file:
itable_7F	insnsd.c	/^static struct itemplate *itable_7F[] = {$/;"	v	file:
itable_80	insnsd.c	/^static struct itemplate *itable_80[] = {$/;"	v	file:
itable_81	insnsd.c	/^static struct itemplate *itable_81[] = {$/;"	v	file:
itable_82	insnsd.c	/^static struct itemplate *itable_82[] = {$/;"	v	file:
itable_83	insnsd.c	/^static struct itemplate *itable_83[] = {$/;"	v	file:
itable_84	insnsd.c	/^static struct itemplate *itable_84[] = {$/;"	v	file:
itable_85	insnsd.c	/^static struct itemplate *itable_85[] = {$/;"	v	file:
itable_86	insnsd.c	/^static struct itemplate *itable_86[] = {$/;"	v	file:
itable_87	insnsd.c	/^static struct itemplate *itable_87[] = {$/;"	v	file:
itable_88	insnsd.c	/^static struct itemplate *itable_88[] = {$/;"	v	file:
itable_89	insnsd.c	/^static struct itemplate *itable_89[] = {$/;"	v	file:
itable_8A	insnsd.c	/^static struct itemplate *itable_8A[] = {$/;"	v	file:
itable_8B	insnsd.c	/^static struct itemplate *itable_8B[] = {$/;"	v	file:
itable_8C	insnsd.c	/^static struct itemplate *itable_8C[] = {$/;"	v	file:
itable_8D	insnsd.c	/^static struct itemplate *itable_8D[] = {$/;"	v	file:
itable_8E	insnsd.c	/^static struct itemplate *itable_8E[] = {$/;"	v	file:
itable_8F	insnsd.c	/^static struct itemplate *itable_8F[] = {$/;"	v	file:
itable_90	insnsd.c	/^static struct itemplate *itable_90[] = {$/;"	v	file:
itable_91	insnsd.c	/^static struct itemplate *itable_91[] = {$/;"	v	file:
itable_92	insnsd.c	/^static struct itemplate *itable_92[] = {$/;"	v	file:
itable_93	insnsd.c	/^static struct itemplate *itable_93[] = {$/;"	v	file:
itable_94	insnsd.c	/^static struct itemplate *itable_94[] = {$/;"	v	file:
itable_95	insnsd.c	/^static struct itemplate *itable_95[] = {$/;"	v	file:
itable_96	insnsd.c	/^static struct itemplate *itable_96[] = {$/;"	v	file:
itable_97	insnsd.c	/^static struct itemplate *itable_97[] = {$/;"	v	file:
itable_98	insnsd.c	/^static struct itemplate *itable_98[] = {$/;"	v	file:
itable_99	insnsd.c	/^static struct itemplate *itable_99[] = {$/;"	v	file:
itable_9A	insnsd.c	/^static struct itemplate *itable_9A[] = {$/;"	v	file:
itable_9B	insnsd.c	/^static struct itemplate *itable_9B[] = {$/;"	v	file:
itable_9C	insnsd.c	/^static struct itemplate *itable_9C[] = {$/;"	v	file:
itable_9D	insnsd.c	/^static struct itemplate *itable_9D[] = {$/;"	v	file:
itable_9E	insnsd.c	/^static struct itemplate *itable_9E[] = {$/;"	v	file:
itable_9F	insnsd.c	/^static struct itemplate *itable_9F[] = {$/;"	v	file:
itable_A0	insnsd.c	/^static struct itemplate *itable_A0[] = {$/;"	v	file:
itable_A1	insnsd.c	/^static struct itemplate *itable_A1[] = {$/;"	v	file:
itable_A2	insnsd.c	/^static struct itemplate *itable_A2[] = {$/;"	v	file:
itable_A3	insnsd.c	/^static struct itemplate *itable_A3[] = {$/;"	v	file:
itable_A4	insnsd.c	/^static struct itemplate *itable_A4[] = {$/;"	v	file:
itable_A5	insnsd.c	/^static struct itemplate *itable_A5[] = {$/;"	v	file:
itable_A6	insnsd.c	/^static struct itemplate *itable_A6[] = {$/;"	v	file:
itable_A7	insnsd.c	/^static struct itemplate *itable_A7[] = {$/;"	v	file:
itable_A8	insnsd.c	/^static struct itemplate *itable_A8[] = {$/;"	v	file:
itable_A9	insnsd.c	/^static struct itemplate *itable_A9[] = {$/;"	v	file:
itable_AA	insnsd.c	/^static struct itemplate *itable_AA[] = {$/;"	v	file:
itable_AB	insnsd.c	/^static struct itemplate *itable_AB[] = {$/;"	v	file:
itable_AC	insnsd.c	/^static struct itemplate *itable_AC[] = {$/;"	v	file:
itable_AD	insnsd.c	/^static struct itemplate *itable_AD[] = {$/;"	v	file:
itable_AE	insnsd.c	/^static struct itemplate *itable_AE[] = {$/;"	v	file:
itable_AF	insnsd.c	/^static struct itemplate *itable_AF[] = {$/;"	v	file:
itable_B0	insnsd.c	/^static struct itemplate *itable_B0[] = {$/;"	v	file:
itable_B1	insnsd.c	/^static struct itemplate *itable_B1[] = {$/;"	v	file:
itable_B2	insnsd.c	/^static struct itemplate *itable_B2[] = {$/;"	v	file:
itable_B3	insnsd.c	/^static struct itemplate *itable_B3[] = {$/;"	v	file:
itable_B4	insnsd.c	/^static struct itemplate *itable_B4[] = {$/;"	v	file:
itable_B5	insnsd.c	/^static struct itemplate *itable_B5[] = {$/;"	v	file:
itable_B6	insnsd.c	/^static struct itemplate *itable_B6[] = {$/;"	v	file:
itable_B7	insnsd.c	/^static struct itemplate *itable_B7[] = {$/;"	v	file:
itable_B8	insnsd.c	/^static struct itemplate *itable_B8[] = {$/;"	v	file:
itable_B9	insnsd.c	/^static struct itemplate *itable_B9[] = {$/;"	v	file:
itable_BA	insnsd.c	/^static struct itemplate *itable_BA[] = {$/;"	v	file:
itable_BB	insnsd.c	/^static struct itemplate *itable_BB[] = {$/;"	v	file:
itable_BC	insnsd.c	/^static struct itemplate *itable_BC[] = {$/;"	v	file:
itable_BD	insnsd.c	/^static struct itemplate *itable_BD[] = {$/;"	v	file:
itable_BE	insnsd.c	/^static struct itemplate *itable_BE[] = {$/;"	v	file:
itable_BF	insnsd.c	/^static struct itemplate *itable_BF[] = {$/;"	v	file:
itable_C0	insnsd.c	/^static struct itemplate *itable_C0[] = {$/;"	v	file:
itable_C1	insnsd.c	/^static struct itemplate *itable_C1[] = {$/;"	v	file:
itable_C2	insnsd.c	/^static struct itemplate *itable_C2[] = {$/;"	v	file:
itable_C3	insnsd.c	/^static struct itemplate *itable_C3[] = {$/;"	v	file:
itable_C4	insnsd.c	/^static struct itemplate *itable_C4[] = {$/;"	v	file:
itable_C5	insnsd.c	/^static struct itemplate *itable_C5[] = {$/;"	v	file:
itable_C6	insnsd.c	/^static struct itemplate *itable_C6[] = {$/;"	v	file:
itable_C7	insnsd.c	/^static struct itemplate *itable_C7[] = {$/;"	v	file:
itable_C8	insnsd.c	/^static struct itemplate *itable_C8[] = {$/;"	v	file:
itable_C9	insnsd.c	/^static struct itemplate *itable_C9[] = {$/;"	v	file:
itable_CA	insnsd.c	/^static struct itemplate *itable_CA[] = {$/;"	v	file:
itable_CB	insnsd.c	/^static struct itemplate *itable_CB[] = {$/;"	v	file:
itable_CC	insnsd.c	/^static struct itemplate *itable_CC[] = {$/;"	v	file:
itable_CD	insnsd.c	/^static struct itemplate *itable_CD[] = {$/;"	v	file:
itable_CE	insnsd.c	/^static struct itemplate *itable_CE[] = {$/;"	v	file:
itable_CF	insnsd.c	/^static struct itemplate *itable_CF[] = {$/;"	v	file:
itable_D0	insnsd.c	/^static struct itemplate *itable_D0[] = {$/;"	v	file:
itable_D1	insnsd.c	/^static struct itemplate *itable_D1[] = {$/;"	v	file:
itable_D2	insnsd.c	/^static struct itemplate *itable_D2[] = {$/;"	v	file:
itable_D3	insnsd.c	/^static struct itemplate *itable_D3[] = {$/;"	v	file:
itable_D4	insnsd.c	/^static struct itemplate *itable_D4[] = {$/;"	v	file:
itable_D5	insnsd.c	/^static struct itemplate *itable_D5[] = {$/;"	v	file:
itable_D6	insnsd.c	/^static struct itemplate *itable_D6[] = {$/;"	v	file:
itable_D7	insnsd.c	/^static struct itemplate *itable_D7[] = {$/;"	v	file:
itable_D8	insnsd.c	/^static struct itemplate *itable_D8[] = {$/;"	v	file:
itable_D9	insnsd.c	/^static struct itemplate *itable_D9[] = {$/;"	v	file:
itable_DA	insnsd.c	/^static struct itemplate *itable_DA[] = {$/;"	v	file:
itable_DB	insnsd.c	/^static struct itemplate *itable_DB[] = {$/;"	v	file:
itable_DC	insnsd.c	/^static struct itemplate *itable_DC[] = {$/;"	v	file:
itable_DD	insnsd.c	/^static struct itemplate *itable_DD[] = {$/;"	v	file:
itable_DE	insnsd.c	/^static struct itemplate *itable_DE[] = {$/;"	v	file:
itable_DF	insnsd.c	/^static struct itemplate *itable_DF[] = {$/;"	v	file:
itable_E0	insnsd.c	/^static struct itemplate *itable_E0[] = {$/;"	v	file:
itable_E1	insnsd.c	/^static struct itemplate *itable_E1[] = {$/;"	v	file:
itable_E2	insnsd.c	/^static struct itemplate *itable_E2[] = {$/;"	v	file:
itable_E3	insnsd.c	/^static struct itemplate *itable_E3[] = {$/;"	v	file:
itable_E4	insnsd.c	/^static struct itemplate *itable_E4[] = {$/;"	v	file:
itable_E5	insnsd.c	/^static struct itemplate *itable_E5[] = {$/;"	v	file:
itable_E6	insnsd.c	/^static struct itemplate *itable_E6[] = {$/;"	v	file:
itable_E7	insnsd.c	/^static struct itemplate *itable_E7[] = {$/;"	v	file:
itable_E8	insnsd.c	/^static struct itemplate *itable_E8[] = {$/;"	v	file:
itable_E9	insnsd.c	/^static struct itemplate *itable_E9[] = {$/;"	v	file:
itable_EA	insnsd.c	/^static struct itemplate *itable_EA[] = {$/;"	v	file:
itable_EB	insnsd.c	/^static struct itemplate *itable_EB[] = {$/;"	v	file:
itable_EC	insnsd.c	/^static struct itemplate *itable_EC[] = {$/;"	v	file:
itable_ED	insnsd.c	/^static struct itemplate *itable_ED[] = {$/;"	v	file:
itable_EE	insnsd.c	/^static struct itemplate *itable_EE[] = {$/;"	v	file:
itable_EF	insnsd.c	/^static struct itemplate *itable_EF[] = {$/;"	v	file:
itable_F0	insnsd.c	/^static struct itemplate *itable_F0[] = {$/;"	v	file:
itable_F1	insnsd.c	/^static struct itemplate *itable_F1[] = {$/;"	v	file:
itable_F2	insnsd.c	/^static struct itemplate *itable_F2[] = {$/;"	v	file:
itable_F3	insnsd.c	/^static struct itemplate *itable_F3[] = {$/;"	v	file:
itable_F4	insnsd.c	/^static struct itemplate *itable_F4[] = {$/;"	v	file:
itable_F5	insnsd.c	/^static struct itemplate *itable_F5[] = {$/;"	v	file:
itable_F6	insnsd.c	/^static struct itemplate *itable_F6[] = {$/;"	v	file:
itable_F7	insnsd.c	/^static struct itemplate *itable_F7[] = {$/;"	v	file:
itable_F8	insnsd.c	/^static struct itemplate *itable_F8[] = {$/;"	v	file:
itable_F9	insnsd.c	/^static struct itemplate *itable_F9[] = {$/;"	v	file:
itable_FA	insnsd.c	/^static struct itemplate *itable_FA[] = {$/;"	v	file:
itable_FB	insnsd.c	/^static struct itemplate *itable_FB[] = {$/;"	v	file:
itable_FC	insnsd.c	/^static struct itemplate *itable_FC[] = {$/;"	v	file:
itable_FD	insnsd.c	/^static struct itemplate *itable_FD[] = {$/;"	v	file:
itable_FE	insnsd.c	/^static struct itemplate *itable_FE[] = {$/;"	v	file:
itable_FF	insnsd.c	/^static struct itemplate *itable_FF[] = {$/;"	v	file:
itemplate	insns.h	/^struct itemplate {$/;"	s
jmp_match	assemble.c	/^static int jmp_match(long segment, long offset, int bits,$/;"	f	file:
known	nasm.h	/^    int known;$/;"	m
knownsegtypes	rdoff/rdoff.c	/^static char *knownsegtypes[8] = {$/;"	v	file:
l	nasmlib.h	/^        } l;$/;"	m	union:RAA::RAA_UNION
label	labels.c	/^        char *label, *special;$/;"	m	struct:label::<anonymous>	file:
label	labels.c	/^union label {                   \/* actual label structures *\/$/;"	u	file:
label	nasm.c	/^    const char *label;$/;"	m	struct:textargs	file:
label	nasm.h	/^    char *label;                \/* the label defined, or NULL *\/$/;"	m
label	output/outrdf.c	/^    char label[33];             \/* zero terminated as above. max len = 32 chars *\/$/;"	m	struct:ExportRec	file:
label	output/outrdf.c	/^    char label[33];             \/* zero terminated... should be written to file until$/;"	m	struct:ImportRec	file:
label	rdoff/rdoff.h	/^    char label[EXIM_LABEL_MAX]; \/* zero terminated as in import *\/$/;"	m	struct:CommonRec
label	rdoff/rdoff.h	/^    char label[EXIM_LABEL_MAX]; \/* zero terminated as in import *\/$/;"	m	struct:ExportRec
label	rdoff/rdoff.h	/^    char label[EXIM_LABEL_MAX]; \/* zero terminated, should be written to file$/;"	m	struct:ImportRec
labelfunc	eval.c	/^static lfunc labelfunc;         \/* Address of label routine *\/$/;"	v	file:
labels	output/outbin.c	/^    struct bin_label *labels;   \/* linked-list of label handles for map output. *\/$/;"	m	struct:Section	file:
labels_end	output/outbin.c	/^    struct bin_label **labels_end;      \/* Holds address of end of labels list. *\/$/;"	m	struct:Section	file:
ladsoft_debug_arr	output/outieee.c	/^static struct dfmt *ladsoft_debug_arr[3] = {$/;"	v	file:
ladsoft_debug_form	output/outieee.c	/^static struct dfmt ladsoft_debug_form = {$/;"	v	file:
last	output/outas86.c	/^    struct Piece *head, *last, **tail;$/;"	m	struct:Section	file:
last	output/outelf.c	/^    struct linelist *last;$/;"	m	struct:linelist	file:
last_defined	output/outieee.c	/^} *fpubhead, **fpubtail, *last_defined;$/;"	v	file:
last_defined	output/outobj.c	/^} *fpubhead, **fpubtail, *last_defined;$/;"	v	file:
last_section	output/outbin.c	/^} *sections, *last_section;$/;"	v	file:
lastlib	rdoff/ldrdf.c	/^struct librarynode *lastlib = NULL;$/;"	v
lastmodule	rdoff/ldrdf.c	/^struct modulenode *lastmodule = NULL;$/;"	v
layers	nasmlib.h	/^    int layers;$/;"	m	struct:RAA
lbl	test/changed.asm	/^lbl	istruc mytype$/;"	l
ld	lcc/lin-aout.c	/^char *ld[] = { "\/usr\/bin\/ld", "-m", "i386linux",$/;"	v
ld	lcc/lin-elf.c	/^char *ld[] = { "\/usr\/bin\/ld", "-m", "elf_i386",$/;"	v
ldfunc	nasm.h	/^typedef void (*ldfunc) (char *label, long segment, long offset,$/;"	t
ldrdfoptions	rdoff/ldrdf.c	/^struct ldrdfoptions {$/;"	s	file:
left	rdoff/segtab.c	/^    struct segtabnode *left;$/;"	m	struct:segtabnode	file:
leftcount	rdoff/segtab.c	/^    int leftcount;$/;"	m	struct:segtabnode	file:
len	output/outaout.c	/^    unsigned long len, size, nrelocs;$/;"	m	struct:Section	file:
len	output/outas86.c	/^    unsigned long datalen, size, len;$/;"	m	struct:Section	file:
len	output/outcoff.c	/^    int len;$/;"	m	struct:tagString	file:
len	output/outcoff.c	/^    unsigned long len;$/;"	m	struct:Section	file:
len	output/outelf.c	/^    long len;$/;"	m	struct:ELF_SECTDATA	file:
len	output/outelf.c	/^    unsigned long len, size, nrelocs;$/;"	m	struct:Section	file:
length	nasmlib.h	/^    long elem_len, length, posn, start, rpos;$/;"	m	struct:SAA
length	output/outbin.c	/^    long length;                \/* section length in bytes *\/$/;"	m	struct:Section	file:
length	output/outrdf.c	/^    char length;                \/* 1 2 or 4 bytes *\/$/;"	m	struct:RelocRec	file:
length	output/outrdf.c	/^    int length;$/;"	m	struct:memorybuffer	file:
length	rdoff/rdoff.h	/^    byte length;                \/* 1 2 or 4 bytes *\/$/;"	m	struct:RelocRec
length	rdoff/rdoff.h	/^    int length;$/;"	m	struct:memorybuffer
length	rdoff/rdoff.h	/^    long length;$/;"	m	struct:SegmentHeaderRec
length	sync.c	/^    unsigned long length;$/;"	m	struct:Sync	file:
level	listing.c	/^    int level;$/;"	m	struct:MacroInhibit	file:
lfree	labels.c	/^static union label *lfree[LABEL_HASHES];        \/* pointer into the above *\/$/;"	v	file:
lfunc	nasm.h	/^typedef int (*lfunc) (char *label, long *segment, long *offset);$/;"	t
lib_isnumchar	nasmlib.c	156;"	d	file:
libname	output/outobj.c	/^    char *libname;$/;"	m	struct:ImpDef	file:
libname	output/outrdf.c	/^    char libname[128];          \/* name of library to link with at load time *\/$/;"	m	struct:DLLRec	file:
libname	rdoff/rdoff.h	/^    char libname[MODLIB_NAME_MAX];      \/* name of library to link with at load time *\/$/;"	m	struct:DLLRec
libpath	rdoff/ldrdf.c	/^    int libpath;$/;"	m	struct:ldrdfoptions	file:
libpath	rdoff/ldrdf.c	/^char *libpath = NULL;$/;"	v
libraries	rdoff/ldrdf.c	/^struct librarynode *libraries = NULL;$/;"	v
librarynode	rdoff/rdlib.h	/^struct librarynode {$/;"	s
line	nasm.h	/^    void (*line) (int, char *);$/;"	m
line	output/outelf.c	/^    int line;$/;"	m	struct:linelist	file:
line_number	nasmlib.c	/^static long line_number = 0;$/;"	v	file:
lineinc	preproc.c	/^    int lineno, lineinc;$/;"	m	struct:Include	file:
linelist	output/outelf.c	/^struct linelist {$/;"	s	file:
lineno	nasm.c	/^    int lineno;$/;"	m	struct:forwrefinfo	file:
lineno	output/outieee.c	/^    long lineno;$/;"	m	struct:LineNumber	file:
lineno	output/outobj.c	/^    long lineno;$/;"	m	struct:LineNumber	file:
lineno	preproc.c	/^    int lineno, lineinc;$/;"	m	struct:Include	file:
lineno	preproc.c	/^    int lineno;                 \/* Current line number on expansion *\/$/;"	m	struct:MMacro	file:
linenum	nasm.h	/^    void (*linenum) (const char *filename, long linenumber, long segto);$/;"	m	struct:dfmt
list	assemble.c	/^static ListGen *list;$/;"	v	file:
list	preproc.c	/^static ListGen *list;$/;"	v	file:
list_cleanup	listing.c	/^static void list_cleanup(void)$/;"	f	file:
list_downlevel	listing.c	/^static void list_downlevel(int type)$/;"	f	file:
list_emit	listing.c	/^static void list_emit(void)$/;"	f	file:
list_init	listing.c	/^static void list_init(char *fname, efunc error)$/;"	f	file:
list_line	listing.c	/^static void list_line(int type, char *line)$/;"	f	file:
list_out	listing.c	/^static void list_out(long offset, char *str)$/;"	f	file:
list_output	listing.c	/^static void list_output(long offset, const void *data, unsigned long type)$/;"	f	file:
list_uplevel	listing.c	/^static void list_uplevel(int type)$/;"	f	file:
listdata	listing.c	/^static char listdata[2 * LIST_INDENT];  \/* we need less than that actually *\/$/;"	v	file:
listfp	listing.c	/^static FILE *listfp;$/;"	v	file:
listlevel	listing.c	/^static int listlevel, listlevel_e;$/;"	v	file:
listlevel_e	listing.c	/^static int listlevel, listlevel_e;$/;"	v	file:
listline	listing.c	/^static char listline[LIST_MAX_LEN];$/;"	v	file:
listlineno	listing.c	/^static long listlineno;$/;"	v	file:
listlinep	listing.c	/^static int listlinep;$/;"	v	file:
listname	nasm.c	/^static char listname[FILENAME_MAX];$/;"	v	file:
listoffset	listing.c	/^static long listoffset;$/;"	v	file:
listp	listing.c	/^static long listp;$/;"	v	file:
lnhead	output/outobj.c	/^    struct LineNumber *lnhead, **lntail;$/;"	m	struct:FileName	file:
lntail	output/outobj.c	/^    struct LineNumber *lnhead, **lntail;$/;"	m	struct:FileName	file:
loadmodule	rdoff/ldrdf.c	/^void loadmodule(const char *filename)$/;"	f
loc_t	nasm.h	/^} loc_t;$/;"	t
localbss	rdoff/test/rdftest1.asm	/^localbss:	resw 4		; reserve 8 bytes BSS$/;"	l
localdata	rdoff/test/rdftest1.asm	/^localdata:	db 'localdata',0$/;"	d
localdata2	rdoff/test/rdftest1.asm	/^localdata2:	db 'localdata2',0$/;"	d
localint	test/aoutso.asm	/^localint  resd 1		; [6]$/;"	l
localint	test/aouttest.asm	/^localint  resd 1		; [6]$/;"	l
localint	test/cofftest.asm	/^localint  resd 1		; [6]$/;"	l
localint	test/elfso.asm	/^localint  resd 1		; [6]$/;"	l
localint	test/elftest.asm	/^localint  resd 1		; [6]$/;"	l
localmac	preproc.c	/^    SMacro *localmac;$/;"	m	struct:Context	file:
localproc	rdoff/test/rdftest1.asm	/^localproc:	$/;"	l
localptr	test/aoutso.asm	/^localptr  dd localint		; [5] [17]$/;"	d
localptr	test/aouttest.asm	/^localptr  dd localint		; [5] [17]$/;"	d
localptr	test/cofftest.asm	/^localptr  dd localint		; [5] [17]$/;"	d
localptr	test/elfso.asm	/^localptr  dd localint		; [5] [17]$/;"	d
localptr	test/elftest.asm	/^localptr  dd localint		; [5] [17]$/;"	d
localref	rdoff/test/rdftest1.asm	/^localref:	dd _main	; [2] => 0 (+0)$/;"	d
localseg	rdoff/segtab.c	/^    int localseg;$/;"	m	struct:segtabnode	file:
location	eval.c	/^static loc_t *location;         \/* Pointer to current line's segment,offset *\/$/;"	v	file:
location	nasm.c	/^static loc_t location;$/;"	v	file:
location	parser.c	/^static loc_t *location;         \/* Pointer to current line's segment,offset *\/$/;"	v	file:
lochead	output/outieee.c	/^    struct ieeePublic *pubhead, **pubtail, *lochead, **loctail;$/;"	m	struct:ieeeSection	file:
lochead	output/outobj.c	/^    struct Public *pubhead, **pubtail, *lochead, **loctail;$/;"	m	struct:Segment	file:
loctail	output/outieee.c	/^    struct ieeePublic *pubhead, **pubtail, *lochead, **loctail;$/;"	m	struct:ieeeSection	file:
loctail	output/outobj.c	/^    struct Public *pubhead, **pubtail, *lochead, **loctail;$/;"	m	struct:Segment	file:
logfp	nasmlib.c	/^static FILE *logfp;$/;"	v	file:
longtolocal	rdoff/rdflib.c	/^static void longtolocal(long *l)$/;"	f	file:
longtolocal	rdoff/rdlar.c	/^static void longtolocal(long *l)$/;"	f	file:
lookformodule	rdoff/ldrdf.c	/^int lookformodule(const char *name)$/;"	f
lookup_label	labels.c	/^int lookup_label(char *label, long *segment, long *offset)$/;"	f
lpostfix	labels.c	/^char lpostfix[PREFIX_MAX] = { 0 };$/;"	v
lprefix	labels.c	/^char lprefix[PREFIX_MAX] = { 0 };$/;"	v
lrotate	test/elfso.asm	/^lrotate:			; [1]$/;"	l
lrotate	test/elftest.asm	/^lrotate:			; [1]$/;"	l
ltab	labels.c	/^static union label *ltab[LABEL_HASHES]; \/* using a hash table *\/$/;"	v	file:
m	rdoff/rdoff.h	/^    struct ModRec m;            \/* type == 8 *\/$/;"	m	union:RDFHeaderRec
mac	preproc.c	/^    SMacro *mac;                \/* associated macro for TOK_SMAC_END *\/$/;"	m	struct:Token	file:
magic	rdoff/rdlar.h	/^    unsigned long magic;        \/* Must be RDLAMAG *\/$/;"	m	struct:rdlm_hdr
main	nasm.c	/^int main(int argc, char **argv)$/;"	f
main	ndisasm.c	/^int main(int argc, char **argv)$/;"	f
main	rdoff/ldrdf.c	/^int main(int argc, char **argv)$/;"	f
main	rdoff/rdf2bin.c	/^int main(int argc, char **argv)$/;"	f
main	rdoff/rdf2ihx.c	/^int main(int argc, char **argv)$/;"	f
main	rdoff/rdfdump.c	/^int main(int argc, char **argv)$/;"	f
main	rdoff/rdflib.c	/^int main(int argc, char **argv)$/;"	f
main	rdoff/rdlar.c	/^int main(int argc, char *argv[])$/;"	f
main	rdoff/rdx.c	/^int main(int argc, char **argv)$/;"	f
main	test/aouttest.c	/^int main(void)$/;"	f
main	test/cofftest.c	/^int main(void)$/;"	f
main	test/elftest.c	/^int main(void)$/;"	f
main	test/objlink.c	/^int main(void)$/;"	f
main_fn	rdoff/rdx.c	/^typedef int (*main_fn) (int, char **);  \/* Main function prototype *\/$/;"	t	file:
make_tok_num	preproc.c	/^static void make_tok_num(Token * tok, long val)$/;"	f	file:
mandir	Makefile	/^mandir		= ${prefix}\/man$/;"	m
mandir	doc/Makefile	/^mandir		= ${prefix}\/man$/;"	m
mandir	rdoff/Makefile	/^mandir		= ${prefix}\/man$/;"	m
map_control	output/outbin.c	/^static int map_control = 0;$/;"	v	file:
matches	assemble.c	/^static int matches(struct itemplate *itemp, insn * instruction)$/;"	f	file:
matches	disasm.c	/^static int matches(struct itemplate *t, unsigned char *data, int asize,$/;"	f	file:
membufdump	output/outrdf.c	/^static void membufdump(memorybuffer * b, FILE * fp)$/;"	f	file:
membufdump	rdoff/rdoff.c	/^void membufdump(memorybuffer * b, FILE * fp)$/;"	f
membuflength	output/outrdf.c	/^static int membuflength(memorybuffer * b)$/;"	f	file:
membuflength	rdoff/rdoff.c	/^int membuflength(memorybuffer * b)$/;"	f
membufwrite	output/outrdf.c	/^static void membufwrite(memorybuffer * b, void *data, int bytes)$/;"	f	file:
membufwrite	output/outrdf2.c	/^static void membufwrite(int segment, const void *data, int bytes)$/;"	f	file:
membufwrite	rdoff/rdoff.c	/^void membufwrite(memorybuffer * const b, void *data, int bytes)$/;"	f
memorybuffer	output/outrdf.c	/^typedef struct memorybuffer {$/;"	s	file:
memorybuffer	output/outrdf.c	/^} memorybuffer;$/;"	t	file:
memorybuffer	rdoff/rdoff.h	/^typedef struct memorybuffer {$/;"	s
memorybuffer	rdoff/rdoff.h	/^} memorybuffer;$/;"	t
mergetype	rdoff/ldsegs.h	/^    UI16 mergetype;             \/* if SEG_MERGE what type segment do we merge with?$/;"	m	struct:segconfig
message	test/inc1.asm	/^message:  db 'hello, world',13,10,'$'$/;"	d
mistack	listing.c	/^} *mistack;$/;"	v	file:
mkparaarray	doc/genps.pl	/^sub mkparaarray($@) {$/;"	s
mmacros	preproc.c	/^static MMacro *mmacros[NHASH];$/;"	v	file:
mmxreg	regdis.c	/^static const int mmxreg  [] = {R_MM0,R_MM1,R_MM2,R_MM3,R_MM4,R_MM5,R_MM6,R_MM7};$/;"	v	file:
mode	rdoff/rdlar.h	/^    unsigned long mode;         \/* File mode *\/$/;"	m	struct:rdlm_hdr
modifiers	rdoff/rdlar.c	/^const char modifiers[] = "cflouvV";$/;"	v
modname	rdoff/rdoff.h	/^    char modname[MODLIB_NAME_MAX];      \/* module name *\/$/;"	m	struct:ModRec
modrm	assemble.c	/^    unsigned char modrm, sib;   \/* the bytes themselves *\/$/;"	m	file:
modulenode	rdoff/ldrdf.c	/^struct modulenode {$/;"	s	file:
modules	rdoff/ldrdf.c	/^struct modulenode *modules = NULL;$/;"	v
more	test/multisection.asm	/^more:$/;"	l
movingon	labels.c	/^        long movingon, dummy;$/;"	m	struct:label::<anonymous>	file:
mstk	preproc.c	/^    MMacro *mstk;               \/* stack of active macros\/reps *\/$/;"	m	struct:Include	file:
mstrcmp	preproc.c	/^static int mstrcmp(char *p, char *q, int casesense)$/;"	f	file:
mybssdata	rdoff/test/rdftest2.asm	/^mybssdata:	resw 1$/;"	l
myproc	rdoff/test/rdftest2.asm	/^myproc:$/;"	l
myself	test/changed.asm	/^myself equ myself+1$/;"	d
mystr1	test/multisection.asm	/^mystr1: db "Hello, this is string 1", 13, 10, '$'$/;"	d
n_desc	output/outelf.c	/^    unsigned short n_desc;$/;"	m	struct:stabentry	file:
n_other	output/outelf.c	/^    unsigned char n_other;$/;"	m	struct:stabentry	file:
n_strx	output/outelf.c	/^    unsigned long n_strx;$/;"	m	struct:stabentry	file:
n_type	output/outelf.c	/^    unsigned char n_type;$/;"	m	struct:stabentry	file:
n_value	output/outelf.c	/^    unsigned long n_value;$/;"	m	struct:stabentry	file:
name	output/outaout.c	/^    char *name;                 \/* for unresolved-size symbols *\/$/;"	m	struct:Symbol	file:
name	output/outbin.c	/^    char *name;$/;"	m	struct:Section	file:
name	output/outbin.c	/^    char *name;$/;"	m	struct:bin_label	file:
name	output/outcoff.c	/^    char name[9];$/;"	m	struct:Section	file:
name	output/outcoff.c	/^    char name[9];$/;"	m	struct:Symbol	file:
name	output/outdbg.c	/^    char *name;$/;"	m	struct:Section	file:
name	output/outelf.c	/^    char *name;                 \/* shallow-copied pointer of section name *\/$/;"	m	struct:symlininfo	file:
name	output/outelf.c	/^    char *name;                 \/* used temporarily if in above list *\/$/;"	m	struct:Symbol	file:
name	output/outelf.c	/^    char *name;$/;"	m	struct:Section	file:
name	output/outieee.c	/^    char *name;$/;"	m	struct:FileName	file:
name	output/outieee.c	/^    char *name;$/;"	m	struct:ieeeExternal	file:
name	output/outieee.c	/^    char *name;$/;"	m	struct:ieeePublic	file:
name	output/outieee.c	/^    char *name;$/;"	m	struct:ieeeSection	file:
name	output/outobj.c	/^        char *name;$/;"	m	union:Group::<anonymous>	file:
name	output/outobj.c	/^    char *name;$/;"	m	struct:External	file:
name	output/outobj.c	/^    char *name;$/;"	m	struct:FileName	file:
name	output/outobj.c	/^    char *name;$/;"	m	struct:Group	file:
name	output/outobj.c	/^    char *name;$/;"	m	struct:Public	file:
name	output/outobj.c	/^    char *name;$/;"	m	struct:Segment	file:
name	preproc.c	/^    char *name;$/;"	m	struct:Context	file:
name	preproc.c	/^    char *name;$/;"	m	struct:MMacro	file:
name	preproc.c	/^    char *name;$/;"	m	struct:SMacro	file:
name	rdoff/ldrdf.c	/^    char *name;$/;"	m	struct:modulenode	file:
name	rdoff/rdlib.h	/^    char *name;$/;"	m	struct:librarynode
name	rdoff/rdoff.h	/^    char *name;                 \/* name of module in libraries *\/$/;"	m	struct:RDFFileInfo
name	rdoff/symtab.h	/^    char *name;$/;"	m
nasm_bol_self_ins	misc/nasm.sl	/^define nasm_bol_self_ins() {$/;"	f
nasm_fputs	nasm.c	/^static void nasm_fputs(const char *line, FILE * outfile)$/;"	f	file:
nasm_free	nasmlib.h	44;"	d
nasm_free_log	nasmlib.c	/^void nasm_free_log(char *file, int line, void *q)$/;"	f
nasm_indent_line	misc/nasm.sl	/^define nasm_indent_line() {$/;"	f
nasm_insert_comment	misc/nasm.sl	/^define nasm_insert_comment() {$/;"	f
nasm_instructions	insnsa.c	/^struct itemplate *nasm_instructions[] = {$/;"	v
nasm_malloc	nasmlib.h	42;"	d
nasm_malloc_error	nasmlib.c	/^static efunc nasm_malloc_error;$/;"	v	file:
nasm_malloc_log	nasmlib.c	/^void *nasm_malloc_log(char *file, int line, size_t size)$/;"	f
nasm_mode	misc/nasm.sl	/^define nasm_mode() {$/;"	f
nasm_newline_indent	misc/nasm.sl	/^define nasm_newline_indent() {$/;"	f
nasm_quote	nasmlib.c	/^void nasm_quote(char **str)$/;"	f
nasm_realloc	nasmlib.h	43;"	d
nasm_realloc_log	nasmlib.c	/^void *nasm_realloc_log(char *file, int line, void *q, size_t size)$/;"	f
nasm_self_ins_ind	misc/nasm.sl	/^define nasm_self_ins_ind() {$/;"	f
nasm_set_malloc_error	nasmlib.c	/^void nasm_set_malloc_error(efunc error)$/;"	f
nasm_strcat	nasmlib.c	/^char *nasm_strcat(char *one, char *two)$/;"	f
nasm_strdup	nasmlib.h	45;"	d
nasm_strdup_log	nasmlib.c	/^char *nasm_strdup_log(char *file, int line, const char *s)$/;"	f
nasm_stricmp	nasmlib.c	/^int nasm_stricmp(const char *s1, const char *s2)$/;"	f
nasm_stricmp	nasmlib.h	56;"	d
nasm_stricmp	nasmlib.h	58;"	d
nasm_strndup	nasmlib.h	46;"	d
nasm_strndup_log	nasmlib.c	/^char *nasm_strndup_log(char *file, int line, char *s, size_t len)$/;"	f
nasm_strnicmp	nasmlib.c	/^int nasm_strnicmp(const char *s1, const char *s2, int n)$/;"	f
nasm_strnicmp	nasmlib.h	66;"	d
nasm_strnicmp	nasmlib.h	68;"	d
nasmlib_cleanup	nasmlib.c	/^void nasmlib_cleanup(void)$/;"	f
nasmlist	listing.c	/^ListGen nasmlist = {$/;"	v
nasmpp	preproc.c	/^Preproc nasmpp = {$/;"	v
ndefs	preproc.c	/^    int ndefs;                  \/* number of default parameters *\/$/;"	m	struct:MMacro	file:
ndrivers	outform.c	/^static int ndrivers = 0;$/;"	v	file:
neither	test/changed.asm	/^neither equ \$$/;"	d
nentries	output/outobj.c	/^    long nentries;              \/* number of elements... *\/$/;"	m	struct:Group	file:
new_Block	preproc.c	/^static void *new_Block(size_t size)$/;"	f	file:
new_Token	preproc.c	/^static Token *new_Token(Token * next, int type, char *text, int txtlen)$/;"	f	file:
newheader	rdoff/ldrdf.c	/^rdf_headerbuf *newheader = NULL;$/;"	v
newmembuf	output/outrdf.c	/^static memorybuffer *newmembuf(void)$/;"	f	file:
newmembuf	rdoff/rdoff.c	/^memorybuffer *newmembuf()$/;"	f
newstr	rdoff/ldrdf.c	65;"	d	file:
newstr	rdoff/rdoff.c	27;"	d	file:
newstrcat	rdoff/ldrdf.c	66;"	d	file:
newstrcat	rdoff/rdoff.c	28;"	d	file:
next	labels.c	/^        union label *next;$/;"	m	struct:label::<anonymous>	file:
next	labels.c	/^    struct permts *next;        \/* for the linked list *\/$/;"	m	struct:permts	file:
next	listing.c	/^    MacroInhibit *next;$/;"	m	struct:MacroInhibit	file:
next	nasm.h	/^    struct extop *next;         \/* linked list *\/$/;"	m	struct:extop
next	nasmlib.h	/^    struct SAA *next, *end, *rptr;$/;"	m	struct:SAA
next	output/outaout.c	/^    struct Reloc *next;$/;"	m	struct:Reloc	file:
next	output/outaout.c	/^    struct Symbol *next;        \/* list of globals in each section *\/$/;"	m	struct:Symbol	file:
next	output/outas86.c	/^    struct Piece *next;$/;"	m	struct:Piece	file:
next	output/outbin.c	/^    struct Reloc *next;$/;"	m	struct:Reloc	file:
next	output/outbin.c	/^    struct Section *next;       \/* This links sections with a defined start address. *\/$/;"	m	struct:Section	file:
next	output/outbin.c	/^    struct bin_label *next;$/;"	m	struct:bin_label	file:
next	output/outcoff.c	/^    struct Reloc *next;$/;"	m	struct:Reloc	file:
next	output/outdbg.c	/^    struct Section *next;$/;"	m	struct:Section	file:
next	output/outelf.c	/^    struct Reloc *next;$/;"	m	struct:Reloc	file:
next	output/outelf.c	/^    struct Symbol *next;        \/* list of globals in each section *\/$/;"	m	struct:Symbol	file:
next	output/outelf.c	/^    struct linelist *next;$/;"	m	struct:linelist	file:
next	output/outieee.c	/^    struct Array *next;$/;"	m	struct:Array	file:
next	output/outieee.c	/^    struct ExtBack *next;$/;"	m	struct:ExtBack	file:
next	output/outieee.c	/^    struct FileName *next;$/;"	m	struct:FileName	file:
next	output/outieee.c	/^    struct LineNumber *next;$/;"	m	struct:LineNumber	file:
next	output/outieee.c	/^    struct ieeeExternal *next;$/;"	m	struct:ieeeExternal	file:
next	output/outieee.c	/^    struct ieeeFixupp *next;$/;"	m	struct:ieeeFixupp	file:
next	output/outieee.c	/^    struct ieeeObjData *next;$/;"	m	struct:ieeeObjData	file:
next	output/outieee.c	/^    struct ieeePublic *next;$/;"	m	struct:ieeePublic	file:
next	output/outieee.c	/^    struct ieeeSection *next;$/;"	m	struct:ieeeSection	file:
next	output/outobj.c	/^    struct Array *next;$/;"	m	struct:Array	file:
next	output/outobj.c	/^    struct ExpDef *next;$/;"	m	struct:ExpDef	file:
next	output/outobj.c	/^    struct ExtBack *next;$/;"	m	struct:ExtBack	file:
next	output/outobj.c	/^    struct External *next;$/;"	m	struct:External	file:
next	output/outobj.c	/^    struct FileName *next;$/;"	m	struct:FileName	file:
next	output/outobj.c	/^    struct Group *next;$/;"	m	struct:Group	file:
next	output/outobj.c	/^    struct ImpDef *next;$/;"	m	struct:ImpDef	file:
next	output/outobj.c	/^    struct LineNumber *next;$/;"	m	struct:LineNumber	file:
next	output/outobj.c	/^    struct Public *next;$/;"	m	struct:Public	file:
next	output/outobj.c	/^    struct Segment *next;$/;"	m	struct:Segment	file:
next	output/outrdf.c	/^    struct memorybuffer *next;$/;"	m	struct:memorybuffer	file:
next	preproc.c	/^    Blocks *next;$/;"	m	struct:Blocks	file:
next	preproc.c	/^    Cond *next;$/;"	m	struct:Cond	file:
next	preproc.c	/^    Context *next;$/;"	m	struct:Context	file:
next	preproc.c	/^    IncPath *next;$/;"	m	struct:IncPath	file:
next	preproc.c	/^    Include *next;$/;"	m	struct:Include	file:
next	preproc.c	/^    Line *next;$/;"	m	struct:Line	file:
next	preproc.c	/^    MMacro *next;$/;"	m	struct:MMacro	file:
next	preproc.c	/^    SMacro *next;$/;"	m	struct:SMacro	file:
next	preproc.c	/^    Token *next;$/;"	m	struct:Token	file:
next	rdoff/collectn.h	/^    struct tagCollection *next;$/;"	m	struct:tagCollection
next	rdoff/ldrdf.c	/^    struct modulenode *next;$/;"	m	struct:modulenode	file:
next	rdoff/rdlib.h	/^    struct librarynode *next;   \/* if ! referenced. *\/$/;"	m	struct:librarynode
next	rdoff/rdoff.h	/^    struct memorybuffer *next;$/;"	m	struct:memorybuffer
next	rdoff/symtab.c	/^    struct tagSymtabNode *next;$/;"	m	struct:tagSymtabNode	file:
next	rdoff/test/rdftest1.asm	/^next:$/;"	l
next	test/changed.asm	/^next:$/;"	l
next_active	preproc.c	/^    MMacro *next_active;$/;"	m	struct:MMacro	file:
next_dws	output/outobj.c	/^    struct External *next_dws;  \/* next with DEFWRT_STRING *\/$/;"	m	struct:External	file:
next_seg	nasmlib.c	/^static long next_seg;$/;"	v	file:
next_sync	sync.c	/^unsigned long next_sync(unsigned long position, unsigned long *length)$/;"	f
nextfwd	output/outaout.c	/^    struct Symbol *nextfwd;     \/* list of unresolved-size symbols *\/$/;"	m	struct:Symbol	file:
nextfwd	output/outelf.c	/^    struct Symbol *nextfwd;     \/* list of unresolved-size symbols *\/$/;"	m	struct:Symbol	file:
nglobs	output/outelf.c	/^static unsigned long nlocals, nglobs;$/;"	v	file:
nindices	output/outobj.c	/^    long nindices;              \/* ...and number of index elts... *\/$/;"	m	struct:Group	file:
nlocals	output/outelf.c	/^static unsigned long nlocals, nglobs;$/;"	v	file:
no_pp	nasm.c	/^static Preproc no_pp = {$/;"	v	file:
no_pp_cleanup	nasm.c	/^static void no_pp_cleanup(int pass)$/;"	f	file:
no_pp_err	nasm.c	/^static efunc no_pp_err;$/;"	v	file:
no_pp_fp	nasm.c	/^static FILE *no_pp_fp;$/;"	v	file:
no_pp_getline	nasm.c	/^static char *no_pp_getline(void)$/;"	f	file:
no_pp_lineinc	nasm.c	/^static long no_pp_lineinc;$/;"	v	file:
no_pp_list	nasm.c	/^static ListGen *no_pp_list;$/;"	v	file:
no_pp_reset	nasm.c	/^static void no_pp_reset(char *file, int pass, efunc error, evalfunc eval,$/;"	f	file:
no_seg_labels	output/outbin.c	/^} *no_seg_labels, **nsl_tail;$/;"	v	file:
nolist	preproc.c	/^    int nolist;                 \/* is this macro listing-inhibited? *\/$/;"	m	struct:MMacro	file:
nop	test/changed.asm	/^nop$/;"	l
nparam	preproc.c	/^    int nparam, rotate, *paramlen;$/;"	m	struct:MMacro	file:
nparam	preproc.c	/^    int nparam;$/;"	m	struct:SMacro	file:
nparam_max	preproc.c	/^    int nparam_min, nparam_max;$/;"	m	struct:MMacro	file:
nparam_min	preproc.c	/^    int nparam_min, nparam_max;$/;"	m	struct:MMacro	file:
nprefix	nasm.h	/^    int nprefix;                \/* number of entries in above *\/$/;"	m
nrelocs	output/outaout.c	/^    unsigned long len, size, nrelocs;$/;"	m	struct:Section	file:
nrelocs	output/outcoff.c	/^    int nrelocs;$/;"	m	struct:Section	file:
nrelocs	output/outelf.c	/^    unsigned long len, size, nrelocs;$/;"	m	struct:Section	file:
nsects	output/outcoff.c	/^static int nsects, sectlen;$/;"	v	file:
nsects	output/outelf.c	/^static int nsects, sectlen;$/;"	v	file:
nsegments	output/outrdf2.c	/^static int nsegments;$/;"	v	file:
nsegments	rdoff/rdoff.h	/^    int nsegments;              \/* number of segments to be written *\/$/;"	m
nsegs	rdoff/ldrdf.c	/^int nsegs = 0;$/;"	v
nsegs	rdoff/rdoff.h	/^    int nsegs;$/;"	m	struct:RDFFileInfo
nsl_tail	output/outbin.c	/^} *no_seg_labels, **nsl_tail;$/;"	v	file:
nsyms	output/outaout.c	/^static unsigned long nsyms;$/;"	v	file:
nsyms	output/outas86.c	/^static unsigned long nsyms;$/;"	v	file:
nsyms	output/outcoff.c	/^static unsigned long nsyms;$/;"	v	file:
nsynx	sync.c	/^static int nsynx;$/;"	v	file:
ntempexpr	eval.c	/^static int ntempexpr;$/;"	v	file:
ntempexprs	eval.c	/^static int ntempexprs;$/;"	v	file:
null_debug_arr	nasmlib.c	/^struct dfmt *null_debug_arr[2] = { &null_debug_form, NULL };$/;"	v
null_debug_cleanup	nasmlib.c	/^void null_debug_cleanup(void)$/;"	f
null_debug_deflabel	nasmlib.c	/^void null_debug_deflabel(char *name, long segment, long offset,$/;"	f
null_debug_form	nasmlib.c	/^struct dfmt null_debug_form = {$/;"	v
null_debug_init	nasmlib.c	/^void null_debug_init(struct ofmt *of, void *id, FILE * fp, efunc error)$/;"	f
null_debug_linenum	nasmlib.c	/^void null_debug_linenum(const char *filename, long linenumber, long segto)$/;"	f
null_debug_output	nasmlib.c	/^void null_debug_output(int type, void *param)$/;"	f
null_debug_routine	nasmlib.c	/^void null_debug_routine(const char *directive, const char *params)$/;"	f
null_debug_typevalue	nasmlib.c	/^void null_debug_typevalue(long type)$/;"	f
number	output/outas86.c	/^    int number;                 \/* symbol\/segment number (4=bss) *\/$/;"	m	struct:Piece	file:
number	output/outdbg.c	/^    long number;$/;"	m	struct:Section	file:
number	preproc.c	/^    unsigned long number;$/;"	m	struct:Context	file:
number	rdoff/rdoff.h	/^    uint16 number;$/;"	m	struct:SegmentHeaderRec
numlinestabs	output/outelf.c	/^static int numlinestabs = 0;$/;"	v	file:
numvalue	nasm.h	345;"	d
numvalue	nasmlib.c	157;"	d	file:
obj_bump	output/outobj.c	/^static ObjRecord *obj_bump(ObjRecord * orp)$/;"	f	file:
obj_byte	output/outobj.c	/^static ObjRecord *obj_byte(ObjRecord * orp, unsigned char val)$/;"	f	file:
obj_check	output/outobj.c	/^static ObjRecord *obj_check(ObjRecord * orp, int size)$/;"	f	file:
obj_cleanup	output/outobj.c	/^static void obj_cleanup(int debuginfo)$/;"	f	file:
obj_clear	output/outobj.c	/^static ObjRecord *obj_clear(ObjRecord * orp)$/;"	f	file:
obj_commit	output/outobj.c	/^static ObjRecord *obj_commit(ObjRecord * orp)$/;"	f	file:
obj_deflabel	output/outobj.c	/^static void obj_deflabel(char *name, long segment,$/;"	f	file:
obj_directive	output/outobj.c	/^static int obj_directive(char *directive, char *value, int pass)$/;"	f	file:
obj_dword	output/outobj.c	/^static ObjRecord *obj_dword(ObjRecord * orp, unsigned long val)$/;"	f	file:
obj_emit	output/outobj.c	/^static ObjRecord *obj_emit(ObjRecord * orp)$/;"	f	file:
obj_emit2	output/outobj.c	/^static ObjRecord *obj_emit2(ObjRecord * orp)$/;"	f	file:
obj_entry_ofs	output/outobj.c	/^static long obj_entry_seg, obj_entry_ofs;$/;"	v	file:
obj_entry_seg	output/outobj.c	/^static long obj_entry_seg, obj_entry_ofs;$/;"	v	file:
obj_ext_set_defwrt	output/outobj.c	/^static void obj_ext_set_defwrt(struct External *ext, char *id)$/;"	f	file:
obj_filename	output/outobj.c	/^static void obj_filename(char *inname, char *outname, efunc lerror)$/;"	f	file:
obj_force	output/outobj.c	/^static ObjRecord *obj_force(ObjRecord * orp, int x)$/;"	f	file:
obj_fwrite	output/outobj.c	/^void obj_fwrite(ObjRecord * orp)$/;"	f
obj_grp_needs_update	output/outobj.c	/^} *grphead, **grptail, *obj_grp_needs_update;$/;"	v	file:
obj_index	output/outobj.c	/^    long obj_index;             \/* OBJ-file group index *\/$/;"	m	struct:Group	file:
obj_index	output/outobj.c	/^    long obj_index;             \/* the OBJ-file segment index *\/$/;"	m	struct:Segment	file:
obj_index	output/outobj.c	/^static ObjRecord *obj_index(ObjRecord * orp, unsigned int val)$/;"	f	file:
obj_infile	output/outobj.c	/^static char obj_infile[FILENAME_MAX];$/;"	v	file:
obj_init	output/outobj.c	/^static void obj_init(FILE * fp, efunc errfunc, ldfunc ldef, evalfunc eval)$/;"	f	file:
obj_name	output/outobj.c	/^static ObjRecord *obj_name(ObjRecord * orp, char *name)$/;"	f	file:
obj_new	output/outobj.c	/^static ObjRecord *obj_new(void)$/;"	f	file:
obj_out	output/outobj.c	/^static void obj_out(long segto, const void *data, unsigned long type,$/;"	f	file:
obj_rword	output/outobj.c	/^static ObjRecord *obj_rword(ObjRecord * orp, unsigned int val)$/;"	f	file:
obj_seg_needs_update	output/outobj.c	/^} *seghead, **segtail, *obj_seg_needs_update;$/;"	v	file:
obj_segbase	output/outobj.c	/^static long obj_segbase(long segment)$/;"	f	file:
obj_segment	output/outobj.c	/^static long obj_segment(char *name, int pass, int *bits)$/;"	f	file:
obj_set_info	output/outobj.c	/^static int obj_set_info(enum geninfo type, char **val)$/;"	f	file:
obj_stdmac	output/outobj.c	/^static const char *obj_stdmac[] = {$/;"	v	file:
obj_uppercase	output/outobj.c	/^static int obj_uppercase;       \/* Flag: all names in uppercase *\/$/;"	v	file:
obj_use32	output/outobj.c	/^static int obj_use32;           \/* Flag: at least one segment is 32-bit *\/$/;"	v	file:
obj_value	output/outobj.c	/^static ObjRecord *obj_value(ObjRecord * orp, unsigned long val)$/;"	f	file:
obj_word	output/outobj.c	/^static ObjRecord *obj_word(ObjRecord * orp, unsigned int val)$/;"	f	file:
obj_write_file	output/outobj.c	/^static void obj_write_file(int debuginfo)$/;"	f	file:
obj_write_fixup	output/outobj.c	/^static void obj_write_fixup(ObjRecord * orp, int bytes,$/;"	f	file:
obj_x	output/outobj.c	/^static ObjRecord *obj_x(ObjRecord * orp, unsigned long val)$/;"	f	file:
objpath	rdoff/ldrdf.c	/^    int objpath;$/;"	m	struct:ldrdfoptions	file:
objpath	rdoff/ldrdf.c	/^char *objpath = NULL;$/;"	v
odate	rdoff/rdlar.c	/^    bool odate;$/;"	m	file:
of_aout	output/outaout.c	/^struct ofmt of_aout = {$/;"	v
of_aoutb	output/outaout.c	/^struct ofmt of_aoutb = {$/;"	v
of_as86	output/outas86.c	/^struct ofmt of_as86 = {$/;"	v
of_bin	output/outbin.c	/^struct ofmt of_bin = {$/;"	v
of_coff	output/outcoff.c	/^struct ofmt of_coff = {$/;"	v
of_dbg	output/outdbg.c	/^struct ofmt of_dbg = {$/;"	v
of_dbg	output/outdbg.c	/^struct ofmt of_dbg;$/;"	v
of_elf	output/outelf.c	/^struct ofmt of_elf = {$/;"	v
of_ieee	output/outieee.c	/^struct ofmt of_ieee = {$/;"	v
of_obj	output/outobj.c	/^struct ofmt of_obj = {$/;"	v
of_obj	output/outobj.c	/^struct ofmt of_obj;$/;"	v
of_rdf	output/outrdf.c	/^struct ofmt of_rdf = {$/;"	v
of_rdf2	output/outrdf2.c	/^struct ofmt of_rdf2 = {$/;"	v
of_win32	output/outcoff.c	/^struct ofmt of_win32 = {$/;"	v
offset	labels.c	/^        long segment, offset;$/;"	m	struct:label::<anonymous>	file:
offset	nasm.h	/^    long offset;                \/* ... it's given here ... *\/$/;"	m	struct:extop
offset	nasm.h	/^    long offset;                \/* any immediate number *\/$/;"	m
offset	nasm.h	/^    long offset;$/;"	m
offset	output/outas86.c	/^    long offset;                \/* relative offset *\/$/;"	m	struct:Piece	file:
offset	output/outelf.c	/^    int offset, info;$/;"	m	struct:erel	file:
offset	output/outelf.c	/^    int offset;$/;"	m	struct:symlininfo	file:
offset	output/outieee.c	/^    long offset;$/;"	m	struct:LineNumber	file:
offset	output/outieee.c	/^    long offset;$/;"	m	struct:ieeeFixupp	file:
offset	output/outieee.c	/^    long offset;$/;"	m	struct:ieeePublic	file:
offset	output/outobj.c	/^    long offset;$/;"	m	struct:LineNumber	file:
offset	output/outobj.c	/^    long offset;$/;"	m	struct:Public	file:
offset	output/outrdf.c	/^    long offset;                \/* from start of segment in which reference is loc'd *\/$/;"	m	struct:RelocRec	file:
offset	output/outrdf.c	/^    long offset;                \/* offset within segment *\/$/;"	m	struct:ExportRec	file:
offset	rdoff/rdoff.h	/^    long offset;                \/* from start of segment in which reference is loc'd *\/$/;"	m	struct:RelocRec
offset	rdoff/rdoff.h	/^    long offset;                \/* offset within segment *\/$/;"	m	struct:ExportRec
offset	rdoff/rdoff.h	/^    long offset;$/;"	m	struct:SegmentHeaderRec
offset	rdoff/segtab.c	/^    long offset;$/;"	m	struct:segtabnode	file:
offset	rdoff/symtab.h	/^    long offset;$/;"	m
offsets	nasm.c	/^static struct RAA *offsets;$/;"	v	file:
ofile	nasm.c	/^static FILE *ofile = NULL;$/;"	v	file:
ofile	output/outrdf.c	/^static FILE *ofile;$/;"	v	file:
ofile	output/outrdf2.c	/^static FILE *ofile;$/;"	v	file:
ofmt	nasm.c	/^static struct ofmt *ofmt = NULL;$/;"	v	file:
ofmt	nasm.h	/^struct ofmt {$/;"	s
ofmt_find	outform.c	/^struct ofmt *ofmt_find(char *name)$/;"	f
ofmt_list	outform.c	/^void ofmt_list(struct ofmt *deffmt, FILE * fp)$/;"	f
ofmt_register	outform.c	/^struct ofmt *ofmt_register(efunc error)$/;"	f
ofp	output/outieee.c	/^static FILE *ofp;$/;"	v	file:
ofp	output/outobj.c	/^static FILE *ofp;$/;"	v	file:
ok	test/lnxhello.asm	/^ok:	$/;"	l
op_depend	nasm.c	/^    op_depend                   \/* Generate dependencies *\/$/;"	e	enum:op_type	file:
op_normal	nasm.c	/^    op_normal,                  \/* Preprocess and assemble *\/$/;"	e	enum:op_type	file:
op_preprocess	nasm.c	/^    op_preprocess,              \/* Preprocess only *\/$/;"	e	enum:op_type	file:
op_type	nasm.c	/^enum op_type {$/;"	g	file:
opcode	insns.h	/^    int opcode;                 \/* the token, passed from "parser.c" *\/$/;"	m	struct:itemplate
opcode	nasm.h	/^    int opcode;                 \/* the opcode - not just the string *\/$/;"	m
opd	insns.h	/^    long opd[3];                \/* bit flags for operand types *\/$/;"	m	struct:itemplate
operand	nasm.c	/^    int operand;$/;"	m	struct:forwrefinfo	file:
operand	nasm.h	/^} operand;$/;"	t
operands	insns.h	/^    int operands;               \/* number of operands *\/$/;"	m	struct:itemplate
operands	nasm.h	/^    int operands;               \/* how many operands? 0-3 $/;"	m
operating_mode	nasm.c	/^static enum op_type operating_mode;$/;"	v	file:
opflags	eval.c	/^static int *opflags;$/;"	v	file:
opflags	nasm.h	/^    int opflags;                \/* see OPFLAG_* defines below *\/$/;"	m
oprs	nasm.h	/^    operand oprs[3];            \/* the operands, defined as above *\/$/;"	m
opt_verbose_info	nasm.c	/^static int using_debug_info, opt_verbose_info;$/;"	v	file:
optimizing	nasm.c	/^int optimizing = -1;            \/* number of optimization passes to take *\/$/;"	v
option	lcc/lin-aout.c	/^int option(char *arg)$/;"	f
option	lcc/lin-elf.c	/^int option(char *arg)$/;"	f
options	rdoff/ldrdf.c	/^} options;$/;"	v
options	rdoff/rdlar.c	/^} options = {$/;"	v
ordinal	output/outobj.c	/^    unsigned int ordinal;$/;"	m	struct:ExpDef	file:
org	test/elif.asm	/^org 0x100$/;"	l
org	test/multisection.asm	/^org 0x100$/;"	l
org	test/multisection.asm	/^org 0x200$/;"	l
ori	output/outobj.c	/^    ORI *ori;                   \/* Initialization routine           *\/$/;"	m	struct:ObjRecord	file:
ori_ledata	output/outobj.c	/^static void ori_ledata(ObjRecord * orp)$/;"	f	file:
ori_linnum	output/outobj.c	/^static void ori_linnum(ObjRecord * orp)$/;"	f	file:
ori_local	output/outobj.c	/^static void ori_local(ObjRecord * orp)$/;"	f	file:
ori_null	output/outobj.c	/^static void ori_null(ObjRecord * orp)$/;"	f	file:
ori_pubdef	output/outobj.c	/^static void ori_pubdef(ObjRecord * orp)$/;"	f	file:
origin	output/outbin.c	/^static unsigned long origin;$/;"	v	file:
origin	rdoff/rdf2bin.c	/^long origin = 0;$/;"	v
origin	rdoff/rdf2ihx.c	/^long origin = 0;$/;"	v
origin_defined	output/outbin.c	/^static int origin_defined;$/;"	v	file:
orp	output/outobj.c	/^    ObjRecord *orp;$/;"	m	struct:Segment	file:
out	assemble.c	/^static void out(long offset, long segto, const void *data,$/;"	f	file:
outfile	output/outbin.c	/^static char *infile, *outfile;$/;"	v	file:
outfmt	assemble.c	/^static struct ofmt *outfmt;$/;"	v	file:
outfmt	eval.c	/^static struct ofmt *outfmt;     \/* Structure of addresses of output routines *\/$/;"	v	file:
outfmt	parser.c	/^static struct ofmt *outfmt;     \/* Structure of addresses of output routines *\/$/;"	v	file:
outname	nasm.c	/^static char outname[FILENAME_MAX];$/;"	v	file:
output	nasm.h	/^    void (*output) (long segto, const void *data, unsigned long type,$/;"	m	struct:ofmt
output	nasm.h	/^    void (*output) (long, const void *, unsigned long);$/;"	m
output_ins	ndisasm.c	/^static void output_ins(unsigned long offset, unsigned char *data,$/;"	f	file:
outputseg	rdoff/ldrdf.c	/^struct SegmentHeaderRec outputseg[RDF_MAXSEGS];$/;"	v
overlay	output/outobj.c	/^    char *segclass, *overlay;   \/* `class' is a C++ keyword :-) *\/$/;"	m	struct:Segment	file:
owner	rdoff/rdlar.h	/^    unsigned long owner;        \/* UID *\/$/;"	m	struct:rdlm_hdr
p	rdoff/collectn.h	/^    void *p[32];                \/* array of pointers to objects *\/$/;"	m	struct:tagCollection
paramlen	preproc.c	/^    int nparam, rotate, *paramlen;$/;"	m	struct:MMacro	file:
params	preproc.c	/^    Token **params;             \/* actual parameters *\/$/;"	m	struct:MMacro	file:
parm	output/outobj.c	/^    unsigned long parm[OBJ_PARMS];      \/* Parameters for ori routine       *\/$/;"	m	struct:ObjRecord	file:
parse_cmdline	nasm.c	/^static void parse_cmdline(int argc, char **argv)$/;"	f	file:
parse_line	parser.c	/^insn *parse_line(int pass, char *buffer, insn * result,$/;"	f
parser_global_info	parser.c	/^void parser_global_info(struct ofmt *output, loc_t * locp)$/;"	f
pass	preproc.c	/^static int pass;                \/* HACK: pass 0 = generate dependencies only *\/$/;"	v	file:
pass0	nasm.c	/^int pass0;$/;"	v
passtwo	output/outobj.c	/^static int passtwo;$/;"	v	file:
path	preproc.c	/^    char *path;$/;"	m	struct:IncPath	file:
perm_copy	labels.c	/^static char *perm_copy(char *string1, char *string2)$/;"	f	file:
perm_head	labels.c	/^static struct permts *perm_head;        \/* start of perm. text storage *\/$/;"	v	file:
perm_tail	labels.c	/^static struct permts *perm_tail;        \/* end of perm. text storage *\/$/;"	v	file:
permts	labels.c	/^struct permts {                 \/* permanent text storage *\/$/;"	s	file:
plus	preproc.c	/^    int plus;                   \/* is the last parameter greedy? *\/$/;"	m	struct:MMacro	file:
pop	test/changed.asm	/^pop %1$/;"	l
pop	test/objtest.asm	/^	  pop ds$/;"	d
pos	output/outcoff.c	/^    long pos, relpos;$/;"	m	struct:Section	file:
pos	sync.c	/^    unsigned long pos;$/;"	m	struct:Sync	file:
posn	nasmlib.h	/^    long elem_len, length, posn, start, rpos;$/;"	m	struct:SAA
posn	output/outbin.c	/^    long posn;$/;"	m	struct:Reloc	file:
pp_cleanup	preproc.c	/^static void pp_cleanup(int pass)$/;"	f	file:
pp_extra_stdmac	preproc.c	/^void pp_extra_stdmac(const char **macros)$/;"	f
pp_get_include_path_ptr	preproc.c	/^char **pp_get_include_path_ptr(char **pPrevPath)$/;"	f
pp_getline	preproc.c	/^static char *pp_getline(void)$/;"	f	file:
pp_include_path	preproc.c	/^void pp_include_path(char *path)$/;"	f
pp_pre_define	preproc.c	/^void pp_pre_define(char *definition)$/;"	f
pp_pre_include	preproc.c	/^void pp_pre_include(char *fname)$/;"	f
pp_pre_undefine	preproc.c	/^void pp_pre_undefine(char *definition)$/;"	f
pp_reset	preproc.c	/^pp_reset(char *file, int apass, efunc errfunc, evalfunc eval,$/;"	f	file:
ppscan	preproc.c	/^static int ppscan(void *private_data, struct tokenval *tokval)$/;"	f	file:
predef	preproc.c	/^static Line *predef = NULL;$/;"	v	file:
prefix	Makefile	/^prefix		= \/home\/mosman\/LocalInstalls$/;"	m
prefix	doc/Makefile	/^prefix		= \/home\/mosman\/LocalInstalls$/;"	m
prefix	rdoff/Makefile	/^prefix		= \/home\/mosman\/LocalInstalls$/;"	m
prefix_names	nasmlib.c	/^static const char *prefix_names[] = {$/;"	v	file:
prefixes	nasm.h	/^    int prefixes[MAXPREFIX];    \/* instruction prefixes, if any *\/$/;"	m
prepreproc	preproc.c	/^static char *prepreproc(char *line)$/;"	f	file:
preproc	nasm.c	/^static Preproc *preproc;$/;"	v	file:
prevlabel	labels.c	/^static char *prevlabel;$/;"	v	file:
print_header	rdoff/rdfdump.c	/^void print_header(long length, int rdf_version)$/;"	f
printfstr	test/elfso.asm	/^printfstr db "integer==%d, localint==%d, commvar=%d"$/;"	d
printfstr	test/elftest.asm	/^printfstr db "integer==%d, localint==%d, commvar=%d"$/;"	d
prior	test/changed.asm	/^prior:$/;"	l
process_arg	nasm.c	/^static int process_arg(char *p, char *q)$/;"	f	file:
process_args	nasm.c	/^static void process_args(char *args)$/;"	f	file:
process_ea	assemble.c	/^static ea *process_ea(operand * input, ea * output, int addrbits,$/;"	f	file:
process_line	regs.pl	/^sub process_line($) {$/;"	s
process_respfile	nasm.c	/^static void process_respfile(FILE * rfile)$/;"	f	file:
processmodule	rdoff/ldrdf.c	/^void processmodule(const char *filename, struct modulenode *mod)$/;"	f
progname	rdoff/rdlar.c	/^char *progname = "rdlar";$/;"	v
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
ps_arraytostr	doc/genps.pl	/^sub ps_arraytostr(@) {$/;"	s
ps_break_lines	doc/genps.pl	/^sub ps_break_lines($$) {$/;"	s
ps_break_pages	doc/genps.pl	/^sub ps_break_pages($$) {$/;"	s
ps_dup_para	doc/genps.pl	/^sub ps_dup_para(@) {$/;"	s
ps_dup_para_noanchor	doc/genps.pl	/^sub ps_dup_para_noanchor(@) {$/;"	s
ps_end_page	doc/genps.pl	/^sub ps_end_page($) {$/;"	s
ps_flow_lines	doc/genps.pl	/^sub ps_flow_lines($$$@) {$/;"	s
ps_merge_chunks	doc/genps.pl	/^sub ps_merge_chunks(@) {$/;"	s
ps_start_page	doc/genps.pl	/^sub ps_start_page() {$/;"	s
ps_string	doc/genps.pl	/^sub ps_string($) {$/;"	s
ps_xref	doc/genps.pl	/^sub ps_xref($) {$/;"	s
pubhead	output/outieee.c	/^    struct ieeePublic *pubhead, **pubtail, *lochead, **loctail;$/;"	m	struct:ieeeSection	file:
pubhead	output/outobj.c	/^    struct Public *pubhead, **pubtail, *lochead, **loctail;$/;"	m	struct:Segment	file:
pubtail	output/outieee.c	/^    struct ieeePublic *pubhead, **pubtail, *lochead, **loctail;$/;"	m	struct:ieeeSection	file:
pubtail	output/outobj.c	/^    struct Public *pubhead, **pubtail, *lochead, **loctail;$/;"	m	struct:Segment	file:
push	test/changed.asm	/^push %1			;$/;"	l
push	test/objtest.asm	/^	  push ds$/;"	d
push	test/objtest.asm	/^	  push dx$/;"	d
put	float.c	213;"	d	file:
put_header	rdoff/rdlar.c	/^void put_header(struct rdlm_hdr *hdr, FILE * libfp, char *modname)$/;"	f
qstr	doc/afmmetrics.pl	/^sub qstr($) {$/;"	s
qux	test/a32offs.asm	/^qux:	loop qux, cx$/;"	l
r	rdoff/rdoff.h	/^    struct RelocRec r;          \/* type == 1 \/ 6 *\/$/;"	m	union:RDFHeaderRec
raa_free	nasmlib.c	/^void raa_free(struct RAA *r)$/;"	f
raa_init	nasmlib.c	/^struct RAA *raa_init(void)$/;"	f
raa_read	nasmlib.c	/^long raa_read(struct RAA *r, long posn)$/;"	f
raa_write	nasmlib.c	/^struct RAA *raa_write(struct RAA *r, long posn, long value)$/;"	f
rdf2_cleanup	output/outrdf2.c	/^static void rdf2_cleanup(int debuginfo)$/;"	f	file:
rdf2_deflabel	output/outrdf2.c	/^static void rdf2_deflabel(char *name, long segment, long offset,$/;"	f	file:
rdf2_directive	output/outrdf2.c	/^static int rdf2_directive(char *directive, char *value, int pass)$/;"	f	file:
rdf2_filename	output/outrdf2.c	/^static void rdf2_filename(char *inname, char *outname, efunc error)$/;"	f	file:
rdf2_init	output/outrdf2.c	/^static void rdf2_init(FILE * fp, efunc errfunc, ldfunc ldef, evalfunc eval)$/;"	f	file:
rdf2_out	output/outrdf2.c	/^static void rdf2_out(long segto, const void *data, unsigned long type,$/;"	f	file:
rdf2_section_names	output/outrdf2.c	/^static long rdf2_section_names(char *name, int pass, int *bits)$/;"	f	file:
rdf2_segbase	output/outrdf2.c	/^static long rdf2_segbase(long segment)$/;"	f	file:
rdf2_set_info	output/outrdf2.c	/^static int rdf2_set_info(enum geninfo type, char **val)$/;"	f	file:
rdf2_stdmac	output/outrdf2.c	/^static const char *rdf2_stdmac[] = {$/;"	v	file:
rdf_cleanup	output/outrdf.c	/^static void rdf_cleanup(int debuginfo)$/;"	f	file:
rdf_deflabel	output/outrdf.c	/^static void rdf_deflabel(char *name, long segment, long offset,$/;"	f	file:
rdf_directive	output/outrdf.c	/^static int rdf_directive(char *directive, char *value, int pass)$/;"	f	file:
rdf_errno	rdoff/rdoff.c	/^int rdf_errno = 0;$/;"	v
rdf_errors	rdoff/rdoff.c	/^const char *rdf_errors[11] = {$/;"	v
rdf_filename	output/outrdf.c	/^static void rdf_filename(char *inname, char *outname, efunc error)$/;"	f	file:
rdf_headerbuf	rdoff/rdoff.h	/^} rdf_headerbuf;$/;"	t
rdf_init	output/outrdf.c	/^static void rdf_init(FILE * fp, efunc errfunc, ldfunc ldef, evalfunc eval)$/;"	f	file:
rdf_out	output/outrdf.c	/^static void rdf_out(long segto, void *data, unsigned long type,$/;"	f	file:
rdf_relocate	rdoff/rdfload.c	/^int rdf_relocate(rdfmodule * m)$/;"	f
rdf_section_names	output/outrdf.c	/^static long rdf_section_names(char *name, int pass, int *bits)$/;"	f	file:
rdf_segbase	output/outrdf.c	/^static long rdf_segbase(long segment)$/;"	f	file:
rdf_set_info	output/outrdf.c	/^static int rdf_set_info(enum geninfo type, char **val)$/;"	f	file:
rdf_stdmac	output/outrdf.c	/^static char *rdf_stdmac[] = {$/;"	v	file:
rdfaddheader	rdoff/rdoff.c	/^int rdfaddheader(rdf_headerbuf * h, rdfheaderrec * r)$/;"	f
rdfaddsegment	rdoff/rdoff.c	/^int rdfaddsegment(rdf_headerbuf * h, long seglength)$/;"	f
rdfclose	rdoff/rdoff.c	/^int rdfclose(rdffile * f)$/;"	f
rdfdoneheader	rdoff/rdoff.c	/^void rdfdoneheader(rdf_headerbuf * h)$/;"	f
rdffile	rdoff/rdoff.h	/^} rdffile;$/;"	t
rdffindsegment	rdoff/rdoff.c	/^int rdffindsegment(rdffile * f, int segno)$/;"	f
rdfgetheaderrec	rdoff/rdoff.c	/^rdfheaderrec *rdfgetheaderrec(rdffile * f)$/;"	f
rdfheaderrec	rdoff/rdoff.h	/^} rdfheaderrec;$/;"	t
rdfheaderrewind	rdoff/rdoff.c	/^void rdfheaderrewind(rdffile * f)$/;"	f
rdfload	rdoff/rdfload.c	/^rdfmodule *rdfload(const char *filename)$/;"	f
rdfloadseg	rdoff/rdoff.c	/^int rdfloadseg(rdffile * f, int segment, void *buffer)$/;"	f
rdfmodule	rdoff/rdfload.h	/^} rdfmodule;$/;"	t
rdfnewheader	rdoff/rdoff.c	/^rdf_headerbuf *rdfnewheader(void)$/;"	f
rdfopen	rdoff/rdoff.c	/^int rdfopen(rdffile * f, const char *name)$/;"	f
rdfopenhere	rdoff/rdoff.c	/^int rdfopenhere(rdffile * f, FILE * fp, int *refcount, const char *name)$/;"	f
rdfperror	rdoff/rdoff.c	/^void rdfperror(const char *app, const char *name)$/;"	f
rdfwriteheader	rdoff/rdoff.c	/^int rdfwriteheader(FILE * fp, rdf_headerbuf * h)$/;"	f
rdl_close	rdoff/rdlib.c	/^void rdl_close(struct librarynode *lib)$/;"	f
rdl_error	rdoff/rdlib.c	/^int rdl_error = 0;$/;"	v
rdl_errors	rdoff/rdlib.c	/^char *rdl_errors[5] = {$/;"	v
rdl_open	rdoff/rdlib.c	/^int rdl_open(struct librarynode *lib, const char *name)$/;"	f
rdl_openmodule	rdoff/rdlib.c	/^int rdl_openmodule(struct librarynode *lib, int moduleno, rdffile * f)$/;"	f
rdl_perror	rdoff/rdlib.c	/^void rdl_perror(const char *apname, const char *filename)$/;"	f
rdl_searchlib	rdoff/rdlib.c	/^int rdl_searchlib(struct librarynode *lib, const char *label, rdffile * f)$/;"	f
rdl_signature	rdoff/rdflib.c	/^const char *rdl_signature = "RDLIB2", *sig_modname = ".sig";$/;"	v
rdl_verify	rdoff/rdlib.c	/^int rdl_verify(const char *filename)$/;"	f
rdlm_hdr	rdoff/rdlar.h	/^struct rdlm_hdr {$/;"	s
rdoff_ver	rdoff/rdoff.h	/^    int rdoff_ver;              \/* should be 1; any higher => not guaranteed to work *\/$/;"	m	struct:RDFFileInfo
read_line	preproc.c	/^static char *read_line(void)$/;"	f	file:
readnum	nasmlib.c	/^long readnum(char *str, int *error)$/;"	f
readonly	test/elftest.asm	/^readonly  dd readonly		; [18]$/;"	d
readstrnum	nasmlib.c	/^long readstrnum(char *str, int length, int *warn)$/;"	f
real_raa_init	nasmlib.c	/^static struct RAA *real_raa_init(int layers)$/;"	f	file:
reclen	rdoff/rdoff.h	/^    byte reclen;                \/* content length *\/$/;"	m	struct:BSSRec
reclen	rdoff/rdoff.h	/^    byte reclen;                \/* content length *\/$/;"	m	struct:DLLRec
reclen	rdoff/rdoff.h	/^    byte reclen;                \/* content length *\/$/;"	m	struct:ExportRec
reclen	rdoff/rdoff.h	/^    byte reclen;                \/* content length *\/$/;"	m	struct:ImportRec
reclen	rdoff/rdoff.h	/^    byte reclen;                \/* content length *\/$/;"	m	struct:ModRec
reclen	rdoff/rdoff.h	/^    byte reclen;                \/* content length *\/$/;"	m	struct:RelocRec
reclen	rdoff/rdoff.h	/^    byte reclen;                \/* equals 7+label length *\/$/;"	m	struct:CommonRec
reclen	rdoff/rdoff.h	/^    byte reclen;$/;"	m	struct:GenericRec
redefine_label	labels.c	/^void redefine_label(char *label, long segment, long offset, char *special,$/;"	f
refcount	rdoff/rdoff.h	/^    int *refcount;              \/* pointer to reference count on file, or NULL *\/$/;"	m	struct:RDFFileInfo
referenced	rdoff/rdlib.h	/^    int referenced;             \/* & open if required. Close afterwards *\/$/;"	m	struct:librarynode
refseg	output/outrdf.c	/^    int16 refseg;               \/* segment to which reference refers to *\/$/;"	m	struct:RelocRec	file:
refseg	rdoff/rdoff.h	/^    uint16 refseg;              \/* segment to which reference refers to *\/$/;"	m	struct:RelocRec
reg16	regdis.c	/^static const int reg16   [] = {R_AX,R_CX,R_DX,R_BX,R_SP,R_BP,R_SI,R_DI};$/;"	v	file:
reg32	regdis.c	/^static const int reg32   [] = {R_EAX,R_ECX,R_EDX,R_EBX,R_ESP,R_EBP,R_ESI,R_EDI};$/;"	v	file:
reg8	regdis.c	/^static const int reg8    [] = {R_AL,R_CL,R_DL,R_BL,R_AH,R_CH,R_DH,R_BH};$/;"	v	file:
reg_enum	regs.h	/^enum reg_enum {$/;"	g
reg_flags	regflags.c	/^static const long reg_flags[] = {$/;"	v	file:
reg_names	regs.c	/^static const char *reg_names[] = {$/;"	v	file:
register_output_formats	nasm.c	/^static void register_output_formats(void)$/;"	f	file:
regval	assemble.c	/^static int regval(operand * o)$/;"	f	file:
regvals	regvals.c	/^static const int regvals[] = {$/;"	v	file:
rel	output/outelf.c	/^    struct SAA *rel;$/;"	m	struct:Section	file:
relative	output/outas86.c	/^    int relative;               \/* TRUE or FALSE *\/$/;"	m	struct:Piece	file:
relative	output/outcoff.c	/^    int relative;               \/* TRUE or FALSE *\/$/;"	m	struct:Reloc	file:
rellen	output/outelf.c	/^    long rellen;$/;"	m	struct:Section	file:
reloc	rdoff/ldrdf.c	/^    long reloc;                 \/* segment's relocation factor *\/$/;"	m	struct:segment_infonode	file:
reloc_seg	nasmlib.c	/^long reloc_seg(expr * vect)$/;"	f
reloc_type	output/outelf.c	/^enum reloc_type {$/;"	g	file:
reloc_value	nasmlib.c	/^long reloc_value(expr * vect)$/;"	f
reloc_wrt	nasmlib.c	/^long reloc_wrt(expr * vect)$/;"	f
relocs	output/outbin.c	/^} *relocs, **reloctail;$/;"	v	file:
reloctail	output/outbin.c	/^} *relocs, **reloctail;$/;"	v	file:
relpos	output/outcoff.c	/^    long pos, relpos;$/;"	m	struct:Section	file:
reltype	output/outaout.c	/^    int reltype;                \/* see above *\/$/;"	m	struct:Reloc	file:
rep_nest	preproc.c	/^    MMacro *rep_nest;           \/* used for nesting %rep *\/$/;"	m	struct:MMacro	file:
report_error	nasm.c	/^static efunc report_error;$/;"	v	file:
report_error_common	nasm.c	/^static void report_error_common(int severity, const char *fmt,$/;"	f	file:
report_error_gnu	nasm.c	/^static void report_error_gnu(int severity, const char *fmt, ...)$/;"	f	file:
report_error_vc	nasm.c	/^static void report_error_vc(int severity, const char *fmt, ...)$/;"	f	file:
reserved	rdoff/rdoff.h	/^    uint16 reserved;$/;"	m	struct:SegmentHeaderRec
reset	nasm.h	/^    void (*reset) (char *, int, efunc, evalfunc, ListGen *);$/;"	m
respfile	rdoff/ldrdf.c	/^    int respfile;$/;"	m	struct:ldrdfoptions	file:
rexp0	eval.c	/^static expr *rexp0(int critical)$/;"	f	file:
rexp1	eval.c	/^static expr *rexp1(int critical)$/;"	f	file:
rexp2	eval.c	/^static expr *rexp2(int critical)$/;"	f	file:
rexp3	eval.c	/^static expr *rexp3(int critical)$/;"	f	file:
rf	output/outbin.c	/^static FILE *fp, *rf = NULL;$/;"	v	file:
right	rdoff/segtab.c	/^    struct segtabnode *right;$/;"	m	struct:segtabnode	file:
rightcount	rdoff/segtab.c	/^    int rightcount;$/;"	m	struct:segtabnode	file:
rotate	preproc.c	/^    int nparam, rotate, *paramlen;$/;"	m	struct:MMacro	file:
rpos	nasmlib.h	/^    long elem_len, length, posn, start, rpos;$/;"	m	struct:SAA
rptr	nasmlib.h	/^    struct SAA *next, *end, *rptr;$/;"	m	struct:SAA
saa_fpwrite	nasmlib.c	/^void saa_fpwrite(struct SAA *s, FILE * fp)$/;"	f
saa_fread	nasmlib.c	/^void saa_fread(struct SAA *s, long posn, void *data, long len)$/;"	f
saa_free	nasmlib.c	/^void saa_free(struct SAA *s)$/;"	f
saa_fwrite	nasmlib.c	/^void saa_fwrite(struct SAA *s, long posn, void *data, long len)$/;"	f
saa_init	nasmlib.c	/^struct SAA *saa_init(long elem_len)$/;"	f
saa_rbytes	nasmlib.c	/^void *saa_rbytes(struct SAA *s, long *len)$/;"	f
saa_rewind	nasmlib.c	/^void saa_rewind(struct SAA *s)$/;"	f
saa_rnbytes	nasmlib.c	/^void saa_rnbytes(struct SAA *s, void *data, long len)$/;"	f
saa_rstruct	nasmlib.c	/^void *saa_rstruct(struct SAA *s)$/;"	f
saa_wbytes	nasmlib.c	/^void saa_wbytes(struct SAA *s, const void *data, long len)$/;"	f
saa_wstruct	nasmlib.c	/^void *saa_wstruct(struct SAA *s)$/;"	f
sb	nasm.c	/^static int sb, cmd_sb = 16;     \/* by default *\/$/;"	v	file:
sbss	output/outaout.c	/^static struct Section stext, sdata, sbss;$/;"	v	file:
scalar_mult	eval.c	/^static expr *scalar_mult(expr * vect, long scalar, int affect_hints)$/;"	f	file:
scalarvect	eval.c	/^static expr *scalarvect(long scalar)$/;"	f	file:
scale	nasm.h	/^    int basereg, indexreg, scale;       \/* registers and scale involved *\/$/;"	m
scan	eval.c	/^static scanner scan;            \/* Address of scanner routine *\/$/;"	v	file:
scandeps	mkdep.pl	/^sub scandeps($) {$/;"	s
scanner	nasm.h	/^typedef int (*scanner) (void *private_data, struct tokenval * tv);$/;"	t
sconft	rdoff/ldsegs.h	/^struct segconfig sconft[SEGCONFIGMAX] = {$/;"	v
scpriv	eval.c	/^static void *scpriv;$/;"	v	file:
sdata	output/outaout.c	/^static struct Section stext, sdata, sbss;$/;"	v	file:
sdata	output/outas86.c	/^static struct Section stext, sdata;$/;"	v	file:
search_libraries	rdoff/ldrdf.c	/^int search_libraries()$/;"	f
secref	output/outbin.c	/^    long secref;$/;"	m	struct:Reloc	file:
secrel	output/outbin.c	/^    long secrel;$/;"	m	struct:Reloc	file:
section	nasm.h	/^    long (*section) (char *name, int pass, int *bits);$/;"	m	struct:ofmt
section	output/outcoff.c	/^    int section;                \/* section number where it's defined$/;"	m	struct:Symbol	file:
section	output/outelf.c	/^    int section;                \/* section index *\/$/;"	m	struct:symlininfo	file:
section	output/outelf.c	/^    long section;               \/* section ID of the symbol *\/$/;"	m	struct:Symbol	file:
section	test/elif.asm	/^section .data$/;"	l
section	test/elif.asm	/^section .text$/;"	l
section	test/multisection.asm	/^section .appspecific$/;"	l
section	test/multisection.asm	/^section .bss$/;"	l
section	test/multisection.asm	/^section .code$/;"	l
section	test/multisection.asm	/^section .data$/;"	l
section	test/multisection.asm	/^section .extra_code$/;"	l
section	test/multisection.asm	/^section .final1$/;"	l
section	test/multisection.asm	/^section .final2$/;"	l
section	test/multisection.asm	/^section .final3$/;"	l
section	test/multisection.asm	/^section .hmm$/;"	l
section	test/multisection.asm	/^section .mytext$/;"	l
section	test/multisection.asm	/^section .stringdata$/;"	l
section	test/multisection.asm	/^section .text$/;"	l
sections	output/outbin.c	/^} *sections, *last_section;$/;"	v	file:
sectlen	output/outcoff.c	/^static int nsects, sectlen;$/;"	v	file:
sectlen	output/outelf.c	/^static int nsects, sectlen;$/;"	v	file:
sects	output/outcoff.c	/^static struct Section **sects;$/;"	v	file:
sects	output/outelf.c	/^static struct Section **sects;$/;"	v	file:
seg	output/outobj.c	/^        struct Segment *seg;$/;"	m	union:External::<anonymous>	file:
seg	output/outrdf.c	/^static memorybuffer *seg[2];    \/* seg 0 = code, seg 1 = data *\/$/;"	v	file:
seg	output/outrdf2.c	/^static struct SAA *seg[RDF_MAXSEGS];    \/* seg 0 = code, seg 1 = data *\/$/;"	v	file:
seg	rdoff/rdoff.h	/^    struct SegmentHeaderRec seg[RDF_MAXSEGS];$/;"	m	struct:RDFFileInfo
seg_alloc	nasmlib.c	/^long seg_alloc(void)$/;"	f
seg_init	nasmlib.c	/^void seg_init(void)$/;"	f
segbase	nasm.h	/^    long (*segbase) (long segment);$/;"	m	struct:ofmt
segbss	output/outrdf.c	/^static int segtext, segdata, segbss;$/;"	v	file:
segclass	output/outobj.c	/^    char *segclass, *overlay;   \/* `class' is a C++ keyword :-) *\/$/;"	m	struct:Segment	file:
segconfig	rdoff/ldsegs.h	/^struct segconfig {$/;"	s
segdata	output/outrdf.c	/^static int segtext, segdata, segbss;$/;"	v	file:
seghead	output/outieee.c	/^} *seghead, **segtail, *ieee_seg_needs_update;$/;"	v	file:
seghead	output/outobj.c	/^} *seghead, **segtail, *obj_seg_needs_update;$/;"	v	file:
seginfo	output/outrdf2.c	/^static struct seginfo {$/;"	s	file:
seginfo	rdoff/ldrdf.c	/^    struct segment_infonode seginfo[RDF_MAXSEGS];       \/* what are we doing$/;"	m	struct:modulenode	file:
seglength	output/outrdf2.c	/^    long seglength;$/;"	m	struct:seginfo	file:
seglength	rdoff/rdoff.h	/^    long seglength;             \/* total length of all the segments *\/$/;"	m
segment	labels.c	/^        long segment, offset;$/;"	m	struct:label::<anonymous>	file:
segment	nasm.h	/^    long segment;               \/* if it's a number\/address, then... *\/$/;"	m	struct:extop
segment	nasm.h	/^    long segment;               \/* immediate segment, if needed *\/$/;"	m
segment	nasm.h	/^    long segment;$/;"	m
segment	output/outaout.c	/^    long segment;               \/* back-reference used by gsym_reloc *\/$/;"	m	struct:Symbol	file:
segment	output/outas86.c	/^    int segment;                \/* 4=bss at this point *\/$/;"	m	struct:Symbol	file:
segment	output/outieee.c	/^    long segment;               \/* only if it's far-absolute *\/$/;"	m	struct:ieeePublic	file:
segment	output/outieee.c	/^    struct ieeeSection *segment;$/;"	m	struct:LineNumber	file:
segment	output/outobj.c	/^    long segment;               \/* only if it's far-absolute *\/$/;"	m	struct:Public	file:
segment	output/outobj.c	/^    struct Segment *segment;$/;"	m	struct:LineNumber	file:
segment	output/outrdf.c	/^    char segment;               \/* only 0 for code, or 1 for data supported,$/;"	m	struct:RelocRec	file:
segment	output/outrdf.c	/^    char segment;               \/* segment referred to (0\/1) *\/$/;"	m	struct:ExportRec	file:
segment	output/outrdf.c	/^    int16 segment;              \/* segment number allocated to the label for reloc$/;"	m	struct:ImportRec	file:
segment	rdoff/rdoff.h	/^    byte segment;               \/* only 0 for code, or 1 for data supported,$/;"	m	struct:RelocRec
segment	rdoff/rdoff.h	/^    byte segment;               \/* segment referred to (0\/1\/2) *\/$/;"	m	struct:ExportRec
segment	rdoff/rdoff.h	/^    uint16 segment;             \/* segment number *\/$/;"	m	struct:CommonRec
segment	rdoff/rdoff.h	/^    uint16 segment;             \/* segment number allocated to the label for reloc$/;"	m	struct:ImportRec
segment	rdoff/symtab.h	/^    int segment;$/;"	m
segment_infonode	rdoff/ldrdf.c	/^struct segment_infonode {$/;"	s	file:
segment_part	eval.c	/^static expr *segment_part(expr * e)$/;"	f	file:
segments	output/outrdf2.c	/^} segments[RDF_MAXSEGS];$/;"	v	file:
segmenttypenumbers	output/outrdf2.c	/^static int segmenttypenumbers[COUNT_SEGTYPES] = {$/;"	v	file:
segmenttypes	output/outrdf2.c	/^static char *segmenttypes[COUNT_SEGTYPES] = {$/;"	v	file:
segname	output/outrdf2.c	/^    char *segname;$/;"	m	struct:seginfo	file:
segnumber	output/outrdf2.c	/^    int segnumber;$/;"	m	struct:seginfo	file:
segreserved	output/outrdf2.c	/^    uint16 segreserved;$/;"	m	struct:seginfo	file:
segs	output/outobj.c	/^    } segs[GROUP_MAX];          \/* ...in this *\/$/;"	m	struct:Group	file:
segtab	rdoff/segtab.h	/^typedef void *segtab;$/;"	t
segtabnode	rdoff/segtab.c	/^struct segtabnode {$/;"	s	file:
segtail	output/outieee.c	/^} *seghead, **segtail, *ieee_seg_needs_update;$/;"	v	file:
segtail	output/outobj.c	/^} *seghead, **segtail, *obj_seg_needs_update;$/;"	v	file:
segtext	output/outrdf.c	/^static int segtext, segdata, segbss;$/;"	v	file:
segtype	output/outrdf2.c	/^    uint16 segtype;$/;"	m	struct:seginfo	file:
selfptr	test/elfso.asm	/^selfptr	  dd selfptr wrt ..sym	; [16]$/;"	d
selfptr	test/elftest.asm	/^selfptr	  dd selfptr		; [16]$/;"	d
setinfo	nasm.h	/^    int (*setinfo) (enum geninfo type, char **string);$/;"	m	struct:ofmt
shortname	nasm.h	/^    const char *shortname;$/;"	m	struct:dfmt
shortname	nasm.h	/^    const char *shortname;$/;"	m	struct:ofmt
show_version	rdoff/rdlar.c	/^void show_version(void)$/;"	f
shstrtab	output/outelf.c	/^static char *shstrtab;$/;"	v	file:
shstrtablen	output/outelf.c	/^static int shstrtablen, shstrtabsize;$/;"	v	file:
shstrtabsize	output/outelf.c	/^static int shstrtablen, shstrtabsize;$/;"	v	file:
sib	assemble.c	/^    unsigned char modrm, sib;   \/* the bytes themselves *\/$/;"	m	file:
sib_present	assemble.c	/^    int sib_present;            \/* is a SIB byte necessary? *\/$/;"	m	file:
sig_modname	rdoff/rdflib.c	/^const char *rdl_signature = "RDLIB2", *sig_modname = ".sig";$/;"	v
size	assemble.c	/^    int size;                   \/* lazy - this is sib+bytes+1 *\/$/;"	m	file:
size	labels.c	/^    int size, usage;            \/* size and used space in ... *\/$/;"	m	struct:permts	file:
size	output/outaout.c	/^    long size;                  \/* size for data or function exports *\/$/;"	m	struct:Symbol	file:
size	output/outaout.c	/^    unsigned long len, size, nrelocs;$/;"	m	struct:Section	file:
size	output/outas86.c	/^    unsigned long datalen, size, len;$/;"	m	struct:Section	file:
size	output/outelf.c	/^    long size;                  \/* size of symbol *\/$/;"	m	struct:Symbol	file:
size	output/outelf.c	/^    unsigned long len, size, nrelocs;$/;"	m	struct:Section	file:
size	output/outieee.c	/^    short size;$/;"	m	struct:ieeeFixupp	file:
size	output/outieee.c	/^    unsigned size;$/;"	m	struct:Array	file:
size	output/outobj.c	/^    unsigned size;$/;"	m	struct:Array	file:
size	rdoff/rdlar.h	/^    unsigned long size;         \/* File size *\/$/;"	m	struct:rdlm_hdr
size	rdoff/rdoff.h	/^    long size;                  \/* size of common variable *\/$/;"	m	struct:CommonRec
skip	ndisasm.c	/^static void skip(unsigned long dist, FILE * fp)$/;"	f	file:
skip_white_	preproc.c	430;"	d	file:
slotnum	rdoff/symtab.c	18;"	d	file:
smacro_defined	preproc.c	/^smacro_defined(Context * ctx, char *name, int nparam, SMacro ** defn,$/;"	f	file:
smacros	preproc.c	/^static SMacro *smacros[NHASH];$/;"	v	file:
special	labels.c	/^        char *label, *special;$/;"	m	struct:label::<anonymous>	file:
special_names	nasmlib.c	/^static const char *special_names[] = {$/;"	v	file:
src_get	nasmlib.c	/^int src_get(long *xline, char **xname)$/;"	f
src_get_linnum	nasmlib.c	/^long src_get_linnum(void)$/;"	f
src_set_fname	nasmlib.c	/^char *src_set_fname(char *newname)$/;"	f
src_set_linnum	nasmlib.c	/^long src_set_linnum(long newline)$/;"	f
srcdir	Makefile	/^srcdir		= .$/;"	m
srcdir	doc/Makefile	/^srcdir		= .$/;"	m
srcdir	rdoff/Makefile	/^srcdir		= .$/;"	m
sreg	regdis.c	/^static const int sreg    [] = {R_ES,R_CS,R_SS,R_DS,R_FS,R_GS,R_SEGR6,R_SEGR7};$/;"	v	file:
stabbuf	output/outelf.c	/^static unsigned char *stabbuf = 0, *stabstrbuf = 0, *stabrelbuf = 0;$/;"	v	file:
stabentry	output/outelf.c	/^struct stabentry {$/;"	s	file:
stablen	output/outelf.c	/^static int stablen, stabstrlen, stabrellen;$/;"	v	file:
stabrelbuf	output/outelf.c	/^static unsigned char *stabbuf = 0, *stabstrbuf = 0, *stabrelbuf = 0;$/;"	v	file:
stabrellen	output/outelf.c	/^static int stablen, stabstrlen, stabrellen;$/;"	v	file:
stabs_cleanup	output/outelf.c	/^void stabs_cleanup()$/;"	f
stabs_deflabel	output/outelf.c	/^void stabs_deflabel(char *name, long segment, long offset, int is_global,$/;"	f
stabs_directive	output/outelf.c	/^void stabs_directive(const char *directive, const char *params)$/;"	f
stabs_filename	output/outelf.c	/^static char *stabs_filename = 0;$/;"	v	file:
stabs_generate	output/outelf.c	/^void stabs_generate(void)$/;"	f
stabs_immcall	output/outelf.c	/^static int stabs_immcall = 0;$/;"	v	file:
stabs_init	output/outelf.c	/^void stabs_init(struct ofmt *of, void *id, FILE * fp, efunc error)$/;"	f
stabs_linenum	output/outelf.c	/^void stabs_linenum(const char *filename, long linenumber, long segto)$/;"	f
stabs_output	output/outelf.c	/^void stabs_output(int type, void *param)$/;"	f
stabs_typevalue	output/outelf.c	/^void stabs_typevalue(long type)$/;"	f
stabslines	output/outelf.c	/^static struct linelist *stabslines = 0;$/;"	v	file:
stabstrbuf	output/outelf.c	/^static unsigned char *stabbuf = 0, *stabstrbuf = 0, *stabrelbuf = 0;$/;"	v	file:
stabstrlen	output/outelf.c	/^static int stablen, stabstrlen, stabrellen;$/;"	v	file:
stacktop	test/objexe.asm	/^stacktop:$/;"	l
standard_extension	nasmlib.c	/^void standard_extension(char *inname, char *outname, char *extension,$/;"	f
start	nasmlib.h	/^    long elem_len, length, posn, start, rpos;$/;"	m	struct:SAA
start	output/outbin.c	/^    unsigned long start;        \/* section start address *\/$/;"	m	struct:Section	file:
start	test/bintest.asm	/^start	  mov byte [bss_sym],',' ; [1] [8]$/;"	l
start	test/expimp.asm	/^start:$/;"	l
start	test/multisection.asm	/^start:$/;"	l
start_index	output/outbin.c	/^    long start_index;           \/* NASM section id for non-relocated version *\/$/;"	m	struct:Section	file:
startbyte	insns.pl	/^sub startbyte {$/;"	s
startpos	output/outieee.c	/^    long startpos;$/;"	m	struct:ieeeSection	file:
state	preproc.c	/^    int state;$/;"	m	struct:Cond	file:
stderr_redir	rdoff/ldrdf.c	/^    int stderr_redir;$/;"	m	struct:ldrdfoptions	file:
stdmac	macros.c	/^static const char *stdmac[] = {$/;"	v	file:
stdmac	nasm.h	/^    const char **stdmac;$/;"	m	struct:ofmt
stdmacpos	preproc.c	/^static const char **stdmacpos;$/;"	v	file:
stdscan	nasmlib.c	/^int stdscan(void *private_data, struct tokenval *tv)$/;"	f
stdscan_bufptr	nasmlib.c	/^char *stdscan_bufptr = NULL;$/;"	v
stdscan_copy	nasmlib.c	/^static char *stdscan_copy(char *p, int len)$/;"	f	file:
stdscan_pop	nasmlib.c	/^static void stdscan_pop(void)$/;"	f	file:
stdscan_reset	nasmlib.c	/^void stdscan_reset(void)$/;"	f
stdscan_templen	nasmlib.c	/^static int stdscan_tempsize = 0, stdscan_templen = 0;$/;"	v	file:
stdscan_tempsize	nasmlib.c	/^static int stdscan_tempsize = 0, stdscan_templen = 0;$/;"	v	file:
stdscan_tempstorage	nasmlib.c	/^static char **stdscan_tempstorage = NULL;$/;"	v	file:
stepsize	nasmlib.h	/^    long stepsize;$/;"	m	struct:RAA
stext	output/outaout.c	/^static struct Section stext, sdata, sbss;$/;"	v	file:
stext	output/outas86.c	/^static struct Section stext, sdata;$/;"	v	file:
stopoptions	nasm.c	/^int stopoptions = 0;$/;"	v
string	output/outobj.c	/^        char *string;$/;"	m	union:External::<anonymous>	file:
string1	rdoff/test/testlib.asm	/^string1:	db 'abc',0	; try changing these strings and see$/;"	d
string2	rdoff/test/testlib.asm	/^string2:	db 'abd',0	; what happens!$/;"	d
string2array	doc/genps.pl	/^sub string2array($)$/;"	s
stringlen	nasm.h	/^    int stringlen;              \/* ... and here's how long it is *\/$/;"	m	struct:extop
stringval	nasm.h	/^    char *stringval;            \/* if it's a string, then here it is *\/$/;"	m	struct:extop
strip	rdoff/ldrdf.c	/^    int strip;$/;"	m	struct:ldrdfoptions	file:
strpos	output/outaout.c	/^    long strpos;                \/* string table position of name *\/$/;"	m	struct:Symbol	file:
strpos	output/outas86.c	/^    long strpos;                \/* string table position of name *\/$/;"	m	struct:Symbol	file:
strpos	output/outcoff.c	/^    long strpos;                \/* string table position of name *\/$/;"	m	struct:Symbol	file:
strpos	output/outelf.c	/^    long strpos;                \/* string table position of name *\/$/;"	m	struct:Symbol	file:
strs	output/outaout.c	/^static struct SAA *strs;$/;"	v	file:
strs	output/outas86.c	/^static struct SAA *strs;$/;"	v	file:
strs	output/outcoff.c	/^static struct SAA *strs;$/;"	v	file:
strs	output/outelf.c	/^static struct SAA *strs;$/;"	v	file:
strslen	output/outaout.c	/^static unsigned long strslen;$/;"	v	file:
strslen	output/outas86.c	/^static unsigned long strslen;$/;"	v	file:
strslen	output/outcoff.c	/^static unsigned long strslen;$/;"	v	file:
strslen	output/outelf.c	/^static unsigned long strslen;$/;"	v	file:
suppress	listing.c	/^static int suppress;            \/* for INCBIN & TIMES special cases *\/$/;"	v	file:
suppressed	nasm.c	/^static char suppressed[1 + ERR_WARN_MAX] = {$/;"	v	file:
suppressed_names	nasm.c	/^static const char *suppressed_names[1 + ERR_WARN_MAX] = {$/;"	v	file:
suppressed_what	nasm.c	/^static const char *suppressed_what[1 + ERR_WARN_MAX] = {$/;"	v	file:
symbase	output/outcoff.c	/^    } symbase;                  \/* relocation for symbol number :) *\/$/;"	m	struct:Reloc	file:
symbol	output/outaout.c	/^    long symbol;                \/* symbol number or -ve section id *\/$/;"	m	struct:Reloc	file:
symbol	output/outcoff.c	/^    long symbol;                \/* symbol number *\/$/;"	m	struct:Reloc	file:
symbol	output/outelf.c	/^    long symbol;                \/* ELF symbol info thingy *\/$/;"	m	struct:Reloc	file:
symdef	nasm.h	/^    void (*symdef) (char *name, long segment, long offset, int is_global,$/;"	m	struct:ofmt
symlininfo	output/outelf.c	/^struct symlininfo {$/;"	s	file:
symnum	output/outaout.c	/^    long symnum;                \/* index into symbol table *\/$/;"	m	struct:Symbol	file:
syms	output/outaout.c	/^static struct SAA *syms;$/;"	v	file:
syms	output/outas86.c	/^static struct SAA *syms;$/;"	v	file:
syms	output/outcoff.c	/^static struct SAA *syms;$/;"	v	file:
syms	output/outelf.c	/^static struct SAA *syms;$/;"	v	file:
symtab	rdoff/ldrdf.c	/^void *symtab = NULL;$/;"	v
symtab	rdoff/rdfload.h	/^    void *symtab;$/;"	m	struct:RDFModuleStruct
symtab	rdoff/symtab.c	/^typedef symtabTab *symtab;$/;"	t	file:
symtabDone	rdoff/symtab.c	/^void symtabDone(void *stab)$/;"	f
symtabDump	rdoff/symtab.c	/^void symtabDump(void *stab, FILE * of)$/;"	f
symtabEnt	rdoff/symtab.h	/^} symtabEnt;$/;"	t
symtabFind	rdoff/symtab.c	/^symtabEnt *symtabFind(void *stab, const char *name)$/;"	f
symtabInsert	rdoff/symtab.c	/^void symtabInsert(void *stab, symtabEnt * ent)$/;"	f
symtabNew	rdoff/symtab.c	/^void *symtabNew(void)$/;"	f
symtabNode	rdoff/symtab.c	/^} symtabNode;$/;"	t	file:
symtabTab	rdoff/symtab.c	/^typedef symtabNode *(symtabTab[SYMTABSIZE]);$/;"	t	file:
symtab_add	rdoff/ldrdf.c	/^void symtab_add(const char *symbol, int segment, long offset)$/;"	f
symtab_get	rdoff/ldrdf.c	/^int symtab_get(const char *symbol, int *segment, long *offset)$/;"	f
symtabsection	output/outelf.c	/^static int symtabsection;$/;"	v	file:
symval	output/outcoff.c	/^static struct RAA *bsym, *symval;$/;"	v	file:
synx	sync.c	/^} *synx;$/;"	v	file:
t	rdoff/rdfload.h	/^    unsigned char *t, *d, *b;   \/* text, data, and bss segments *\/$/;"	m	struct:RDFModuleStruct
t_charptr	nasm.h	/^    char *t_charptr;$/;"	m	struct:tokenval
t_integer	nasm.h	/^    long t_integer, t_inttwo;$/;"	m	struct:tokenval
t_inttwo	nasm.h	/^    long t_integer, t_inttwo;$/;"	m	struct:tokenval
t_type	nasm.h	/^    int t_type;$/;"	m	struct:tokenval
tagCollection	rdoff/collectn.h	/^typedef struct tagCollection {$/;"	s
tagString	output/outcoff.c	/^typedef struct tagString {$/;"	s	file:
tagSymtabNode	rdoff/symtab.c	/^typedef struct tagSymtabNode {$/;"	s	file:
tail	output/outaout.c	/^    struct Reloc *head, **tail;$/;"	m	struct:Section	file:
tail	output/outas86.c	/^    struct Piece *head, *last, **tail;$/;"	m	struct:Section	file:
tail	output/outcoff.c	/^    struct Reloc *head, **tail;$/;"	m	struct:Section	file:
tail	output/outelf.c	/^    struct Reloc *head, **tail;$/;"	m	struct:Section	file:
target	output/outbin.c	/^    struct Section *target;$/;"	m	struct:Reloc	file:
tasm_compatible_mode	nasm.c	/^int tasm_compatible_mode = FALSE;$/;"	v
tasm_directives	preproc.c	/^static const char *tasm_directives[] = {$/;"	v	file:
tempexpr	eval.c	/^static expr *tempexpr;$/;"	v	file:
tempexpr_size	eval.c	/^static int tempexpr_size;$/;"	v	file:
tempexprs	eval.c	/^static expr **tempexprs = NULL;$/;"	v	file:
tempexprs_size	eval.c	/^static int tempexprs_size = 0;$/;"	v	file:
terminate_after_phase	nasm.c	/^static int terminate_after_phase;$/;"	v	file:
texi_index	doc/rdsrc.pl	/^sub texi_index {$/;"	s
texi_menu	doc/rdsrc.pl	/^sub texi_menu {$/;"	s
text	preproc.c	/^    char *text;$/;"	m	struct:Token	file:
text	test/objlink.c	/^char text[] = "hello, world\\n";$/;"	v
textargs	nasm.c	/^struct textargs {$/;"	s	file:
textopts	nasm.c	/^struct textargs textopts[] = {$/;"	v
textptr	test/bintest.asm	/^textptr	  dw endX		; [2] [9]$/;"	d
textptr	test/elfso.asm	/^textptr	  dd greet wrt ..sym	; [15]$/;"	d
textptr	test/elftest.asm	/^textptr	  dd greet		; [15]$/;"	d
textrel	rdoff/rdfload.h	/^    long textrel;$/;"	m	struct:RDFModuleStruct
times	nasm.h	/^    long times;                 \/* repeat count (TIMES prefix) *\/$/;"	m
to_double	float.c	/^static int to_double(char *str, long sign, unsigned char *result,$/;"	f	file:
to_float	float.c	/^static int to_float(char *str, long sign, unsigned char *result,$/;"	f	file:
to_ldoub	float.c	/^static int to_ldoub(char *str, long sign, unsigned char *result,$/;"	f	file:
tok_is_	preproc.c	431;"	d	file:
tok_isnt_	preproc.c	432;"	d	file:
tok_type_	preproc.c	429;"	d	file:
tokenise	preproc.c	/^static Token *tokenise(char *line)$/;"	f	file:
tokenval	nasm.h	/^struct tokenval {$/;"	s
tokval	eval.c	/^static struct tokenval *tokval; \/* The current token *\/$/;"	v	file:
tokval	parser.c	/^static struct tokenval tokval;$/;"	v	file:
top_srcdir	rdoff/Makefile	/^top_srcdir	= ..$/;"	m
trampoline	test/objtest.asm	/^trampoline: pop ax$/;"	l
translatelong	rdoff/rdoff.c	/^long translatelong(long in)$/;"	f
translatesegmenttype	rdoff/rdoff.c	/^char *translatesegmenttype(uint16 type)$/;"	f
translateshort	rdoff/rdoff.c	/^uint16 translateshort(uint16 in)$/;"	f
treg	regdis.c	/^static const int treg    [] = {R_TR0,R_TR1,R_TR2,R_TR3,R_TR4,R_TR5,R_TR6,R_TR7};$/;"	v	file:
type	nasm.h	/^    int type;$/;"	m	struct:eval_hints
type	nasm.h	/^    long type;                  \/* a register, or EXPR_xxx *\/$/;"	m
type	nasm.h	/^    long type;                  \/* defined above *\/$/;"	m	struct:extop
type	nasm.h	/^    long type;                  \/* type of operand *\/$/;"	m
type	output/outaout.c	/^    int type;                   \/* symbol type - see flags below *\/$/;"	m	struct:Symbol	file:
type	output/outas86.c	/^    int type;                   \/* 0 = absolute, 1 = seg, 2 = sym *\/$/;"	m	struct:Piece	file:
type	output/outelf.c	/^    int type;                   \/* SHT_PROGBITS or SHT_NOBITS *\/$/;"	m	struct:Section	file:
type	output/outelf.c	/^    int type;                   \/* symbol type *\/$/;"	m	struct:Symbol	file:
type	output/outelf.c	/^    int type;                   \/* type of relocation *\/$/;"	m	struct:Reloc	file:
type	output/outieee.c	/^    int type;                   \/* for debug purposes *\/$/;"	m	struct:ieeePublic	file:
type	output/outobj.c	/^    int type;                   \/* only for local debug syms *\/$/;"	m	struct:Public	file:
type	output/outobj.c	/^    unsigned int type;          \/* Record type                      *\/$/;"	m	struct:ObjRecord	file:
type	output/outrdf.c	/^    char type;                  \/* must be 1 *\/$/;"	m	struct:RelocRec	file:
type	output/outrdf.c	/^    char type;                  \/* must be 2 *\/$/;"	m	struct:ImportRec	file:
type	output/outrdf.c	/^    char type;                  \/* must be 3 *\/$/;"	m	struct:ExportRec	file:
type	output/outrdf.c	/^    char type;                  \/* must be 4 *\/$/;"	m	struct:DLLRec	file:
type	output/outrdf.c	/^    char type;                  \/* must be 5 *\/$/;"	m	struct:BSSRec	file:
type	preproc.c	/^    int type;$/;"	m	struct:Token	file:
type	rdoff/rdoff.h	/^    byte type;                  \/* must be 1 *\/$/;"	m	struct:RelocRec
type	rdoff/rdoff.h	/^    byte type;                  \/* must be 10 *\/$/;"	m	struct:CommonRec
type	rdoff/rdoff.h	/^    byte type;                  \/* must be 2 *\/$/;"	m	struct:ImportRec
type	rdoff/rdoff.h	/^    byte type;                  \/* must be 3 *\/$/;"	m	struct:ExportRec
type	rdoff/rdoff.h	/^    byte type;                  \/* must be 4 *\/$/;"	m	struct:DLLRec
type	rdoff/rdoff.h	/^    byte type;                  \/* must be 5 *\/$/;"	m	struct:BSSRec
type	rdoff/rdoff.h	/^    byte type;                  \/* must be 8 *\/$/;"	m	struct:ModRec
type	rdoff/rdoff.h	/^    byte type;$/;"	m	struct:GenericRec
type	rdoff/rdoff.h	/^    char type;                  \/* invariant throughout all below *\/$/;"	m	union:RDFHeaderRec
type	rdoff/rdoff.h	/^    uint16 type;$/;"	m	struct:SegmentHeaderRec
typedesc	rdoff/ldsegs.h	/^    char *typedesc;             \/* a description of the segment type *\/$/;"	m	struct:segconfig
typehi	rdoff/ldsegs.h	/^    UI16 typelow, typehi;       \/* range of seg nos for which this is valid *\/$/;"	m	struct:segconfig
typelow	rdoff/ldsegs.h	/^    UI16 typelow, typehi;       \/* range of seg nos for which this is valid *\/$/;"	m	struct:segconfig
types	output/outdbg.c	/^char *types[] = {$/;"	v
u	nasmlib.h	/^    } u;$/;"	m	struct:RAA
uint16	rdoff/rdoff.h	/^typedef unsigned short uint16;$/;"	t
uint32	rdoff/rdoff.h	/^typedef unsigned long uint32;$/;"	t
unique	preproc.c	/^    unsigned long unique;$/;"	m	struct:MMacro	file:
unique	preproc.c	/^static unsigned long unique;    \/* unique identifier numbers *\/$/;"	v	file:
unknown_expr	eval.c	/^static expr *unknown_expr(void)$/;"	f	file:
up	output/outobj.c	/^    ObjRecord **up;             \/* Master pointer to this ObjRecord *\/$/;"	m	struct:ObjRecord	file:
uplevel	nasm.h	/^    void (*uplevel) (int);$/;"	m
usage	labels.c	/^    int size, usage;            \/* size and used space in ... *\/$/;"	m	struct:permts	file:
usage	nasm.c	/^static void usage(void)$/;"	f	file:
usage	rdoff/ldrdf.c	/^void usage()$/;"	f
usage	rdoff/rdflib.c	/^const char *usage =$/;"	v
usage	rdoff/rdlar.c	/^void usage(void)$/;"	f
use32	output/outieee.c	/^    long use32;                 \/* is this segment 32-bit? *\/$/;"	m	struct:ieeeSection	file:
use32	output/outobj.c	/^    long use32;                 \/* is this segment 32-bit? *\/$/;"	m	struct:Segment	file:
used	output/outobj.c	/^    int used;                   \/* Current data size                *\/$/;"	m	struct:ObjRecord	file:
usefname	rdoff/rdlar.c	/^    bool usefname;$/;"	m	file:
user_nolist	nasm.c	/^int user_nolist = 0;            \/* fbk 9\/2\/00 *\/$/;"	v
using_debug_info	nasm.c	/^static int using_debug_info, opt_verbose_info;$/;"	v	file:
valign	output/outbin.c	/^    unsigned long valign;       \/* notional section alignment *\/$/;"	m	struct:Section	file:
value	nasm.c	/^    int value;$/;"	m	struct:textargs	file:
value	nasm.h	/^    long value;                 \/* must be >= 32 bits *\/$/;"	m
value	output/outaout.c	/^    long value;                 \/* address, or COMMON variable size *\/$/;"	m	struct:Symbol	file:
value	output/outas86.c	/^    long value;                 \/* address, or COMMON variable size *\/$/;"	m	struct:Symbol	file:
value	output/outcoff.c	/^    long value;                 \/* address, or COMMON variable size *\/$/;"	m	struct:Symbol	file:
value	output/outelf.c	/^    long value;                 \/* address, or COMMON variable align *\/$/;"	m	struct:Symbol	file:
verbose	rdoff/ldrdf.c	/^    int verbose;$/;"	m	struct:ldrdfoptions	file:
verbose	rdoff/rdlar.c	/^    int verbose;$/;"	m	file:
vfollows	output/outbin.c	/^    char *vfollows;             \/* the section that this one will notionally follow *\/$/;"	m	struct:Section	file:
vstart	output/outbin.c	/^    unsigned long vstart;       \/* section virtual start address *\/$/;"	m	struct:Section	file:
vstart_index	output/outbin.c	/^    long vstart_index;          \/* the NASM section id *\/$/;"	m	struct:Section	file:
want_usage	nasm.c	/^static int want_usage;$/;"	v	file:
whichcond	disasm.c	/^static const char *whichcond(int condval)$/;"	f	file:
whichreg	disasm.c	/^static int whichreg(long regflags, int regval)$/;"	f	file:
win32	output/outcoff.c	/^static int win32;$/;"	v	file:
word_hlp	doc/rdsrc.pl	/^sub word_hlp {$/;"	s
word_html	doc/rdsrc.pl	/^sub word_html {$/;"	s
word_texi	doc/rdsrc.pl	/^sub word_texi {$/;"	s
word_txt	doc/rdsrc.pl	/^sub word_txt {$/;"	s
write_bss_rec	output/outrdf.c	/^static void write_bss_rec(struct BSSRec *r)$/;"	f	file:
write_bss_rec	output/outrdf2.c	/^static void write_bss_rec(struct BSSRec *r)$/;"	f	file:
write_common_rec	output/outrdf2.c	/^static void write_common_rec(struct CommonRec *r)$/;"	f	file:
write_data_record	rdoff/rdf2ihx.c	/^static int write_data_record(FILE * of, int ofs, int nbytes,$/;"	f	file:
write_dip	doc/rdsrc.pl	/^sub write_dip {$/;"	s
write_dll_rec	output/outrdf.c	/^static void write_dll_rec(struct DLLRec *r)$/;"	f	file:
write_dll_rec	output/outrdf2.c	/^static void write_dll_rec(struct DLLRec *r)$/;"	f	file:
write_export_rec	output/outrdf.c	/^static void write_export_rec(struct ExportRec *r)$/;"	f	file:
write_export_rec	output/outrdf2.c	/^static void write_export_rec(struct ExportRec *r)$/;"	f	file:
write_hello	test/lnxhello.asm	/^write_hello:$/;"	l
write_hlp	doc/rdsrc.pl	/^sub write_hlp {$/;"	s
write_html	doc/rdsrc.pl	/^sub write_html {$/;"	s
write_import_rec	output/outrdf.c	/^static void write_import_rec(struct ImportRec *r)$/;"	f	file:
write_import_rec	output/outrdf2.c	/^static void write_import_rec(struct ImportRec *r)$/;"	f	file:
write_modname_rec	output/outrdf2.c	/^static void write_modname_rec(struct ModRec *r)$/;"	f	file:
write_output	rdoff/ldrdf.c	/^void write_output(const char *filename)$/;"	f
write_reloc_rec	output/outrdf.c	/^static void write_reloc_rec(struct RelocRec *r)$/;"	f	file:
write_reloc_rec	output/outrdf2.c	/^static void write_reloc_rec(struct RelocRec *r)$/;"	f	file:
write_texi	doc/rdsrc.pl	/^sub write_texi {$/;"	s
write_txt	doc/rdsrc.pl	/^sub write_txt {$/;"	s
wrt	nasm.h	/^    long wrt;                   \/* ... and here *\/$/;"	m	struct:extop
wrt	nasm.h	/^    long wrt;                   \/* segment base it's relative to *\/$/;"	m
x_size	output/outobj.c	/^    int x_size;                 \/* (see obj_x)                      *\/$/;"	m	struct:ObjRecord	file:
xdigit	listing.c	/^static char xdigit[] = "0123456789ABCDEF";$/;"	v	file:
xmmreg	regdis.c	/^static const int xmmreg  [] = {R_XMM0,R_XMM1,R_XMM2,R_XMM3,R_XMM4,R_XMM5,R_XMM6,R_XMM7};$/;"	v	file:
xxx	test/changed.asm	/^xxx yyy$/;"	l
